
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 15 18:28:03 GMT 2007
//----------------------------------------------------

package translator.essencePrimeParser;

import translator.conjureEssenceSpecification.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 15 18:28:03 GMT 2007
  */
public class EssencePrimeParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EssencePrimeParser() {super();}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\011\004\000\002\016\003\000\002\016\005\000\002\017" +
    "\003\000\002\017\011\000\002\017\005\000\002\020\007" +
    "\000\002\020\007\000\002\020\005\000\002\020\006\000" +
    "\002\020\003\000\002\021\005\000\002\022\003\000\002" +
    "\022\005\000\002\023\005\000\002\023\003\000\002\023" +
    "\006\000\002\023\010\000\002\024\003\000\002\024\005" +
    "\000\002\025\003\000\002\025\005\000\002\026\003\000" +
    "\002\026\005\000\002\030\003\000\002\030\005\000\002" +
    "\027\005\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\006\000\002\034\003\000\002\034\004\000\002\034" +
    "\004\000\002\034\005\000\002\034\003\000\002\034\005" +
    "\000\002\035\003\000\002\035\005\000\002\033\003\000" +
    "\002\033\003\000\002\036\004\000\002\036\005\000\002" +
    "\036\004\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\041" +
    "\006\000\002\041\006\000\002\041\006\000\002\041\012" +
    "\000\002\041\012\000\002\041\012\000\002\041\012\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\042\006\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\044\005\000\002\045\014" +
    "\000\002\046\003\000\002\046\005\000\002\047\003\000" +
    "\002\047\005\000\002\050\005\000\002\051\003\000\002" +
    "\051\005\000\002\012\004\000\002\013\004\000\002\014" +
    "\004\000\002\052\003\000\002\052\005\000\002\054\005" +
    "\000\002\054\007\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\055\005\000\002" +
    "\053\003\000\002\053\005\000\002\056\005\000\002\057" +
    "\006\000\002\015\004\000\002\060\003\000\002\060\005" +
    "\000\002\007\004\000\002\007\004\000\002\007\002\000" +
    "\002\010\004\000\002\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\004\021\004\001\002\000\024\002\ufffd\016" +
    "\016\020\007\023\022\025\ufffd\027\ufffd\031\023\034\ufffd" +
    "\040\011\001\002\000\004\002\006\001\002\000\004\002" +
    "\000\001\002\000\004\101\375\001\002\000\024\002\ufff9" +
    "\016\ufff9\020\ufff9\023\ufff9\025\ufff9\027\ufff9\031\ufff9\034" +
    "\ufff9\040\ufff9\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\054\015\052\017\033\026\063\030\060\032" +
    "\061\035\034\036\043\037\041\041\042\053\064\063\053" +
    "\072\036\101\040\102\062\001\002\000\024\002\ufffa\016" +
    "\ufffa\020\ufffa\023\ufffa\025\ufffa\027\ufffa\031\ufffa\034\ufffa" +
    "\040\ufffa\001\002\000\024\002\ufffc\016\016\020\007\023" +
    "\022\025\ufffc\027\ufffc\031\023\034\ufffc\040\011\001\002" +
    "\000\024\002\ufff6\016\ufff6\020\ufff6\023\ufff6\025\ufff6\027" +
    "\ufff6\031\ufff6\034\ufff6\040\ufff6\001\002\000\004\002\001" +
    "\001\002\000\004\101\176\001\002\000\024\002\ufff7\016" +
    "\ufff7\020\ufff7\023\ufff7\025\ufff7\027\ufff7\031\ufff7\034\ufff7" +
    "\040\ufff7\001\002\000\012\002\ufffe\025\ufffe\027\ufffe\034" +
    "\ufffe\001\002\000\024\002\ufff8\016\ufff8\020\ufff8\023\ufff8" +
    "\025\ufff8\027\ufff8\031\ufff8\034\ufff8\040\ufff8\001\002\000" +
    "\004\101\176\001\002\000\004\101\176\001\002\000\012" +
    "\002\uff84\025\027\027\026\034\uff84\001\002\000\006\002" +
    "\uff82\034\321\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\054\015\052\017\033\026\063\030\060\032" +
    "\061\035\034\036\043\037\041\041\042\053\064\063\053" +
    "\072\036\101\040\102\062\001\002\000\050\004\056\005" +
    "\031\006\057\013\055\014\054\015\052\017\033\026\063" +
    "\030\060\032\061\035\034\036\043\037\041\041\042\053" +
    "\064\063\053\072\036\101\040\102\062\001\002\000\104" +
    "\002\uffda\016\uffda\020\uffda\023\uffda\025\uffda\027\uffda\031" +
    "\uffda\034\uffda\040\uffda\042\uffda\046\uffda\050\uffda\051\uffda" +
    "\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061" +
    "\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\070\uffda" +
    "\071\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100" +
    "\uffda\001\002\000\004\041\310\001\002\000\104\002\uffd8" +
    "\016\uffd8\020\uffd8\023\uffd8\025\uffd8\027\uffd8\031\uffd8\034" +
    "\uffd8\040\uffd8\042\uffd8\046\uffd8\050\uffd8\051\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\070\uffd8\071\uffd8" +
    "\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\001" +
    "\002\000\004\101\uffa4\001\002\000\004\101\uffa3\001\002" +
    "\000\104\002\uffd3\016\uffd3\020\uffd3\023\uffd3\025\uffd3\027" +
    "\uffd3\031\uffd3\034\uffd3\040\uffd3\042\uffd3\046\uffd3\050\uffd3" +
    "\051\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\070\uffd3\071\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077" +
    "\uffd3\100\uffd3\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\054\015\052\017\033\026\063\030\060\032" +
    "\061\035\034\036\043\037\041\041\042\053\064\063\053" +
    "\072\036\101\040\102\062\001\002\000\104\002\uffd5\016" +
    "\uffd5\020\uffd5\023\uffd5\025\uffd5\027\uffd5\031\uffd5\034\uffd5" +
    "\040\uffd5\042\uffd5\046\uffd5\050\uffd5\051\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\070\uffd5\071\uffd5\073" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\001\002" +
    "\000\106\002\uffcf\016\uffcf\020\uffcf\023\uffcf\025\uffcf\027" +
    "\uffcf\031\uffcf\034\uffcf\040\uffcf\042\uffcf\045\242\046\uffcf" +
    "\050\uffcf\051\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\070\uffcf\071\uffcf\073\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\100\uffcf\001\002\000\104\002\uffd1\016\uffd1" +
    "\020\uffd1\023\uffd1\025\uffd1\027\uffd1\031\uffd1\034\uffd1\040" +
    "\uffd1\042\uffd1\046\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\070\uffd1\071\uffd1\073\uffd1" +
    "\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\001\002\000" +
    "\050\004\056\005\031\006\057\013\055\014\054\015\052" +
    "\017\033\026\063\030\060\032\061\035\034\036\043\037" +
    "\041\041\042\053\064\063\053\072\036\101\040\102\062" +
    "\001\002\000\004\041\234\001\002\000\104\002\uffd9\016" +
    "\uffd9\020\uffd9\023\uffd9\025\uffd9\027\uffd9\031\uffd9\034\uffd9" +
    "\040\uffd9\042\uffd9\046\uffd9\050\uffd9\051\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\066\uffd9\070\uffd9\071\uffd9\073" +
    "\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\001\002" +
    "\000\054\002\uff86\034\uff86\054\103\055\107\056\110\057" +
    "\104\060\075\061\066\062\071\063\101\064\077\065\074" +
    "\066\111\070\070\071\072\073\076\074\102\075\073\076" +
    "\067\077\100\100\105\001\002\000\104\002\uffd7\016\uffd7" +
    "\020\uffd7\023\uffd7\025\uffd7\027\uffd7\031\uffd7\034\uffd7\040" +
    "\uffd7\042\uffd7\046\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\066\uffd7\070\uffd7\071\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\001\002\000" +
    "\104\002\uffd6\016\uffd6\020\uffd6\023\uffd6\025\uffd6\027\uffd6" +
    "\031\uffd6\034\uffd6\040\uffd6\042\uffd6\046\uffd6\050\uffd6\051" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\070" +
    "\uffd6\071\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6" +
    "\100\uffd6\001\002\000\104\002\uffd4\016\uffd4\020\uffd4\023" +
    "\uffd4\025\uffd4\027\uffd4\031\uffd4\034\uffd4\040\uffd4\042\uffd4" +
    "\046\uffd4\050\uffd4\051\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\070\uffd4\071\uffd4\073\uffd4\074\uffd4\075" +
    "\uffd4\076\uffd4\077\uffd4\100\uffd4\001\002\000\004\101\176" +
    "\001\002\000\104\002\uffd0\016\uffd0\020\uffd0\023\uffd0\025" +
    "\uffd0\027\uffd0\031\uffd0\034\uffd0\040\uffd0\042\uffd0\046\uffd0" +
    "\050\uffd0\051\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\070\uffd0\071\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\100\uffd0\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\054\015\052\017\033\026\063\030" +
    "\060\032\061\035\034\036\043\037\041\041\042\053\064" +
    "\063\053\072\036\101\040\102\062\001\002\000\004\041" +
    "\164\001\002\000\004\101\uffa5\001\002\000\004\041\161" +
    "\001\002\000\004\041\152\001\002\000\004\041\147\001" +
    "\002\000\004\041\140\001\002\000\104\002\uffd2\016\uffd2" +
    "\020\uffd2\023\uffd2\025\uffd2\027\uffd2\031\uffd2\034\uffd2\040" +
    "\uffd2\042\uffd2\046\uffd2\050\uffd2\051\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\070\uffd2\071\uffd2\073\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\001\002\000" +
    "\004\041\135\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\054\015\052\017\033\026\063\030\060\032" +
    "\061\035\034\036\043\037\041\041\042\053\064\063\053" +
    "\072\036\101\040\102\062\001\002\000\052\053\106\054" +
    "\103\055\107\056\110\057\104\060\075\061\066\062\071" +
    "\063\101\064\077\065\074\066\111\070\070\071\072\073" +
    "\076\074\102\075\073\076\067\077\100\100\105\001\002" +
    "\000\050\004\056\005\031\006\057\013\055\014\054\015" +
    "\052\017\033\026\063\030\060\032\061\035\034\036\043" +
    "\037\041\041\042\053\064\063\053\072\036\101\040\102" +
    "\062\001\002\000\050\004\056\005\031\006\057\013\055" +
    "\014\054\015\052\017\033\026\063\030\060\032\061\035" +
    "\034\036\043\037\041\041\042\053\064\063\053\072\036" +
    "\101\040\102\062\001\002\000\050\004\056\005\031\006" +
    "\057\013\055\014\054\015\052\017\033\026\063\030\060" +
    "\032\061\035\034\036\043\037\041\041\042\053\064\063" +
    "\053\072\036\101\040\102\062\001\002\000\050\004\056" +
    "\005\031\006\057\013\055\014\054\015\052\017\033\026" +
    "\063\030\060\032\061\035\034\036\043\037\041\041\042" +
    "\053\064\063\053\072\036\101\040\102\062\001\002\000" +
    "\050\004\056\005\031\006\057\013\055\014\054\015\052" +
    "\017\033\026\063\030\060\032\061\035\034\036\043\037" +
    "\041\041\042\053\064\063\053\072\036\101\040\102\062" +
    "\001\002\000\050\004\056\005\031\006\057\013\055\014" +
    "\054\015\052\017\033\026\063\030\060\032\061\035\034" +
    "\036\043\037\041\041\042\053\064\063\053\072\036\101" +
    "\040\102\062\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\054\015\052\017\033\026\063\030\060\032" +
    "\061\035\034\036\043\037\041\041\042\053\064\063\053" +
    "\072\036\101\040\102\062\001\002\000\050\004\056\005" +
    "\031\006\057\013\055\014\054\015\052\017\033\026\063" +
    "\030\060\032\061\035\034\036\043\037\041\041\042\053" +
    "\064\063\053\072\036\101\040\102\062\001\002\000\050" +
    "\004\056\005\031\006\057\013\055\014\054\015\052\017" +
    "\033\026\063\030\060\032\061\035\034\036\043\037\041" +
    "\041\042\053\064\063\053\072\036\101\040\102\062\001" +
    "\002\000\050\004\056\005\031\006\057\013\055\014\054" +
    "\015\052\017\033\026\063\030\060\032\061\035\034\036" +
    "\043\037\041\041\042\053\064\063\053\072\036\101\040" +
    "\102\062\001\002\000\050\004\056\005\031\006\057\013" +
    "\055\014\054\015\052\017\033\026\063\030\060\032\061" +
    "\035\034\036\043\037\041\041\042\053\064\063\053\072" +
    "\036\101\040\102\062\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\054\015\052\017\033\026\063\030" +
    "\060\032\061\035\034\036\043\037\041\041\042\053\064" +
    "\063\053\072\036\101\040\102\062\001\002\000\050\004" +
    "\056\005\031\006\057\013\055\014\054\015\052\017\033" +
    "\026\063\030\060\032\061\035\034\036\043\037\041\041" +
    "\042\053\064\063\053\072\036\101\040\102\062\001\002" +
    "\000\050\004\056\005\031\006\057\013\055\014\054\015" +
    "\052\017\033\026\063\030\060\032\061\035\034\036\043" +
    "\037\041\041\042\053\064\063\053\072\036\101\040\102" +
    "\062\001\002\000\050\004\056\005\031\006\057\013\055" +
    "\014\054\015\052\017\033\026\063\030\060\032\061\035" +
    "\034\036\043\037\041\041\042\053\064\063\053\072\036" +
    "\101\040\102\062\001\002\000\050\004\056\005\031\006" +
    "\057\013\055\014\054\015\052\017\033\026\063\030\060" +
    "\032\061\035\034\036\043\037\041\041\042\053\064\063" +
    "\053\072\036\101\040\102\062\001\002\000\104\002\uffc2" +
    "\016\uffc2\020\uffc2\023\uffc2\025\uffc2\027\uffc2\031\uffc2\034" +
    "\uffc2\040\uffc2\042\uffc2\046\uffc2\050\uffc2\051\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\070\uffc2\071\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\001" +
    "\002\000\050\004\056\005\031\006\057\013\055\014\054" +
    "\015\052\017\033\026\063\030\060\032\061\035\034\036" +
    "\043\037\041\041\042\053\064\063\053\072\036\101\040" +
    "\102\062\001\002\000\050\004\056\005\031\006\057\013" +
    "\055\014\054\015\052\017\033\026\063\030\060\032\061" +
    "\035\034\036\043\037\041\041\042\053\064\063\053\072" +
    "\036\101\040\102\062\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\054\015\052\017\033\026\063\030" +
    "\060\032\061\035\034\036\043\037\041\041\042\053\064" +
    "\063\053\072\036\101\040\102\062\001\002\000\104\002" +
    "\uffb6\016\uffb6\020\uffb6\023\uffb6\025\uffb6\027\uffb6\031\uffb6" +
    "\034\uffb6\040\uffb6\042\uffb6\046\uffb6\050\uffb6\051\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\070\070\071" +
    "\072\073\076\074\102\075\uffb6\076\uffb6\077\uffb6\100\uffb6" +
    "\001\002\000\064\002\uffbe\016\uffbe\020\uffbe\023\uffbe\025" +
    "\uffbe\027\uffbe\031\uffbe\034\uffbe\040\uffbe\042\uffbe\046\uffbe" +
    "\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe\062\071\063" +
    "\101\064\077\065\074\066\111\070\070\071\072\073\076" +
    "\074\102\001\002\000\100\002\uffbf\016\uffbf\020\uffbf\023" +
    "\uffbf\025\uffbf\027\uffbf\031\uffbf\034\uffbf\040\uffbf\042\uffbf" +
    "\046\uffbf\050\uffbf\051\uffbf\053\uffbf\056\110\057\104\060" +
    "\075\061\066\062\071\063\101\064\077\065\074\066\111" +
    "\070\070\071\072\073\076\074\102\075\073\076\067\077" +
    "\100\100\105\001\002\000\064\002\uffa7\016\uffa7\020\uffa7" +
    "\023\uffa7\025\uffa7\027\uffa7\031\uffa7\034\uffa7\040\uffa7\042" +
    "\uffa7\046\uffa7\050\uffa7\051\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\062\071\063\101\064\077\065\074\066\111\070\070\071" +
    "\072\073\076\074\102\001\002\000\064\002\uffbd\016\uffbd" +
    "\020\uffbd\023\uffbd\025\uffbd\027\uffbd\031\uffbd\034\uffbd\040" +
    "\uffbd\042\uffbd\046\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\062\071\063\101\064\077\065\074\066\111\070" +
    "\070\071\072\073\076\074\102\001\002\000\100\002\uffc0" +
    "\016\uffc0\020\uffc0\023\uffc0\025\uffc0\027\uffc0\031\uffc0\034" +
    "\uffc0\040\uffc0\042\uffc0\046\uffc0\050\uffc0\051\uffc0\053\uffc0" +
    "\056\110\057\104\060\075\061\066\062\071\063\101\064" +
    "\077\065\074\066\111\070\070\071\072\073\076\074\102" +
    "\075\073\076\067\077\100\100\105\001\002\000\104\002" +
    "\uffb2\016\uffb2\020\uffb2\023\uffb2\025\uffb2\027\uffb2\031\uffb2" +
    "\034\uffb2\040\uffb2\042\uffb2\046\uffb2\050\uffb2\051\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\070\070\071" +
    "\072\073\076\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2" +
    "\001\002\000\104\002\uffb9\016\uffb9\020\uffb9\023\uffb9\025" +
    "\uffb9\027\uffb9\031\uffb9\034\uffb9\040\uffb9\042\uffb9\046\uffb9" +
    "\050\uffb9\051\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\077\065\074" +
    "\066\111\070\070\071\072\073\076\074\102\075\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\001\002\000\064\002\uffa8\016\uffa8" +
    "\020\uffa8\023\uffa8\025\uffa8\027\uffa8\031\uffa8\034\uffa8\040" +
    "\uffa8\042\uffa8\046\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\062\071\063\101\064\077\065\074\066\111\070" +
    "\070\071\072\073\076\074\102\001\002\000\104\002\uffb8" +
    "\016\uffb8\020\uffb8\023\uffb8\025\uffb8\027\uffb8\031\uffb8\034" +
    "\uffb8\040\uffb8\042\uffb8\046\uffb8\050\uffb8\051\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\066\111\070\070\071\072" +
    "\073\076\074\102\075\uffb8\076\uffb8\077\uffb8\100\uffb8\001" +
    "\002\000\104\002\uffb3\016\uffb3\020\uffb3\023\uffb3\025\uffb3" +
    "\027\uffb3\031\uffb3\034\uffb3\040\uffb3\042\uffb3\046\uffb3\050" +
    "\uffb3\051\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\070\070\071\072\073\uffb3\074\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\001\002\000\064\002\uffbc\016\uffbc\020" +
    "\uffbc\023\uffbc\025\uffbc\027\uffbc\031\uffbc\034\uffbc\040\uffbc" +
    "\042\uffbc\046\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\062\071\063\101\064\077\065\074\066\111\070\070" +
    "\071\072\073\076\074\102\001\002\000\104\002\uffb7\016" +
    "\uffb7\020\uffb7\023\uffb7\025\uffb7\027\uffb7\031\uffb7\034\uffb7" +
    "\040\uffb7\042\uffb7\046\uffb7\050\uffb7\051\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\065\uffb7\066\111\070\070\071\072\073" +
    "\076\074\102\075\uffb7\076\uffb7\077\uffb7\100\uffb7\001\002" +
    "\000\064\002\uffaa\016\uffaa\020\uffaa\023\uffaa\025\uffaa\027" +
    "\uffaa\031\uffaa\034\uffaa\040\uffaa\042\uffaa\046\uffaa\050\uffaa" +
    "\051\uffaa\053\uffaa\054\uffaa\055\uffaa\062\071\063\101\064" +
    "\077\065\074\066\111\070\070\071\072\073\076\074\102" +
    "\001\002\000\104\002\uffb4\016\uffb4\020\uffb4\023\uffb4\025" +
    "\uffb4\027\uffb4\031\uffb4\034\uffb4\040\uffb4\042\uffb4\046\uffb4" +
    "\050\uffb4\051\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\070\070\071\uffb4\073\uffb4\074\uffb4\075\uffb4\076" +
    "\uffb4\077\uffb4\100\uffb4\001\002\000\104\002\uffba\016\uffba" +
    "\020\uffba\023\uffba\025\uffba\027\uffba\031\uffba\034\uffba\040" +
    "\uffba\042\uffba\046\uffba\050\uffba\051\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\064\077\065\074\066\111\070\070\071\072\073\076" +
    "\074\102\075\uffba\076\uffba\077\uffba\100\uffba\001\002\000" +
    "\104\002\uffb5\016\uffb5\020\uffb5\023\uffb5\025\uffb5\027\uffb5" +
    "\031\uffb5\034\uffb5\040\uffb5\042\uffb5\046\uffb5\050\uffb5\051" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\070" +
    "\uffb5\071\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\001\002\000\064\002\uffa9\016\uffa9\020\uffa9\023" +
    "\uffa9\025\uffa9\027\uffa9\031\uffa9\034\uffa9\040\uffa9\042\uffa9" +
    "\046\uffa9\050\uffa9\051\uffa9\053\uffa9\054\uffa9\055\uffa9\062" +
    "\071\063\101\064\077\065\074\066\111\070\070\071\072" +
    "\073\076\074\102\001\002\000\064\002\uffbb\016\uffbb\020" +
    "\uffbb\023\uffbb\025\uffbb\027\uffbb\031\uffbb\034\uffbb\040\uffbb" +
    "\042\uffbb\046\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\062\071\063\101\064\077\065\074\066\111\070\070" +
    "\071\072\073\076\074\102\001\002\000\050\004\056\005" +
    "\031\006\057\013\055\014\054\015\052\017\033\026\063" +
    "\030\060\032\061\035\034\036\043\037\041\041\042\053" +
    "\064\063\053\072\036\101\040\102\062\001\002\000\052" +
    "\042\137\054\103\055\107\056\110\057\104\060\075\061" +
    "\066\062\071\063\101\064\077\065\074\066\111\070\070" +
    "\071\072\073\076\074\102\075\073\076\067\077\100\100" +
    "\105\001\002\000\104\002\uffaf\016\uffaf\020\uffaf\023\uffaf" +
    "\025\uffaf\027\uffaf\031\uffaf\034\uffaf\040\uffaf\042\uffaf\046" +
    "\uffaf\050\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\066\uffaf\070\uffaf\071\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\076\uffaf\077\uffaf\100\uffaf\001\002\000\050\004\056\005" +
    "\031\006\057\013\055\014\054\015\052\017\033\026\063" +
    "\030\060\032\061\035\034\036\043\037\041\041\042\053" +
    "\064\063\053\072\036\101\040\102\062\001\002\000\052" +
    "\051\142\054\103\055\107\056\110\057\104\060\075\061" +
    "\066\062\071\063\101\064\077\065\074\066\111\070\070" +
    "\071\072\073\076\074\102\075\073\076\067\077\100\100" +
    "\105\001\002\000\050\004\056\005\031\006\057\013\055" +
    "\014\054\015\052\017\033\026\063\030\060\032\061\035" +
    "\034\036\043\037\041\041\042\053\064\063\053\072\036" +
    "\101\040\102\062\001\002\000\052\051\144\054\103\055" +
    "\107\056\110\057\104\060\075\061\066\062\071\063\101" +
    "\064\077\065\074\066\111\070\070\071\072\073\076\074" +
    "\102\075\073\076\067\077\100\100\105\001\002\000\050" +
    "\004\056\005\031\006\057\013\055\014\054\015\052\017" +
    "\033\026\063\030\060\032\061\035\034\036\043\037\041" +
    "\041\042\053\064\063\053\072\036\101\040\102\062\001" +
    "\002\000\052\042\146\054\103\055\107\056\110\057\104" +
    "\060\075\061\066\062\071\063\101\064\077\065\074\066" +
    "\111\070\070\071\072\073\076\074\102\075\073\076\067" +
    "\077\100\100\105\001\002\000\104\002\uffac\016\uffac\020" +
    "\uffac\023\uffac\025\uffac\027\uffac\031\uffac\034\uffac\040\uffac" +
    "\042\uffac\046\uffac\050\uffac\051\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\065\uffac\066\uffac\070\uffac\071\uffac\073\uffac\074" +
    "\uffac\075\uffac\076\uffac\077\uffac\100\uffac\001\002\000\050" +
    "\004\056\005\031\006\057\013\055\014\054\015\052\017" +
    "\033\026\063\030\060\032\061\035\034\036\043\037\041" +
    "\041\042\053\064\063\053\072\036\101\040\102\062\001" +
    "\002\000\052\042\151\054\103\055\107\056\110\057\104" +
    "\060\075\061\066\062\071\063\101\064\077\065\074\066" +
    "\111\070\070\071\072\073\076\074\102\075\073\076\067" +
    "\077\100\100\105\001\002\000\104\002\uffb0\016\uffb0\020" +
    "\uffb0\023\uffb0\025\uffb0\027\uffb0\031\uffb0\034\uffb0\040\uffb0" +
    "\042\uffb0\046\uffb0\050\uffb0\051\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\070\uffb0\071\uffb0\073\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\001\002\000\050" +
    "\004\056\005\031\006\057\013\055\014\054\015\052\017" +
    "\033\026\063\030\060\032\061\035\034\036\043\037\041" +
    "\041\042\053\064\063\053\072\036\101\040\102\062\001" +
    "\002\000\052\051\154\054\103\055\107\056\110\057\104" +
    "\060\075\061\066\062\071\063\101\064\077\065\074\066" +
    "\111\070\070\071\072\073\076\074\102\075\073\076\067" +
    "\077\100\100\105\001\002\000\050\004\056\005\031\006" +
    "\057\013\055\014\054\015\052\017\033\026\063\030\060" +
    "\032\061\035\034\036\043\037\041\041\042\053\064\063" +
    "\053\072\036\101\040\102\062\001\002\000\052\051\156" +
    "\054\103\055\107\056\110\057\104\060\075\061\066\062" +
    "\071\063\101\064\077\065\074\066\111\070\070\071\072" +
    "\073\076\074\102\075\073\076\067\077\100\100\105\001" +
    "\002\000\050\004\056\005\031\006\057\013\055\014\054" +
    "\015\052\017\033\026\063\030\060\032\061\035\034\036" +
    "\043\037\041\041\042\053\064\063\053\072\036\101\040" +
    "\102\062\001\002\000\052\042\160\054\103\055\107\056" +
    "\110\057\104\060\075\061\066\062\071\063\101\064\077" +
    "\065\074\066\111\070\070\071\072\073\076\074\102\075" +
    "\073\076\067\077\100\100\105\001\002\000\104\002\uffad" +
    "\016\uffad\020\uffad\023\uffad\025\uffad\027\uffad\031\uffad\034" +
    "\uffad\040\uffad\042\uffad\046\uffad\050\uffad\051\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\070\uffad\071\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\001" +
    "\002\000\050\004\056\005\031\006\057\013\055\014\054" +
    "\015\052\017\033\026\063\030\060\032\061\035\034\036" +
    "\043\037\041\041\042\053\064\063\053\072\036\101\040" +
    "\102\062\001\002\000\052\042\163\054\103\055\107\056" +
    "\110\057\104\060\075\061\066\062\071\063\101\064\077" +
    "\065\074\066\111\070\070\071\072\073\076\074\102\075" +
    "\073\076\067\077\100\100\105\001\002\000\104\002\uffb1" +
    "\016\uffb1\020\uffb1\023\uffb1\025\uffb1\027\uffb1\031\uffb1\034" +
    "\uffb1\040\uffb1\042\uffb1\046\uffb1\050\uffb1\051\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\070\uffb1\071\uffb1" +
    "\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\001" +
    "\002\000\050\004\056\005\031\006\057\013\055\014\054" +
    "\015\052\017\033\026\063\030\060\032\061\035\034\036" +
    "\043\037\041\041\042\053\064\063\053\072\036\101\040" +
    "\102\062\001\002\000\052\051\166\054\103\055\107\056" +
    "\110\057\104\060\075\061\066\062\071\063\101\064\077" +
    "\065\074\066\111\070\070\071\072\073\076\074\102\075" +
    "\073\076\067\077\100\100\105\001\002\000\050\004\056" +
    "\005\031\006\057\013\055\014\054\015\052\017\033\026" +
    "\063\030\060\032\061\035\034\036\043\037\041\041\042" +
    "\053\064\063\053\072\036\101\040\102\062\001\002\000" +
    "\052\051\170\054\103\055\107\056\110\057\104\060\075" +
    "\061\066\062\071\063\101\064\077\065\074\066\111\070" +
    "\070\071\072\073\076\074\102\075\073\076\067\077\100" +
    "\100\105\001\002\000\050\004\056\005\031\006\057\013" +
    "\055\014\054\015\052\017\033\026\063\030\060\032\061" +
    "\035\034\036\043\037\041\041\042\053\064\063\053\072" +
    "\036\101\040\102\062\001\002\000\052\042\172\054\103" +
    "\055\107\056\110\057\104\060\075\061\066\062\071\063" +
    "\101\064\077\065\074\066\111\070\070\071\072\073\076" +
    "\074\102\075\073\076\067\077\100\100\105\001\002\000" +
    "\104\002\uffab\016\uffab\020\uffab\023\uffab\025\uffab\027\uffab" +
    "\031\uffab\034\uffab\040\uffab\042\uffab\046\uffab\050\uffab\051" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\070" +
    "\uffab\071\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab" +
    "\100\uffab\001\002\000\104\002\uffc3\016\uffc3\020\uffc3\023" +
    "\uffc3\025\uffc3\027\uffc3\031\uffc3\034\uffc3\040\uffc3\042\uffc3" +
    "\046\uffc3\050\uffc3\051\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\070\070\071\072\073\076\074\102\075" +
    "\uffc3\076\uffc3\077\uffc3\100\uffc3\001\002\000\004\047\232" +
    "\001\002\000\004\052\201\001\002\000\016\007\uffe9\010" +
    "\uffe9\011\uffe9\044\uffe9\051\177\052\uffe9\001\002\000\004" +
    "\101\176\001\002\000\014\007\uffe8\010\uffe8\011\uffe8\044" +
    "\uffe8\052\uffe8\001\002\000\012\022\206\024\202\041\205" +
    "\101\203\001\002\000\004\045\222\001\002\000\036\002" +
    "\uffe6\007\uffe6\016\uffe6\020\uffe6\023\uffe6\025\uffe6\027\uffe6" +
    "\031\uffe6\034\uffe6\040\uffe6\042\uffe6\046\uffe6\047\uffe6\051" +
    "\uffe6\001\002\000\004\047\uffa2\001\002\000\012\022\206" +
    "\024\202\041\205\101\203\001\002\000\004\041\207\001" +
    "\002\000\050\004\056\005\031\006\057\013\055\014\054" +
    "\015\052\017\033\026\063\030\060\032\061\035\034\036" +
    "\043\037\041\041\042\053\064\063\053\072\036\101\040" +
    "\102\062\001\002\000\006\042\uffe1\051\216\001\002\000" +
    "\056\042\uffdf\050\214\051\uffdf\054\103\055\107\056\110" +
    "\057\104\060\075\061\066\062\071\063\101\064\077\065" +
    "\074\066\111\070\070\071\072\073\076\074\102\075\073" +
    "\076\067\077\100\100\105\001\002\000\004\042\213\001" +
    "\002\000\036\002\uffe5\007\uffe5\016\uffe5\020\uffe5\023\uffe5" +
    "\025\uffe5\027\uffe5\031\uffe5\034\uffe5\040\uffe5\042\uffe5\046" +
    "\uffe5\047\uffe5\051\uffe5\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\054\015\052\017\033\026\063\030" +
    "\060\032\061\035\034\036\043\037\041\041\042\053\064" +
    "\063\053\072\036\101\040\102\062\001\002\000\054\042" +
    "\uffde\051\uffde\054\103\055\107\056\110\057\104\060\075" +
    "\061\066\062\071\063\101\064\077\065\074\066\111\070" +
    "\070\071\072\073\076\074\102\075\073\076\067\077\100" +
    "\100\105\001\002\000\050\004\056\005\031\006\057\013" +
    "\055\014\054\015\052\017\033\026\063\030\060\032\061" +
    "\035\034\036\043\037\041\041\042\053\064\063\053\072" +
    "\036\101\040\102\062\001\002\000\004\042\uffe0\001\002" +
    "\000\004\042\221\001\002\000\036\002\uffe7\007\uffe7\016" +
    "\uffe7\020\uffe7\023\uffe7\025\uffe7\027\uffe7\031\uffe7\034\uffe7" +
    "\040\uffe7\042\uffe7\046\uffe7\047\uffe7\051\uffe7\001\002\000" +
    "\012\022\206\024\202\041\205\101\203\001\002\000\006" +
    "\046\226\051\225\001\002\000\006\046\uffe3\051\uffe3\001" +
    "\002\000\012\022\206\024\202\041\205\101\203\001\002" +
    "\000\004\033\227\001\002\000\012\022\206\024\202\041" +
    "\205\101\203\001\002\000\036\002\uffe4\007\uffe4\016\uffe4" +
    "\020\uffe4\023\uffe4\025\uffe4\027\uffe4\031\uffe4\034\uffe4\040" +
    "\uffe4\042\uffe4\046\uffe4\047\uffe4\051\uffe4\001\002\000\006" +
    "\046\uffe2\051\uffe2\001\002\000\050\004\056\005\031\006" +
    "\057\013\055\014\054\015\052\017\033\026\063\030\060" +
    "\032\061\035\034\036\043\037\041\041\042\053\064\063" +
    "\053\072\036\101\040\102\062\001\002\000\104\002\uffa6" +
    "\016\uffa6\020\uffa6\023\uffa6\025\uffa6\027\uffa6\031\uffa6\034" +
    "\uffa6\040\uffa6\042\uffa6\046\uffa6\050\uffa6\051\uffa6\053\uffa6" +
    "\054\103\055\107\056\110\057\104\060\075\061\066\062" +
    "\071\063\101\064\077\065\074\066\111\070\070\071\072" +
    "\073\076\074\102\075\073\076\067\077\100\100\105\001" +
    "\002\000\004\045\235\001\002\000\004\101\241\001\002" +
    "\000\004\046\267\001\002\000\006\046\uffc5\051\uffc5\001" +
    "\002\000\006\046\uffa0\051\265\001\002\000\010\045\242" +
    "\046\uffc4\051\uffc4\001\002\000\052\004\056\005\031\006" +
    "\057\013\055\014\054\015\052\017\033\026\063\030\060" +
    "\032\061\035\034\036\043\037\041\041\244\050\246\053" +
    "\064\063\053\072\036\101\040\102\062\001\002\000\006" +
    "\046\uffc7\051\263\001\002\000\050\004\056\005\031\006" +
    "\057\013\055\014\054\015\052\017\033\026\063\030\060" +
    "\032\061\035\034\036\043\037\041\041\042\053\064\063" +
    "\053\072\036\101\040\102\062\001\002\000\056\046\uffc9" +
    "\050\252\051\uffc9\054\103\055\107\056\110\057\104\060" +
    "\075\061\066\062\071\063\101\064\077\065\074\066\111" +
    "\070\070\071\072\073\076\074\102\075\073\076\067\077" +
    "\100\100\105\001\002\000\054\004\056\005\031\006\057" +
    "\013\055\014\054\015\052\017\033\026\063\030\060\032" +
    "\061\035\034\036\043\037\041\041\042\046\uffcd\051\uffcd" +
    "\053\064\063\053\072\036\101\040\102\062\001\002\000" +
    "\004\046\250\001\002\000\104\002\uffce\016\uffce\020\uffce" +
    "\023\uffce\025\uffce\027\uffce\031\uffce\034\uffce\040\uffce\042" +
    "\uffce\046\uffce\050\uffce\051\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064" +
    "\uffce\065\uffce\066\uffce\070\uffce\071\uffce\073\uffce\074\uffce" +
    "\075\uffce\076\uffce\077\uffce\100\uffce\001\002\000\054\046" +
    "\uffcc\051\uffcc\054\103\055\107\056\110\057\104\060\075" +
    "\061\066\062\071\063\101\064\077\065\074\066\111\070" +
    "\070\071\072\073\076\074\102\075\073\076\067\077\100" +
    "\100\105\001\002\000\054\004\056\005\031\006\057\013" +
    "\055\014\054\015\052\017\033\026\063\030\060\032\061" +
    "\035\034\036\043\037\041\041\042\046\uffcb\051\uffcb\053" +
    "\064\063\053\072\036\101\040\102\062\001\002\000\054" +
    "\046\uffca\051\uffca\054\103\055\107\056\110\057\104\060" +
    "\075\061\066\062\071\063\101\064\077\065\074\066\111" +
    "\070\070\071\072\073\076\074\102\075\073\076\067\077" +
    "\100\100\105\001\002\000\054\042\257\051\260\054\103" +
    "\055\107\056\110\057\104\060\075\061\066\062\071\063" +
    "\101\064\077\065\074\066\111\070\070\071\072\073\076" +
    "\074\102\075\073\076\067\077\100\100\105\001\002\000" +
    "\004\042\256\001\002\000\006\046\uffc8\051\uffc8\001\002" +
    "\000\104\002\uffdb\016\uffdb\020\uffdb\023\uffdb\025\uffdb\027" +
    "\uffdb\031\uffdb\034\uffdb\040\uffdb\042\uffdb\046\uffdb\050\uffdb" +
    "\051\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\070\uffdb\071\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077" +
    "\uffdb\100\uffdb\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\054\015\052\017\033\026\063\030\060\032" +
    "\061\035\034\036\043\037\041\041\042\053\064\063\053" +
    "\072\036\101\040\102\062\001\002\000\076\002\uffdd\016" +
    "\uffdd\020\uffdd\023\uffdd\025\uffdd\027\uffdd\031\uffdd\034\uffdd" +
    "\040\uffdd\042\uffdd\051\260\054\103\055\107\056\110\057" +
    "\104\060\075\061\066\062\071\063\101\064\077\065\074" +
    "\066\111\070\070\071\072\073\076\074\102\075\073\076" +
    "\067\077\100\100\105\001\002\000\026\002\uffdc\016\uffdc" +
    "\020\uffdc\023\uffdc\025\uffdc\027\uffdc\031\uffdc\034\uffdc\040" +
    "\uffdc\042\uffdc\001\002\000\052\004\056\005\031\006\057" +
    "\013\055\014\054\015\052\017\033\026\063\030\060\032" +
    "\061\035\034\036\043\037\041\041\244\050\246\053\064" +
    "\063\053\072\036\101\040\102\062\001\002\000\004\046" +
    "\uffc6\001\002\000\004\101\241\001\002\000\004\046\uff9f" +
    "\001\002\000\004\051\270\001\002\000\004\045\271\001" +
    "\002\000\004\056\273\001\002\000\004\046\304\001\002" +
    "\000\004\102\277\001\002\000\006\046\uff9e\051\275\001" +
    "\002\000\004\056\273\001\002\000\004\046\uff9d\001\002" +
    "\000\010\046\uff9b\051\302\060\uff9b\001\002\000\004\060" +
    "\301\001\002\000\006\046\uff9c\051\uff9c\001\002\000\004" +
    "\102\277\001\002\000\006\046\uff9a\060\uff9a\001\002\000" +
    "\004\042\305\001\002\000\104\002\uffa1\016\uffa1\020\uffa1" +
    "\023\uffa1\025\uffa1\027\uffa1\031\uffa1\034\uffa1\040\uffa1\042" +
    "\uffa1\046\uffa1\050\uffa1\051\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\070\uffa1\071\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\076\uffa1\077\uffa1\100\uffa1\001\002\000\052\042" +
    "\257\054\103\055\107\056\110\057\104\060\075\061\066" +
    "\062\071\063\101\064\077\065\074\066\111\070\070\071" +
    "\072\073\076\074\102\075\073\076\067\077\100\100\105" +
    "\001\002\000\104\002\uffc1\016\uffc1\020\uffc1\023\uffc1\025" +
    "\uffc1\027\uffc1\031\uffc1\034\uffc1\040\uffc1\042\uffc1\046\uffc1" +
    "\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\070\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\100\uffc1\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\054\015\052\017\033\026\063\030" +
    "\060\032\061\035\034\036\043\037\041\041\042\053\064" +
    "\063\053\072\036\101\040\102\062\001\002\000\052\051" +
    "\312\054\103\055\107\056\110\057\104\060\075\061\066" +
    "\062\071\063\101\064\077\065\074\066\111\070\070\071" +
    "\072\073\076\074\102\075\073\076\067\077\100\100\105" +
    "\001\002\000\050\004\056\005\031\006\057\013\055\014" +
    "\054\015\052\017\033\026\063\030\060\032\061\035\034" +
    "\036\043\037\041\041\042\053\064\063\053\072\036\101" +
    "\040\102\062\001\002\000\052\051\314\054\103\055\107" +
    "\056\110\057\104\060\075\061\066\062\071\063\101\064" +
    "\077\065\074\066\111\070\070\071\072\073\076\074\102" +
    "\075\073\076\067\077\100\100\105\001\002\000\050\004" +
    "\056\005\031\006\057\013\055\014\054\015\052\017\033" +
    "\026\063\030\060\032\061\035\034\036\043\037\041\041" +
    "\042\053\064\063\053\072\036\101\040\102\062\001\002" +
    "\000\052\042\316\054\103\055\107\056\110\057\104\060" +
    "\075\061\066\062\071\063\101\064\077\065\074\066\111" +
    "\070\070\071\072\073\076\074\102\075\073\076\067\077" +
    "\100\100\105\001\002\000\104\002\uffae\016\uffae\020\uffae" +
    "\023\uffae\025\uffae\027\uffae\031\uffae\034\uffae\040\uffae\042" +
    "\uffae\046\uffae\050\uffae\051\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064" +
    "\uffae\065\uffae\066\uffae\070\uffae\071\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\100\uffae\001\002\000\054\002" +
    "\uff85\034\uff85\054\103\055\107\056\110\057\104\060\075" +
    "\061\066\062\071\063\101\064\077\065\074\066\111\070" +
    "\070\071\072\073\076\074\102\075\073\076\067\077\100" +
    "\100\105\001\002\000\004\002\uffff\001\002\000\050\004" +
    "\056\005\031\006\057\013\055\014\054\015\052\017\033" +
    "\026\063\030\060\032\061\035\034\036\043\037\041\041" +
    "\042\053\064\063\053\072\036\101\040\102\062\001\002" +
    "\000\004\002\uff83\001\002\000\026\002\uff96\016\uff96\020" +
    "\uff96\023\uff96\025\uff96\027\uff96\031\uff96\034\uff96\040\uff96" +
    "\051\357\001\002\000\012\007\331\010\327\011\326\052" +
    "\330\001\002\000\024\002\uff98\016\uff98\020\uff98\023\uff98" +
    "\025\uff98\027\uff98\031\uff98\034\uff98\040\uff98\001\002\000" +
    "\004\012\352\001\002\000\012\022\206\024\202\041\205" +
    "\101\203\001\002\000\012\022\206\024\202\041\205\101" +
    "\203\001\002\000\052\004\056\005\031\006\057\013\055" +
    "\014\054\015\052\017\033\026\063\030\060\032\061\035" +
    "\034\036\043\037\041\041\042\045\333\053\064\063\053" +
    "\072\036\101\040\102\062\001\002\000\026\002\uff8f\016" +
    "\uff8f\020\uff8f\023\uff8f\025\uff8f\027\uff8f\031\uff8f\034\uff8f" +
    "\040\uff8f\051\uff8f\001\002\000\006\045\337\102\277\001" +
    "\002\000\026\002\uff90\016\uff90\020\uff90\023\uff90\025\uff90" +
    "\027\uff90\031\uff90\034\uff90\040\uff90\051\uff90\001\002\000" +
    "\074\002\uff92\016\uff92\020\uff92\023\uff92\025\uff92\027\uff92" +
    "\031\uff92\034\uff92\040\uff92\051\uff92\054\103\055\107\056" +
    "\110\057\104\060\075\061\066\062\071\063\101\064\077" +
    "\065\074\066\111\070\070\071\072\073\076\074\102\075" +
    "\073\076\067\077\100\100\105\001\002\000\006\046\uff8d" +
    "\051\344\001\002\000\004\102\277\001\002\000\004\046" +
    "\343\001\002\000\004\046\342\001\002\000\030\002\uff8e" +
    "\016\uff8e\020\uff8e\023\uff8e\025\uff8e\027\uff8e\031\uff8e\034" +
    "\uff8e\040\uff8e\046\uff8e\051\uff8e\001\002\000\026\002\uff8b" +
    "\016\uff8b\020\uff8b\023\uff8b\025\uff8b\027\uff8b\031\uff8b\034" +
    "\uff8b\040\uff8b\051\uff8b\001\002\000\004\045\337\001\002" +
    "\000\004\046\uff8c\001\002\000\004\007\347\001\002\000" +
    "\050\004\056\005\031\006\057\013\055\014\054\015\052" +
    "\017\033\026\063\030\060\032\061\035\034\036\043\037" +
    "\041\041\042\053\064\063\053\072\036\101\040\102\062" +
    "\001\002\000\074\002\uff93\016\uff93\020\uff93\023\uff93\025" +
    "\uff93\027\uff93\031\uff93\034\uff93\040\uff93\051\uff93\054\103" +
    "\055\107\056\110\057\104\060\075\061\066\062\071\063" +
    "\101\064\077\065\074\066\111\070\070\071\072\073\076" +
    "\074\102\075\073\076\067\077\100\100\105\001\002\000" +
    "\026\002\uff94\016\uff94\020\uff94\023\uff94\025\uff94\027\uff94" +
    "\031\uff94\034\uff94\040\uff94\051\uff94\001\002\000\004\043" +
    "\354\001\002\000\026\002\uff91\016\uff91\020\uff91\023\uff91" +
    "\025\uff91\027\uff91\031\uff91\034\uff91\040\uff91\051\uff91\001" +
    "\002\000\004\101\176\001\002\000\004\044\356\001\002" +
    "\000\026\002\uff8a\016\uff8a\020\uff8a\023\uff8a\025\uff8a\027" +
    "\uff8a\031\uff8a\034\uff8a\040\uff8a\051\uff8a\001\002\000\004" +
    "\101\176\001\002\000\024\002\uff95\016\uff95\020\uff95\023" +
    "\uff95\025\uff95\027\uff95\031\uff95\034\uff95\040\uff95\001\002" +
    "\000\024\002\uff97\016\uff97\020\uff97\023\uff97\025\uff97\027" +
    "\uff97\031\uff97\034\uff97\040\uff97\001\002\000\026\002\uff88" +
    "\016\uff88\020\uff88\023\uff88\025\uff88\027\uff88\031\uff88\034" +
    "\uff88\040\uff88\051\367\001\002\000\004\052\365\001\002" +
    "\000\024\002\uff89\016\uff89\020\uff89\023\uff89\025\uff89\027" +
    "\uff89\031\uff89\034\uff89\040\uff89\001\002\000\012\022\206" +
    "\024\202\041\205\101\203\001\002\000\026\002\uffea\016" +
    "\uffea\020\uffea\023\uffea\025\uffea\027\uffea\031\uffea\034\uffea" +
    "\040\uffea\051\uffea\001\002\000\004\101\176\001\002\000" +
    "\024\002\uff87\016\uff87\020\uff87\023\uff87\025\uff87\027\uff87" +
    "\031\uff87\034\uff87\040\uff87\001\002\000\012\002\ufffb\025" +
    "\ufffb\027\ufffb\034\ufffb\001\002\000\024\002\uff99\016\uff99" +
    "\020\uff99\023\uff99\025\uff99\027\uff99\031\uff99\034\uff99\040" +
    "\uff99\001\002\000\026\002\ufff2\016\ufff2\020\ufff2\023\ufff2" +
    "\025\ufff2\027\ufff2\031\ufff2\034\ufff2\040\ufff2\051\ufff2\001" +
    "\002\000\004\052\u0108\001\002\000\010\012\u0102\051\177" +
    "\052\uffe9\001\002\000\026\002\ufff5\016\ufff5\020\ufff5\023" +
    "\ufff5\025\ufff5\027\ufff5\031\ufff5\034\ufff5\040\ufff5\051\u0100" +
    "\001\002\000\026\002\ufff4\016\ufff4\020\ufff4\023\ufff4\025" +
    "\ufff4\027\ufff4\031\ufff4\034\ufff4\040\ufff4\051\ufff4\001\002" +
    "\000\004\101\375\001\002\000\026\002\ufff3\016\ufff3\020" +
    "\ufff3\023\ufff3\025\ufff3\027\ufff3\031\ufff3\034\ufff3\040\ufff3" +
    "\051\ufff3\001\002\000\004\041\u0103\001\002\000\004\047" +
    "\u0104\001\002\000\004\047\u0105\001\002\000\004\047\u0106" +
    "\001\002\000\004\042\u0107\001\002\000\026\002\ufff1\016" +
    "\ufff1\020\ufff1\023\ufff1\025\ufff1\027\ufff1\031\ufff1\034\ufff1" +
    "\040\ufff1\051\ufff1\001\002\000\012\022\u010a\024\202\041" +
    "\205\101\203\001\002\000\026\002\ufff0\016\ufff0\020\ufff0" +
    "\023\ufff0\025\ufff0\027\ufff0\031\ufff0\034\ufff0\040\ufff0\051" +
    "\ufff0\001\002\000\030\002\uffeb\016\uffeb\020\uffeb\023\uffeb" +
    "\025\uffeb\027\uffeb\031\uffeb\034\uffeb\040\uffeb\041\u010b\051" +
    "\uffeb\001\002\000\054\004\056\005\031\006\057\013\055" +
    "\014\054\015\052\017\033\026\063\030\060\032\061\035" +
    "\034\036\043\037\041\041\042\042\u010c\050\u010e\053\064" +
    "\063\053\072\036\101\040\102\062\001\002\000\026\002" +
    "\uffed\016\uffed\020\uffed\023\uffed\025\uffed\027\uffed\031\uffed" +
    "\034\uffed\040\uffed\051\uffed\001\002\000\056\042\uffdf\050" +
    "\u0112\051\uffdf\054\103\055\107\056\110\057\104\060\075" +
    "\061\066\062\071\063\101\064\077\065\074\066\111\070" +
    "\070\071\072\073\076\074\102\075\073\076\067\077\100" +
    "\100\105\001\002\000\052\004\056\005\031\006\057\013" +
    "\055\014\054\015\052\017\033\026\063\030\060\032\061" +
    "\035\034\036\043\037\041\041\042\042\u010f\053\064\063" +
    "\053\072\036\101\040\102\062\001\002\000\026\002\uffec" +
    "\016\uffec\020\uffec\023\uffec\025\uffec\027\uffec\031\uffec\034" +
    "\uffec\040\uffec\051\uffec\001\002\000\052\042\u0111\054\103" +
    "\055\107\056\110\057\104\060\075\061\066\062\071\063" +
    "\101\064\077\065\074\066\111\070\070\071\072\073\076" +
    "\074\102\075\073\076\067\077\100\100\105\001\002\000" +
    "\026\002\uffee\016\uffee\020\uffee\023\uffee\025\uffee\027\uffee" +
    "\031\uffee\034\uffee\040\uffee\051\uffee\001\002\000\052\004" +
    "\056\005\031\006\057\013\055\014\054\015\052\017\033" +
    "\026\063\030\060\032\061\035\034\036\043\037\041\041" +
    "\042\042\u0113\053\064\063\053\072\036\101\040\102\062" +
    "\001\002\000\026\002\uffef\016\uffef\020\uffef\023\uffef\025" +
    "\uffef\027\uffef\031\uffef\034\uffef\040\uffef\051\uffef\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\004\002\004\001\001\000\024\003\014\004" +
    "\023\005\017\006\012\011\011\012\007\013\020\014\016" +
    "\015\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\375\017\376\021\372\022\373\001\001\000\002" +
    "\001\001\000\030\027\260\030\371\031\027\032\043\036" +
    "\031\037\045\040\047\041\046\042\036\043\050\045\034" +
    "\001\001\000\002\001\001\000\020\005\370\006\012\011" +
    "\011\012\007\013\020\014\016\015\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\361\022\362\060" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\323\052\360\054\322\001\001\000" +
    "\010\022\323\052\324\054\322\001\001\000\004\007\024" +
    "\001\001\000\004\010\317\001\001\000\026\027\316\031" +
    "\027\032\043\036\031\037\045\040\047\041\046\042\036" +
    "\043\050\045\034\001\001\000\026\027\044\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\027\306\031\027\032\043\036\031\037" +
    "\045\040\047\041\046\042\036\043\050\045\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\305\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\174\044" +
    "\173\001\001\000\002\001\001\000\026\027\172\031\027" +
    "\032\043\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\027\064\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\034\001\001\000\002\001\001" +
    "\000\026\027\133\031\027\032\043\036\031\037\045\040" +
    "\047\041\046\042\036\043\050\045\034\001\001\000\026" +
    "\027\132\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\034\001\001\000\026\027\131" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\034\001\001\000\026\027\130\031\027" +
    "\032\043\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\034\001\001\000\026\027\127\031\027\032\043" +
    "\036\031\037\045\040\047\041\046\042\036\043\050\045" +
    "\034\001\001\000\026\027\126\031\027\032\043\036\031" +
    "\037\045\040\047\041\046\042\036\043\050\045\034\001" +
    "\001\000\026\027\125\031\027\032\043\036\031\037\045" +
    "\040\047\041\046\042\036\043\050\045\034\001\001\000" +
    "\026\027\124\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\034\001\001\000\026\027" +
    "\123\031\027\032\043\036\031\037\045\040\047\041\046" +
    "\042\036\043\050\045\034\001\001\000\026\027\122\031" +
    "\027\032\043\036\031\037\045\040\047\041\046\042\036" +
    "\043\050\045\034\001\001\000\026\027\121\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\034\001\001\000\026\027\120\031\027\032\043\036" +
    "\031\037\045\040\047\041\046\042\036\043\050\045\034" +
    "\001\001\000\026\027\117\031\027\032\043\036\031\037" +
    "\045\040\047\041\046\042\036\043\050\045\034\001\001" +
    "\000\026\027\116\031\027\032\043\036\031\037\045\040" +
    "\047\041\046\042\036\043\050\045\034\001\001\000\026" +
    "\027\115\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\034\001\001\000\026\027\114" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\034\001\001\000\002\001\001\000\026" +
    "\027\113\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\034\001\001\000\026\027\112" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\034\001\001\000\026\027\111\031\027" +
    "\032\043\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\027\135\031\027\032\043\036\031" +
    "\037\045\040\047\041\046\042\036\043\050\045\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\027\140" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\034\001\001\000\002\001\001\000\026" +
    "\027\142\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\034\001\001\000\002\001\001" +
    "\000\026\027\144\031\027\032\043\036\031\037\045\040" +
    "\047\041\046\042\036\043\050\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\027\147\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\152\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\034\001\001\000\002\001" +
    "\001\000\026\027\154\031\027\032\043\036\031\037\045" +
    "\040\047\041\046\042\036\043\050\045\034\001\001\000" +
    "\002\001\001\000\026\027\156\031\027\032\043\036\031" +
    "\037\045\040\047\041\046\042\036\043\050\045\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\027\161" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\027\164\031\027\032\043\036\031\037" +
    "\045\040\047\041\046\042\036\043\050\045\034\001\001" +
    "\000\002\001\001\000\026\027\166\031\027\032\043\036" +
    "\031\037\045\040\047\041\046\042\036\043\050\045\034" +
    "\001\001\000\002\001\001\000\026\027\170\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\177\001\001\000\002\001\001\000" +
    "\004\023\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\217\001\001\000\002\001" +
    "\001\000\032\025\211\026\207\027\210\031\027\032\043" +
    "\036\031\037\045\040\047\041\046\042\036\043\050\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\027\214\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\034\001\001\000\002\001\001\000\032\025\216\026" +
    "\207\027\210\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\223" +
    "\024\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\230\001\001\000\002\001\001\000\004\023\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\232\031\027\032\043\036\031\037\045\040\047\041\046" +
    "\042\036\043\050\045\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\236\033\237\046\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\027\244\031\027\032\043\034\242" +
    "\035\246\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\034\001\001\000\002\001\001\000\030\027\253" +
    "\030\254\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\034\001\001\000\002\001\001" +
    "\000\026\027\250\031\027\032\043\036\031\037\045\040" +
    "\047\041\046\042\036\043\050\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\252\031\027\032\043\036\031\037\045\040\047\041\046" +
    "\042\036\043\050\045\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\027\260\030\261\031\027\032\043\036" +
    "\031\037\045\040\047\041\046\042\036\043\050\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\027" +
    "\244\031\027\032\043\034\242\035\263\036\031\037\045" +
    "\040\047\041\046\042\036\043\050\045\034\001\001\000" +
    "\002\001\001\000\010\032\236\033\237\046\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\047\271\050\273\001\001\000\002\001\001\000\004" +
    "\051\277\001\001\000\002\001\001\000\006\047\275\050" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\027\310\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\034\001\001\000\002\001\001\000\026\027\312\031" +
    "\027\032\043\036\031\037\045\040\047\041\046\042\036" +
    "\043\050\045\034\001\001\000\002\001\001\000\026\027" +
    "\314\031\027\032\043\036\031\037\045\040\047\041\046" +
    "\042\036\043\050\045\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\027\260\030\321\031\027\032\043\036\031\037\045\040" +
    "\047\041\046\042\036\043\050\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\352\001\001\000\004\023\350\001\001" +
    "\000\004\023\345\001\001\000\032\027\334\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\034\055\333\056\331\001\001\000\002\001\001\000" +
    "\010\051\340\053\337\055\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\053\344\055\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\027\347\031\027" +
    "\032\043\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\323" +
    "\052\357\054\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\365\001\001\000\002\001\001\000\010\021" +
    "\361\022\362\060\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\u0100\021\372\022\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\u0108\023\365\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\025\211\026\207\027\u010c\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\u010f\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\027\214" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\034\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EssencePrimeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EssencePrimeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EssencePrimeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




     public StringBuffer errorMessage = new StringBuffer("");

    /* The reason for the error is passed into the method in the
       String 'message'. */

    public void report_error(String message, Object info)  {

        StringBuffer m = new StringBuffer("Parse error:");


        if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                                m.append(" in line "+(s.left));
                if (s.right >= 0)
                        m.append(", column "+(s.right));
            }
        }
        m.append(" : "+message);
        //throw new Exception(m);
        errorMessage = m;
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)  {
        report_error(message, info);
        //System.exit(1);
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EssencePrimeParser$actions {



        public int errors_found = 0;
       


  private final EssencePrimeParser parser;

  /** Constructor */
  CUP$EssencePrimeParser$actions(EssencePrimeParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EssencePrimeParser$do_action(
    int                        CUP$EssencePrimeParser$act_num,
    java_cup.runtime.lr_parser CUP$EssencePrimeParser$parser,
    java.util.Stack            CUP$EssencePrimeParser$stack,
    int                        CUP$EssencePrimeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EssencePrimeParser$result;

      /* select the action based on the action number */
      switch (CUP$EssencePrimeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // constraint_block ::= 
            {
              Object RESULT =null;
		
		            RESULT = new LinkedList(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // constraint_block ::= SUCH_THAT expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (LinkedList) e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // objective ::= 
            {
              Object RESULT =null;
		    
			  RESULT = new Objective(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // objective ::= MINIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Objective(true, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // objective ::= MAXIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Objective(false, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // variable_list ::= domain_identifiers COMMA variable_list 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int di_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int di_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) di_list).addFirst((DomainIdentifiers) di);  
			 RESULT = di_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_list",46, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // variable_list ::= domain_identifiers 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
			list.addFirst((DomainIdentifiers) di); 
			RESULT = list;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_list",46, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // find_block ::= FIND variable_list 
            {
              Object RESULT =null;
		int v_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int v_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object v_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) v_list).toArray();	
	        	    DomainIdentifiers[] v_array = new DomainIdentifiers[tmp.length];
			    for(int i=v_array.length; i>0; i--) {
 			   	          v_array[i-1] = (DomainIdentifiers) tmp[v_array.length-i];
	            }
			    RESULT = new Declaration(v_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("find_block",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // user_def_type ::= ENUM LBRACE identifier_list RBRACE 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) id_list).toArray();	
	        	    Identifier[] id_array = new Identifier[tmp.length];
			    for(int i=0;i<id_array.length;i++)
 			   	 id_array[i] = (Identifier) tmp[i];

			    RESULT = new Type(new Enumeration(id_array)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("user_def_type",45, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // constant_matrix ::= LBRACK constant_vector_list RBRACK 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 Object[] tmp = ((LinkedList) list  ).toArray();	
               
                                       
                     LinkedList vector0 = (LinkedList) tmp[0];
                     //System.out.println("first part hinter mir");
                     int[][] matrix = new int[tmp.length][vector0.size()];
                   
                     for(int i=0; i<tmp.length; i++) {
                     
                        LinkedList vector = (LinkedList) tmp[i];
                        
                        if(vector.size() != vector0.size()) 
                           throw new Exception("Illegal constant array: every vector/row has to have the same amount of elements!");
                        
                        for(int j=0; j<vector.size(); j++)
                           matrix[i][j] = (Integer) vector.get(j);
                     
                     }
                     
                      RESULT = matrix;
                    
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_matrix",44, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // constant_vector_list ::= constant_vector COMMA constant_vector_list 
            {
              Object RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object vector = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
                             LinkedList vectorList = (LinkedList) list;
                             vectorList.addFirst(vector);
                             RESULT = vectorList;
                          
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector_list",41, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // constant_vector_list ::= constant_vector 
            {
              Object RESULT =null;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                             LinkedList vectorList = new LinkedList();
                             vectorList.addFirst(int_list);
                             RESULT = vectorList; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector_list",41, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // constant_vector ::= LBRACK integer_list RBRACK 
            {
              Object RESULT =null;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object i_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		   
					   RESULT = i_list;
					
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector",43, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // constant ::= identifier_list BE constant_matrix 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int matrixEleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int matrixEright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object matrixE = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
  
                       Object[] tmp = (Object[]) matrixE;
                      //System.out.println("Object[] erstellt aus da linked list...");
                                       
                     int[] vector0 = (int[]) tmp[0];
                     //System.out.println("first part hinter mir");
                     int[][] matrix = new int[tmp.length][vector0.length];
                   
                     for(int i=0; i<tmp.length; i++) {
                     
                        int[] vector = (int[]) tmp[i];
                        
                        if(vector.length != vector0.length) 
                           throw new Exception("Illegal constant array: every vector/row has to have the same amount of elements!");
                        
                        for(int j=0; j<vector.length; j++)
                           matrix[i][j] = (Integer) vector[j];
                     
                     }
                     
                     
		   
    		   Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];    
                  constantList.add(new Constant(new ConstantMatrix(new String(id), matrix))); 
			   }   
			   
			   RESULT = constantList;
		   
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // constant ::= identifier_list BE constant_vector 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object vector = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
		        Object[] tmp = ((LinkedList) vector).toArray();
			    int[] intVector = new int[tmp.length];
			    for(int j=0; j<intVector.length; j++) {
			           intVector[j] = (Integer) tmp[j];
			    }      
		    //System.out.println("starting to generate eh constant objects");
    		   Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];    
                  constantList.add(new Constant(new ConstantVector(new String(id), intVector))); 
			   }   
			   
			   RESULT = constantList;
		   
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // constant ::= identifier_list BE_NEW_TYPE user_def_type 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];
                              constantList.add(new Constant(new NewTypeConstant(id, (Type) t))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // constant ::= identifier_list BE expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // constant ::= identifier_list COLON domain BE expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Domain) d,(Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // constant ::= identifier_list BE_DOMAIN domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident = (String) identifier_list[i];
                              constantList.add(new Constant(new DomainConstant(ident, (Domain) d))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // constant_list ::= constant COMMA constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int constant_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int constant_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object constant_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 for(int i=0; i<((LinkedList) c_list).size(); i++) {
		            ((LinkedList) constant_list).add( ((LinkedList) c_list).get(i)) ; 
                           }
			    RESULT = c_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_list",40, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // constant_list ::= constant 
            {
              Object RESULT =null;
		int clistleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object clist = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		   
			   RESULT = clist; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_list",40, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // letting_block ::= LETTING constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) c_list).toArray();	
	        	    Constant[] c_array = new Constant[tmp.length];
			    for(int i=0;i<c_array.length;i++)
 			   	 c_array[i] = (Constant) tmp[i];

			    RESULT = new Declaration(c_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",10, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameter_block ::= PARAM constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) c_list).toArray();	
	        	    Constant[] c_array = new Constant[tmp.length];
			    for(int i=0;i<c_array.length;i++)
 			   	 c_array[i] = (Constant) tmp[i];

			    RESULT = new Declaration(c_array, true);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // where_block ::= WHERE expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) e_list).toArray();	
	        	    Expression[] e_array = new Expression[tmp.length];
			    for(int i=0;i<e_array.length;i++)
 			   	 e_array[i] = (Expression) tmp[i];

			    RESULT = new Declaration (e_array);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("where_block",8, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // integer_list ::= INTEGER COMMA integer_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) int_list).addFirst((Integer) i); 
				    RESULT = int_list; 
				 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",39, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // integer_list ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				    list.addFirst((Integer) i);
				    RESULT = list;
                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",39, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // constant_tuple ::= LESS integer_list GREATER 
            {
              Object RESULT =null;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		
                   	Object[] tmp = ((LinkedList) int_list).toArray();
			        int[] int_array = new int[tmp.length];
			        for(int i=0;i<int_array.length;i++)
 				          int_array[i] = (Integer) tmp[i];
 				          
 				    RESULT = new ConstantTuple(int_array);     
                   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_tuple",38, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // constant_tuple_list ::= constant_tuple COMMA constant_tuple_list 
            {
              Object RESULT =null;
		int c_tupleleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int c_tupleright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object c_tuple = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object t_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) t_list).addFirst((ConstantTuple) c_tuple); 
				            RESULT = t_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_tuple_list",37, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // constant_tuple_list ::= constant_tuple 
            {
              Object RESULT =null;
		int c_tupleleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int c_tupleright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object c_tuple = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				            list.addFirst((ConstantTuple) c_tuple);
				            RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_tuple_list",37, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // atom_list ::= atom_expression COMMA atom_list 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int a_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int a_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object a_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) a_list).addFirst((AtomExpression) atom); 
				  RESULT = a_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",36, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // atom_list ::= atom_expression 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				  list.addFirst((AtomExpression) atom);
				  RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",36, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // table_constraint ::= TABLE LPAREN LBRACK atom_list RBRACK COMMA LBRACK constant_tuple_list RBRACK RPAREN 
            {
              Object RESULT =null;
		int a_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int a_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		Object a_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object t_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		  
                  	Object[] tmp = ((LinkedList) a_list).toArray();
			        AtomExpression[] id_array = new AtomExpression[tmp.length];
			        for(int i=0;i<id_array.length;i++)
 				          id_array[i] =  (AtomExpression) tmp[i];                   
                   
                    Object[] tmp2 = ((LinkedList) t_list).toArray();
			        ConstantTuple[] t_array = new ConstantTuple[tmp2.length];
			        for(int i=0;i<t_array.length;i++)
 				          t_array[i] =  (ConstantTuple) tmp2[i];        
                   
                   RESULT = new TableConstraint(id_array,
                                                t_array);
                   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("table_constraint",35, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binding_expression ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) id_list).toArray();	
	        	    String[] id_array = new String[tmp.length];
			    for(int i=0;i<id_array.length;i++)
 			   	 id_array[i] = (String) tmp[i];
				 
			    RESULT = new BindingExpression(new DomainIdentifiers(id_array,(Domain) d )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binding_expression",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // quantifier ::= SUM 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.SUM); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // quantifier ::= FORALL 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.FORALL); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // quantifier ::= EXISTS 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.EXISTS); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // quantifierop_expression ::= quantifier binding_expression DOT expression 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int bind_eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int bind_eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object bind_e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new QuantificationExpression((Quantifier) q, 
								       (BindingExpression) bind_e, 
								        (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifierop_expression",32, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lex_expression ::= expression LEXGEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_GEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lex_expression ::= expression LEXLEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_LEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lex_expression ::= expression LEXGREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_GREATER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lex_expression ::= expression LEXLESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_LESS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // functionop_expression ::= ELEMENT LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ELEMENT,
	                									(Expression) e1,
	                									(Expression) e2,
	                									(Expression) e3);   
	              
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // functionop_expression ::= OCCURRENCE LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.OCCURRENCE,
	                                                   (Expression) e1,
	                                                   (Expression) e2,
	                                                   (Expression) e3);   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // functionop_expression ::= ATMOST LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ATMOST,
									(Expression) e1,
									(Expression) e2,
									(Expression) e3); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // functionop_expression ::= ATLEAST LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ATLEAST,
									(Expression) e1,
									(Expression) e2,
									(Expression) e3); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // functionop_expression ::= MAX LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.MAX, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // functionop_expression ::= MIN LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.MIN, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // functionop_expression ::= ALLDIFF LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ALLDIFF, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binaryop_expression ::= expression IFF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.IFF), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binaryop_expression ::= expression IF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.IF), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binaryop_expression ::= expression OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.OR), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binaryop_expression ::= expression AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.AND), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binaryop_expression ::= expression POWER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.POWER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binaryop_expression ::= expression DIVISION expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.DIVIDE), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binaryop_expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.MULT), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binaryop_expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.MINUS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binaryop_expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(	
			(Expression) e1, new BinaryOperator (EssenceGlobals.PLUS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binaryop_expression ::= expression GEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.GEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binaryop_expression ::= expression GREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.GREATER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binaryop_expression ::= expression LEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.LEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binaryop_expression ::= expression LESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.LESS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binaryop_expression ::= expression NEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.NEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binaryop_expression ::= expression EQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.EQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unitop_expression ::= NOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryExpression(EssenceGlobals.NOT, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unitop_expression ::= BAR expression BAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new UnaryExpression(EssenceGlobals.ABS, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unitop_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryExpression(EssenceGlobals.NEGATION, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atom_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomExpression(new AtomicExpression(new String(id))); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atom_expression ::= deref_expression 
            {
              Object RESULT =null;
		int derefleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int derefright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object deref = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomExpression((NonAtomicExpression) deref); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // index_list ::= index COMMA index_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object i_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) i_list).addFirst(i); 
				   RESULT = i_list;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index_list",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // index_list ::= index 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList e_list = new LinkedList();	
				   e_list.addFirst(i); 
				   RESULT = e_list;   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index_list",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // index ::= LPAREN expression_list RPAREN 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 Object[] tmp = ((LinkedList) e_list).toArray();
			      Expression[] e_array = new Expression[tmp.length];
			      for(int i=0;i<e_array.length;i++)
 				      e_array[i] = (Expression) tmp[i];
                  RESULT = new SparseIndex(e_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // index ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new ExpressionIndex( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // index ::= expression DOTDOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BoundedIndex( (Expression) e1, (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // index ::= expression DOTDOT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new BoundedIndex( (Expression) e, true); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // index ::= DOTDOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BoundedIndex( (Expression) e, false); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // index ::= DOTDOT 
            {
              Object RESULT =null;
		 RESULT = new BoundedIndex(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // deref_expression ::= IDENTIFIER LBRACK index_list RBRACK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) e_list).toArray();	
	        	            Index[] e_array = new Index[tmp.length];
			                for(int i=0;i<e_array.length;i++)
 			   	               e_array[i] = (Index) tmp[i];
	
			              RESULT = new NonAtomicExpression(new String(id),
								                           e_array ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("deref_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atomic_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomicExpression(new String(id)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atomic_expression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new AtomicExpression(false); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atomic_expression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new AtomicExpression(true); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atomic_expression ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				  RESULT = new AtomicExpression(i); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= table_constraint 
            {
              Object RESULT =null;
		int tab_constraintleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int tab_constraintright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object tab_constraint = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression((TableConstraint) tab_constraint);
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= lex_expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression((LexExpression) le);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= quantifierop_expression 
            {
              Object RESULT =null;
		int qeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int qeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object qe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (QuantificationExpression) qe); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= functionop_expression 
            {
              Object RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object fe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (FunctionExpression) fe); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= binaryop_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (BinaryExpression) be); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= unitop_expression 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (UnaryExpression) ue); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= deref_expression 
            {
              Object RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (NonAtomicExpression) de); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= atomic_expression 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (AtomicExpression) ae); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new Expression((Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression_list ::= expression COMMA expression_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) e_list).addFirst(e); 
				   RESULT = e_list;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList e_list = new LinkedList();	
				   e_list.addFirst(e); 
				   RESULT = e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // range_atom ::= expression DOTDOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new RangeAtom((Expression) e1, (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // range_atom ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
				RESULT = new RangeAtom(EssenceGlobals.RANGE_EXPR, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // range_atom_list ::= range_atom COMMA range_atom_list 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int ra_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ra_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ra_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) ra_list).addFirst(  ra); 
				   RESULT = ra_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom_list",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // range_atom_list ::= range_atom 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				   list.addFirst(  ra);
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom_list",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // domain_list ::= domain_list COMMA domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) d_list).add(  d); 
		       RESULT = d_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // domain_list ::= domain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
		      list.add(  d); 
		      RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // domain ::= MATRIX_INDEXED_BY LBRACK domain_list RBRACK OF domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) d_list).toArray();	
	        	    Domain[] d_array = new Domain[tmp.length];
			    for(int i=0;i<d_array.length;i++)
 			   	 d_array[i] = (Domain) tmp[i];

	                   
			    RESULT = new Domain(new MatrixDomain(d_array, (Domain) d) ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // domain ::= INT LPAREN range_atom_list RPAREN 
            {
              Object RESULT =null;
		int ra_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int ra_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object ra_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) ra_list).toArray();	
	        	    RangeAtom[] ra_array = new RangeAtom[tmp.length];
			    for(int i=0;i<ra_array.length;i++)
 			   	 ra_array[i] = (RangeAtom) tmp[i];			  
	  
			   RESULT = new Domain(new IntegerDomain(ra_array)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // domain ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 if(id.equals("bool")) 
			     RESULT = new Domain();
	                   else 
			     RESULT = new Domain(new IdentifierDomain(new String(id) )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // domain ::= LPAREN domain RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = (Domain) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) id_list).addFirst(new String(id)); 
				    RESULT = id_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 	
			           LinkedList list = new LinkedList();
				   list.addFirst(new String(id));
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // domain_identifiers ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			  Object[] tmp = ((LinkedList) id_list).toArray();
			  String[] id_array = new String[tmp.length];
			  for(int i=0;i<id_array.length;i++)
 				id_array[i] = (String) tmp[i];

			 RESULT = new DomainIdentifiers(id_array, (Domain) d); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_identifiers",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // infinite_parameter_domain ::= INT 
            {
              Object RESULT =null;
		 RESULT = new Domain(new IntegerDomain()); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // infinite_parameter_domain ::= INT LPAREN DOTDOT RPAREN 
            {
              Object RESULT =null;
		 RESULT = new Domain(new IntegerDomain()); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // infinite_parameter_domain ::= INT LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = new Domain(new IntegerDomain()); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // infinite_parameter_domain ::= INT LPAREN DOTDOT expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
                      RESULT = new Domain(new IntegerDomain(new RangeAtom[] {new RangeAtom(EssenceGlobals.RANGE_DOTS_EXPR ,(Expression) e) } )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // infinite_parameter_domain ::= INT LPAREN expression DOTDOT RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
                        RESULT = new Domain(
                                     new IntegerDomain(
                                           new RangeAtom[] {new RangeAtom(EssenceGlobals.RANGE_EXPR_DOTS ,(Expression) e) } 
                                 )); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameter ::= identifier_list COLON infinite_parameter_domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		
		      Object[] tmp = ((LinkedList) id_list).toArray();
			  String[] id_array = new String[tmp.length];
			  for(int i=0;i<id_array.length;i++)
 				id_array[i] = (String) tmp[i];
		    
		    RESULT = new Parameter(new DomainIdentifiers(id_array, (Domain) d)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameter ::= IDENTIFIER ENUM LPAREN DOT DOT DOT RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		 RESULT = new Parameter(id); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameter ::= domain_identifiers 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Parameter((DomainIdentifiers) di); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object p_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) p_list).addFirst(p); 
		            RESULT = p_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_list",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter_list ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			   LinkedList list = new LinkedList();
			   list.addFirst(p); 
			   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_list",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // given_block ::= GIVEN parameter_list 
            {
              Object RESULT =null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) p_list).toArray();	
	            Parameter[] p_array = new Parameter[tmp.length];
		    for(int i=0;i<p_array.length;i++)
 				p_array[i] = (Parameter) tmp[i];

 		    RESULT = new Declaration(p_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("given_block",7, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= find_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =(Declaration)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= letting_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= parameter_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= where_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= given_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_list ::= declaration declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) d_list).addFirst((Declaration) d);
				  RESULT = d_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				   list.addFirst((Declaration) d); 
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Object RESULT =null;
			  RESULT = new LinkedList(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declarations objective constraint_block 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object expr_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp1 = ((LinkedList) d_list).toArray();
	            Declaration[] d_array = new Declaration[tmp1.length];
		    for(int i=0;i<d_array.length;i++)
 				d_array[i] = (Declaration) tmp1[i];

                    Object[] tmp2 = ((LinkedList) expr_list).toArray();	
	            Expression[] expr_array = new Expression[tmp2.length];
		    for(int i=0;i<expr_array.length;i++)
 				expr_array[i] = (Expression) tmp2[i];

		 RESULT = new EssenceSpecification(d_array,
						   (Objective)  obj,
						   expr_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= essencemodel EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		RESULT = start_val;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EssencePrimeParser$parser.done_parsing();
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // essencemodel ::= HEADER body 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (EssenceSpecification) b; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("essencemodel",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

