
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 23 14:24:43 BST 2007
//----------------------------------------------------

package translator.essencePrimeParser;

import translator.conjureEssenceSpecification.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 23 14:24:43 BST 2007
  */
public class EssencePrimeParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EssencePrimeParser() {super();}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\011\004\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\011\000\002\017\005\000\002\020\003\000\002\020\005" +
    "\000\002\021\005\000\002\021\003\000\002\021\006\000" +
    "\002\021\010\000\002\022\003\000\002\022\005\000\002" +
    "\023\003\000\002\023\005\000\002\024\003\000\002\024" +
    "\005\000\002\026\003\000\002\026\005\000\002\025\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\006\000\002\031\004" +
    "\000\002\031\005\000\002\031\004\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\034\006\000\002\034\006\000\002" +
    "\034\006\000\002\034\012\000\002\034\012\000\002\034" +
    "\012\000\002\034\012\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\035\006\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\037\005\000\002\012\004\000\002\013\004\000\002\040" +
    "\003\000\002\040\005\000\002\041\005\000\002\041\007" +
    "\000\002\041\005\000\002\041\005\000\002\042\006\000" +
    "\002\014\004\000\002\043\003\000\002\043\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\002\000\002\010" +
    "\004\000\002\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\021\004\001\002\000\022\002\ufffd\016" +
    "\016\020\007\022\021\024\ufffd\026\ufffd\032\ufffd\035\011" +
    "\001\002\000\004\002\006\001\002\000\004\002\000\001" +
    "\002\000\004\076\310\001\002\000\022\002\ufff9\016\ufff9" +
    "\020\ufff9\022\ufff9\024\ufff9\026\ufff9\032\ufff9\035\ufff9\001" +
    "\002\000\046\004\051\005\026\006\053\013\050\014\046" +
    "\015\047\017\030\025\057\027\054\030\055\033\031\034" +
    "\035\036\036\050\060\060\045\067\032\076\033\077\056" +
    "\001\002\000\022\002\ufffc\016\016\020\007\022\021\024" +
    "\ufffc\026\ufffc\032\ufffc\035\011\001\002\000\022\002\ufffa" +
    "\016\ufffa\020\ufffa\022\ufffa\024\ufffa\026\ufffa\032\ufffa\035" +
    "\ufffa\001\002\000\022\002\ufff7\016\ufff7\020\ufff7\022\ufff7" +
    "\024\ufff7\026\ufff7\032\ufff7\035\ufff7\001\002\000\004\002" +
    "\001\001\002\000\004\076\200\001\002\000\022\002\ufff8" +
    "\016\ufff8\020\ufff8\022\ufff8\024\ufff8\026\ufff8\032\ufff8\035" +
    "\ufff8\001\002\000\012\002\ufffe\024\ufffe\026\ufffe\032\ufffe" +
    "\001\002\000\004\076\200\001\002\000\012\002\uffa5\024" +
    "\025\026\024\032\uffa5\001\002\000\006\002\uffa3\032\251" +
    "\001\002\000\046\004\051\005\026\006\053\013\050\014" +
    "\046\015\047\017\030\025\057\027\054\030\055\033\031" +
    "\034\035\036\036\050\060\060\045\067\032\076\033\077" +
    "\056\001\002\000\046\004\051\005\026\006\053\013\050" +
    "\014\046\015\047\017\030\025\057\027\054\030\055\033" +
    "\031\034\035\036\036\050\060\060\045\067\032\076\033" +
    "\077\056\001\002\000\004\036\240\001\002\000\104\002" +
    "\uffdf\016\uffdf\020\uffdf\022\uffdf\024\uffdf\026\uffdf\032\uffdf" +
    "\035\uffdf\037\uffdf\042\uffdf\043\uffdf\045\uffdf\046\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\065\uffdf\066" +
    "\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf" +
    "\001\002\000\004\076\uffb6\001\002\000\004\076\uffb5\001" +
    "\002\000\046\004\051\005\026\006\053\013\050\014\046" +
    "\015\047\017\030\025\057\027\054\030\055\033\031\034" +
    "\035\036\036\050\060\060\045\067\032\076\033\077\056" +
    "\001\002\000\104\002\uffd7\016\uffd7\020\uffd7\022\uffd7\024" +
    "\uffd7\026\uffd7\032\uffd7\035\uffd7\037\uffd7\042\uffd7\043\uffd7" +
    "\045\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\065\uffd7\066\uffd7\070\uffd7\071\uffd7\072\uffd7\073" +
    "\uffd7\074\uffd7\075\uffd7\001\002\000\104\002\uffdc\016\uffdc" +
    "\020\uffdc\022\uffdc\024\uffdc\026\uffdc\032\uffdc\035\uffdc\037" +
    "\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\065\uffdc\066\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\001\002\000" +
    "\104\002\uffd9\016\uffd9\020\uffd9\022\uffd9\024\uffd9\026\uffd9" +
    "\032\uffd9\035\uffd9\037\uffd9\042\uffd9\043\uffd9\045\uffd9\046" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\065" +
    "\uffd9\066\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9" +
    "\075\uffd9\001\002\000\046\004\051\005\026\006\053\013" +
    "\050\014\046\015\047\017\030\025\057\027\054\030\055" +
    "\033\031\034\035\036\036\050\060\060\045\067\032\076" +
    "\033\077\056\001\002\000\104\002\uffde\016\uffde\020\uffde" +
    "\022\uffde\024\uffde\026\uffde\032\uffde\035\uffde\037\uffde\042" +
    "\uffde\043\uffde\045\uffde\046\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\065\uffde\066\uffde\070\uffde\071\uffde" +
    "\072\uffde\073\uffde\074\uffde\075\uffde\001\002\000\104\002" +
    "\uffe0\016\uffe0\020\uffe0\022\uffe0\024\uffe0\026\uffe0\032\uffe0" +
    "\035\uffe0\037\uffe0\042\uffe0\043\uffe0\045\uffe0\046\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\065\uffe0\066" +
    "\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0" +
    "\001\002\000\056\002\uffa7\032\uffa7\042\071\051\100\052" +
    "\104\053\105\054\101\055\072\056\062\057\065\060\076" +
    "\061\074\062\070\063\106\065\064\066\067\070\073\071" +
    "\077\072\066\073\063\074\075\075\102\001\002\000\104" +
    "\002\uffdd\016\uffdd\020\uffdd\022\uffdd\024\uffdd\026\uffdd\032" +
    "\uffdd\035\uffdd\037\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\065\uffdd" +
    "\066\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075" +
    "\uffdd\001\002\000\104\002\uffdb\016\uffdb\020\uffdb\022\uffdb" +
    "\024\uffdb\026\uffdb\032\uffdb\035\uffdb\037\uffdb\042\uffdb\043" +
    "\uffdb\045\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\065\uffdb\066\uffdb\070\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\001\002\000\004\076\200\001" +
    "\002\000\046\004\051\005\026\006\053\013\050\014\046" +
    "\015\047\017\030\025\057\027\054\030\055\033\031\034" +
    "\035\036\036\050\060\060\045\067\032\076\033\077\056" +
    "\001\002\000\004\036\166\001\002\000\104\002\uffd8\016" +
    "\uffd8\020\uffd8\022\uffd8\024\uffd8\026\uffd8\032\uffd8\035\uffd8" +
    "\037\uffd8\042\uffd8\043\uffd8\045\uffd8\046\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\065\uffd8\066\uffd8\070" +
    "\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\001\002" +
    "\000\004\076\uffb7\001\002\000\004\036\163\001\002\000" +
    "\104\002\uffe1\016\uffe1\020\uffe1\022\uffe1\024\uffe1\026\uffe1" +
    "\032\uffe1\035\uffe1\037\uffe1\042\uffe1\043\uffe1\045\uffe1\046" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\065" +
    "\uffe1\066\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\001\002\000\004\036\154\001\002\000\004\036" +
    "\151\001\002\000\004\036\142\001\002\000\104\002\uffda" +
    "\016\uffda\020\uffda\022\uffda\024\uffda\026\uffda\032\uffda\035" +
    "\uffda\037\uffda\042\uffda\043\uffda\045\uffda\046\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057" +
    "\uffda\060\uffda\061\uffda\062\uffda\063\uffda\065\uffda\066\uffda" +
    "\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\001" +
    "\002\000\004\036\137\001\002\000\046\004\051\005\026" +
    "\006\053\013\050\014\046\015\047\017\030\025\057\027" +
    "\054\030\055\033\031\034\035\036\036\050\060\060\045" +
    "\067\032\076\033\077\056\001\002\000\054\042\071\050" +
    "\103\051\100\052\104\053\105\054\101\055\072\056\062" +
    "\057\065\060\076\061\074\062\070\063\106\065\064\066" +
    "\067\070\073\071\077\072\066\073\063\074\075\075\102" +
    "\001\002\000\046\004\051\005\026\006\053\013\050\014" +
    "\046\015\047\017\030\025\057\027\054\030\055\033\031" +
    "\034\035\036\036\050\060\060\045\067\032\076\033\077" +
    "\056\001\002\000\046\004\051\005\026\006\053\013\050" +
    "\014\046\015\047\017\030\025\057\027\054\030\055\033" +
    "\031\034\035\036\036\050\060\060\045\067\032\076\033" +
    "\077\056\001\002\000\046\004\051\005\026\006\053\013" +
    "\050\014\046\015\047\017\030\025\057\027\054\030\055" +
    "\033\031\034\035\036\036\050\060\060\045\067\032\076" +
    "\033\077\056\001\002\000\046\004\051\005\026\006\053" +
    "\013\050\014\046\015\047\017\030\025\057\027\054\030" +
    "\055\033\031\034\035\036\036\050\060\060\045\067\032" +
    "\076\033\077\056\001\002\000\046\004\051\005\026\006" +
    "\053\013\050\014\046\015\047\017\030\025\057\027\054" +
    "\030\055\033\031\034\035\036\036\050\060\060\045\067" +
    "\032\076\033\077\056\001\002\000\046\004\051\005\026" +
    "\006\053\013\050\014\046\015\047\017\030\025\057\027" +
    "\054\030\055\033\031\034\035\036\036\050\060\060\045" +
    "\067\032\076\033\077\056\001\002\000\046\004\051\005" +
    "\026\006\053\013\050\014\046\015\047\017\030\025\057" +
    "\027\054\030\055\033\031\034\035\036\036\050\060\060" +
    "\045\067\032\076\033\077\056\001\002\000\046\004\051" +
    "\005\026\006\053\013\050\014\046\015\047\017\030\025" +
    "\057\027\054\030\055\033\031\034\035\036\036\050\060" +
    "\060\045\067\032\076\033\077\056\001\002\000\046\004" +
    "\051\005\026\006\053\013\050\014\046\015\047\017\030" +
    "\025\057\027\054\030\055\033\031\034\035\036\036\050" +
    "\060\060\045\067\032\076\033\077\056\001\002\000\046" +
    "\004\051\005\026\006\053\013\050\014\046\015\047\017" +
    "\030\025\057\027\054\030\055\033\031\034\035\036\036" +
    "\050\060\060\045\067\032\076\033\077\056\001\002\000" +
    "\046\004\051\005\026\006\053\013\050\014\046\015\047" +
    "\017\030\025\057\027\054\030\055\033\031\034\035\036" +
    "\036\050\060\060\045\067\032\076\033\077\056\001\002" +
    "\000\046\004\051\005\026\006\053\013\050\014\046\015" +
    "\047\017\030\025\057\027\054\030\055\033\031\034\035" +
    "\036\036\050\060\060\045\067\032\076\033\077\056\001" +
    "\002\000\046\004\051\005\026\006\053\013\050\014\046" +
    "\015\047\017\030\025\057\027\054\030\055\033\031\034" +
    "\035\036\036\050\060\060\045\067\032\076\033\077\056" +
    "\001\002\000\046\004\051\005\026\006\053\013\050\014" +
    "\046\015\047\017\030\025\057\027\054\030\055\033\031" +
    "\034\035\036\036\050\060\060\045\067\032\076\033\077" +
    "\056\001\002\000\046\004\051\005\026\006\053\013\050" +
    "\014\046\015\047\017\030\025\057\027\054\030\055\033" +
    "\031\034\035\036\036\050\060\060\045\067\032\076\033" +
    "\077\056\001\002\000\046\004\051\005\026\006\053\013" +
    "\050\014\046\015\047\017\030\025\057\027\054\030\055" +
    "\033\031\034\035\036\036\050\060\060\045\067\032\076" +
    "\033\077\056\001\002\000\046\004\051\005\026\006\053" +
    "\013\050\014\046\015\047\017\030\025\057\027\054\030" +
    "\055\033\031\034\035\036\036\050\060\060\045\067\032" +
    "\076\033\077\056\001\002\000\104\002\uffd4\016\uffd4\020" +
    "\uffd4\022\uffd4\024\uffd4\026\uffd4\032\uffd4\035\uffd4\037\uffd4" +
    "\042\uffd4\043\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\065\uffd4\066\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\001\002\000\046" +
    "\004\051\005\026\006\053\013\050\014\046\015\047\017" +
    "\030\025\057\027\054\030\055\033\031\034\035\036\036" +
    "\050\060\060\045\067\032\076\033\077\056\001\002\000" +
    "\046\004\051\005\026\006\053\013\050\014\046\015\047" +
    "\017\030\025\057\027\054\030\055\033\031\034\035\036" +
    "\036\050\060\060\045\067\032\076\033\077\056\001\002" +
    "\000\046\004\051\005\026\006\053\013\050\014\046\015" +
    "\047\017\030\025\057\027\054\030\055\033\031\034\035" +
    "\036\036\050\060\060\045\067\032\076\033\077\056\001" +
    "\002\000\104\002\uffc8\016\uffc8\020\uffc8\022\uffc8\024\uffc8" +
    "\026\uffc8\032\uffc8\035\uffc8\037\uffc8\042\071\043\uffc8\045" +
    "\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\065\064\066\067\070\073\071\077\072\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\001\002\000\064\002\uffd0\016\uffd0\020" +
    "\uffd0\022\uffd0\024\uffd0\026\uffd0\032\uffd0\035\uffd0\037\uffd0" +
    "\042\071\043\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\057\065\060\076\061\074\062\070\063\106\065\064" +
    "\066\067\070\073\071\077\001\002\000\100\002\uffd1\016" +
    "\uffd1\020\uffd1\022\uffd1\024\uffd1\026\uffd1\032\uffd1\035\uffd1" +
    "\037\uffd1\042\071\043\uffd1\045\uffd1\046\uffd1\050\uffd1\053" +
    "\105\054\101\055\072\056\062\057\065\060\076\061\074" +
    "\062\070\063\106\065\064\066\067\070\073\071\077\072" +
    "\066\073\063\074\075\075\102\001\002\000\064\002\uffb9" +
    "\016\uffb9\020\uffb9\022\uffb9\024\uffb9\026\uffb9\032\uffb9\035" +
    "\uffb9\037\uffb9\042\071\043\uffb9\045\uffb9\046\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\057\065\060\076\061\074\062\070\063" +
    "\106\065\064\066\067\070\073\071\077\001\002\000\064" +
    "\002\uffcf\016\uffcf\020\uffcf\022\uffcf\024\uffcf\026\uffcf\032" +
    "\uffcf\035\uffcf\037\uffcf\042\071\043\uffcf\045\uffcf\046\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\057\065\060\076\061\074\062" +
    "\070\063\106\065\064\066\067\070\073\071\077\001\002" +
    "\000\100\002\uffd2\016\uffd2\020\uffd2\022\uffd2\024\uffd2\026" +
    "\uffd2\032\uffd2\035\uffd2\037\uffd2\042\071\043\uffd2\045\uffd2" +
    "\046\uffd2\050\uffd2\053\105\054\101\055\072\056\062\057" +
    "\065\060\076\061\074\062\070\063\106\065\064\066\067" +
    "\070\073\071\077\072\066\073\063\074\075\075\102\001" +
    "\002\000\104\002\uffc4\016\uffc4\020\uffc4\022\uffc4\024\uffc4" +
    "\026\uffc4\032\uffc4\035\uffc4\037\uffc4\042\071\043\uffc4\045" +
    "\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\065\064\066\067\070\073\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\001\002\000\104\002\uffcb\016\uffcb\020" +
    "\uffcb\022\uffcb\024\uffcb\026\uffcb\032\uffcb\035\uffcb\037\uffcb" +
    "\042\071\043\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\074\062\070\063\106\065\064\066\067\070\073\071" +
    "\077\072\uffcb\073\uffcb\074\uffcb\075\uffcb\001\002\000\064" +
    "\002\uffba\016\uffba\020\uffba\022\uffba\024\uffba\026\uffba\032" +
    "\uffba\035\uffba\037\uffba\042\071\043\uffba\045\uffba\046\uffba" +
    "\050\uffba\051\uffba\052\uffba\057\065\060\076\061\074\062" +
    "\070\063\106\065\064\066\067\070\073\071\077\001\002" +
    "\000\104\002\uffca\016\uffca\020\uffca\022\uffca\024\uffca\026" +
    "\uffca\032\uffca\035\uffca\037\uffca\042\071\043\uffca\045\uffca" +
    "\046\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\106" +
    "\065\064\066\067\070\073\071\077\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\001\002\000\104\002\uffc5\016\uffc5\020\uffc5" +
    "\022\uffc5\024\uffc5\026\uffc5\032\uffc5\035\uffc5\037\uffc5\042" +
    "\071\043\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\065\064\066\067\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\075\uffc5\001\002\000\064\002" +
    "\uffce\016\uffce\020\uffce\022\uffce\024\uffce\026\uffce\032\uffce" +
    "\035\uffce\037\uffce\042\071\043\uffce\045\uffce\046\uffce\050" +
    "\uffce\051\uffce\052\uffce\057\065\060\076\061\074\062\070" +
    "\063\106\065\064\066\067\070\073\071\077\001\002\000" +
    "\076\002\uffe4\016\uffe4\020\uffe4\022\uffe4\024\uffe4\026\uffe4" +
    "\032\uffe4\035\uffe4\042\071\043\uffe4\046\126\051\100\052" +
    "\104\053\105\054\101\055\072\056\062\057\065\060\076" +
    "\061\074\062\070\063\106\065\064\066\067\070\073\071" +
    "\077\072\066\073\063\074\075\075\102\001\002\000\004" +
    "\043\125\001\002\000\104\002\uffd6\016\uffd6\020\uffd6\022" +
    "\uffd6\024\uffd6\026\uffd6\032\uffd6\035\uffd6\037\uffd6\042\uffd6" +
    "\043\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\065\uffd6\066\uffd6\070\uffd6\071\uffd6\072" +
    "\uffd6\073\uffd6\074\uffd6\075\uffd6\001\002\000\046\004\051" +
    "\005\026\006\053\013\050\014\046\015\047\017\030\025" +
    "\057\027\054\030\055\033\031\034\035\036\036\050\060" +
    "\060\045\067\032\076\033\077\056\001\002\000\024\002" +
    "\uffe3\016\uffe3\020\uffe3\022\uffe3\024\uffe3\026\uffe3\032\uffe3" +
    "\035\uffe3\043\uffe3\001\002\000\104\002\uffc9\016\uffc9\020" +
    "\uffc9\022\uffc9\024\uffc9\026\uffc9\032\uffc9\035\uffc9\037\uffc9" +
    "\042\071\043\uffc9\045\uffc9\046\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\106\065\064\066\067\070\073\071" +
    "\077\072\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002\000\104" +
    "\002\uffc6\016\uffc6\020\uffc6\022\uffc6\024\uffc6\026\uffc6\032" +
    "\uffc6\035\uffc6\037\uffc6\042\071\043\uffc6\045\uffc6\046\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\065\064" +
    "\066\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075" +
    "\uffc6\001\002\000\064\002\uffbc\016\uffbc\020\uffbc\022\uffbc" +
    "\024\uffbc\026\uffbc\032\uffbc\035\uffbc\037\uffbc\042\071\043" +
    "\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\052\uffbc\057\065" +
    "\060\076\061\074\062\070\063\106\065\064\066\067\070" +
    "\073\071\077\001\002\000\104\002\uffcc\016\uffcc\020\uffcc" +
    "\022\uffcc\024\uffcc\026\uffcc\032\uffcc\035\uffcc\037\uffcc\042" +
    "\071\043\uffcc\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061" +
    "\074\062\070\063\106\065\064\066\067\070\073\071\077" +
    "\072\uffcc\073\uffcc\074\uffcc\075\uffcc\001\002\000\104\002" +
    "\uffc7\016\uffc7\020\uffc7\022\uffc7\024\uffc7\026\uffc7\032\uffc7" +
    "\035\uffc7\037\uffc7\042\071\043\uffc7\045\uffc7\046\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\065\uffc7\066" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\001\002\000\064\002\uffbb\016\uffbb\020\uffbb\022\uffbb\024" +
    "\uffbb\026\uffbb\032\uffbb\035\uffbb\037\uffbb\042\071\043\uffbb" +
    "\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb\057\065\060" +
    "\076\061\074\062\070\063\106\065\064\066\067\070\073" +
    "\071\077\001\002\000\064\002\uffcd\016\uffcd\020\uffcd\022" +
    "\uffcd\024\uffcd\026\uffcd\032\uffcd\035\uffcd\037\uffcd\042\071" +
    "\043\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\057" +
    "\065\060\076\061\074\062\070\063\106\065\064\066\067" +
    "\070\073\071\077\001\002\000\046\004\051\005\026\006" +
    "\053\013\050\014\046\015\047\017\030\025\057\027\054" +
    "\030\055\033\031\034\035\036\036\050\060\060\045\067" +
    "\032\076\033\077\056\001\002\000\054\037\141\042\071" +
    "\051\100\052\104\053\105\054\101\055\072\056\062\057" +
    "\065\060\076\061\074\062\070\063\106\065\064\066\067" +
    "\070\073\071\077\072\066\073\063\074\075\075\102\001" +
    "\002\000\104\002\uffc1\016\uffc1\020\uffc1\022\uffc1\024\uffc1" +
    "\026\uffc1\032\uffc1\035\uffc1\037\uffc1\042\uffc1\043\uffc1\045" +
    "\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\065\uffc1\066\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1" +
    "\074\uffc1\075\uffc1\001\002\000\046\004\051\005\026\006" +
    "\053\013\050\014\046\015\047\017\030\025\057\027\054" +
    "\030\055\033\031\034\035\036\036\050\060\060\045\067" +
    "\032\076\033\077\056\001\002\000\054\042\071\046\144" +
    "\051\100\052\104\053\105\054\101\055\072\056\062\057" +
    "\065\060\076\061\074\062\070\063\106\065\064\066\067" +
    "\070\073\071\077\072\066\073\063\074\075\075\102\001" +
    "\002\000\046\004\051\005\026\006\053\013\050\014\046" +
    "\015\047\017\030\025\057\027\054\030\055\033\031\034" +
    "\035\036\036\050\060\060\045\067\032\076\033\077\056" +
    "\001\002\000\054\042\071\046\146\051\100\052\104\053" +
    "\105\054\101\055\072\056\062\057\065\060\076\061\074" +
    "\062\070\063\106\065\064\066\067\070\073\071\077\072" +
    "\066\073\063\074\075\075\102\001\002\000\046\004\051" +
    "\005\026\006\053\013\050\014\046\015\047\017\030\025" +
    "\057\027\054\030\055\033\031\034\035\036\036\050\060" +
    "\060\045\067\032\076\033\077\056\001\002\000\054\037" +
    "\150\042\071\051\100\052\104\053\105\054\101\055\072" +
    "\056\062\057\065\060\076\061\074\062\070\063\106\065" +
    "\064\066\067\070\073\071\077\072\066\073\063\074\075" +
    "\075\102\001\002\000\104\002\uffbe\016\uffbe\020\uffbe\022" +
    "\uffbe\024\uffbe\026\uffbe\032\uffbe\035\uffbe\037\uffbe\042\uffbe" +
    "\043\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\065\uffbe\066\uffbe\070\uffbe\071\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\001\002\000\046\004\051" +
    "\005\026\006\053\013\050\014\046\015\047\017\030\025" +
    "\057\027\054\030\055\033\031\034\035\036\036\050\060" +
    "\060\045\067\032\076\033\077\056\001\002\000\054\037" +
    "\153\042\071\051\100\052\104\053\105\054\101\055\072" +
    "\056\062\057\065\060\076\061\074\062\070\063\106\065" +
    "\064\066\067\070\073\071\077\072\066\073\063\074\075" +
    "\075\102\001\002\000\104\002\uffc2\016\uffc2\020\uffc2\022" +
    "\uffc2\024\uffc2\026\uffc2\032\uffc2\035\uffc2\037\uffc2\042\uffc2" +
    "\043\uffc2\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\065\uffc2\066\uffc2\070\uffc2\071\uffc2\072" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\001\002\000\046\004\051" +
    "\005\026\006\053\013\050\014\046\015\047\017\030\025" +
    "\057\027\054\030\055\033\031\034\035\036\036\050\060" +
    "\060\045\067\032\076\033\077\056\001\002\000\054\042" +
    "\071\046\156\051\100\052\104\053\105\054\101\055\072" +
    "\056\062\057\065\060\076\061\074\062\070\063\106\065" +
    "\064\066\067\070\073\071\077\072\066\073\063\074\075" +
    "\075\102\001\002\000\046\004\051\005\026\006\053\013" +
    "\050\014\046\015\047\017\030\025\057\027\054\030\055" +
    "\033\031\034\035\036\036\050\060\060\045\067\032\076" +
    "\033\077\056\001\002\000\054\042\071\046\160\051\100" +
    "\052\104\053\105\054\101\055\072\056\062\057\065\060" +
    "\076\061\074\062\070\063\106\065\064\066\067\070\073" +
    "\071\077\072\066\073\063\074\075\075\102\001\002\000" +
    "\046\004\051\005\026\006\053\013\050\014\046\015\047" +
    "\017\030\025\057\027\054\030\055\033\031\034\035\036" +
    "\036\050\060\060\045\067\032\076\033\077\056\001\002" +
    "\000\054\037\162\042\071\051\100\052\104\053\105\054" +
    "\101\055\072\056\062\057\065\060\076\061\074\062\070" +
    "\063\106\065\064\066\067\070\073\071\077\072\066\073" +
    "\063\074\075\075\102\001\002\000\104\002\uffbf\016\uffbf" +
    "\020\uffbf\022\uffbf\024\uffbf\026\uffbf\032\uffbf\035\uffbf\037" +
    "\uffbf\042\uffbf\043\uffbf\045\uffbf\046\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002\000" +
    "\046\004\051\005\026\006\053\013\050\014\046\015\047" +
    "\017\030\025\057\027\054\030\055\033\031\034\035\036" +
    "\036\050\060\060\045\067\032\076\033\077\056\001\002" +
    "\000\054\037\165\042\071\051\100\052\104\053\105\054" +
    "\101\055\072\056\062\057\065\060\076\061\074\062\070" +
    "\063\106\065\064\066\067\070\073\071\077\072\066\073" +
    "\063\074\075\075\102\001\002\000\104\002\uffc3\016\uffc3" +
    "\020\uffc3\022\uffc3\024\uffc3\026\uffc3\032\uffc3\035\uffc3\037" +
    "\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\065\uffc3\066\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\001\002\000" +
    "\046\004\051\005\026\006\053\013\050\014\046\015\047" +
    "\017\030\025\057\027\054\030\055\033\031\034\035\036" +
    "\036\050\060\060\045\067\032\076\033\077\056\001\002" +
    "\000\054\042\071\046\170\051\100\052\104\053\105\054" +
    "\101\055\072\056\062\057\065\060\076\061\074\062\070" +
    "\063\106\065\064\066\067\070\073\071\077\072\066\073" +
    "\063\074\075\075\102\001\002\000\046\004\051\005\026" +
    "\006\053\013\050\014\046\015\047\017\030\025\057\027" +
    "\054\030\055\033\031\034\035\036\036\050\060\060\045" +
    "\067\032\076\033\077\056\001\002\000\054\042\071\046" +
    "\172\051\100\052\104\053\105\054\101\055\072\056\062" +
    "\057\065\060\076\061\074\062\070\063\106\065\064\066" +
    "\067\070\073\071\077\072\066\073\063\074\075\075\102" +
    "\001\002\000\046\004\051\005\026\006\053\013\050\014" +
    "\046\015\047\017\030\025\057\027\054\030\055\033\031" +
    "\034\035\036\036\050\060\060\045\067\032\076\033\077" +
    "\056\001\002\000\054\037\174\042\071\051\100\052\104" +
    "\053\105\054\101\055\072\056\062\057\065\060\076\061" +
    "\074\062\070\063\106\065\064\066\067\070\073\071\077" +
    "\072\066\073\063\074\075\075\102\001\002\000\104\002" +
    "\uffbd\016\uffbd\020\uffbd\022\uffbd\024\uffbd\026\uffbd\032\uffbd" +
    "\035\uffbd\037\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\065\uffbd\066" +
    "\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd" +
    "\001\002\000\104\002\uffd5\016\uffd5\020\uffd5\022\uffd5\024" +
    "\uffd5\026\uffd5\032\uffd5\035\uffd5\037\uffd5\042\071\043\uffd5" +
    "\045\uffd5\046\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\065\064\066\067\070\073\071\077\072\uffd5\073" +
    "\uffd5\074\uffd5\075\uffd5\001\002\000\004\044\233\001\002" +
    "\000\004\047\203\001\002\000\016\007\ufff0\010\ufff0\011" +
    "\ufff0\041\ufff0\046\201\047\ufff0\001\002\000\004\076\200" +
    "\001\002\000\014\007\uffef\010\uffef\011\uffef\041\uffef\047" +
    "\uffef\001\002\000\010\023\204\036\207\076\205\001\002" +
    "\000\004\042\223\001\002\000\036\002\uffed\007\uffed\016" +
    "\uffed\020\uffed\022\uffed\024\uffed\026\uffed\032\uffed\035\uffed" +
    "\036\212\037\uffed\043\uffed\044\uffed\046\uffed\001\002\000" +
    "\004\044\uffb4\001\002\000\010\023\204\036\207\076\205" +
    "\001\002\000\004\037\211\001\002\000\034\002\uffee\007" +
    "\uffee\016\uffee\020\uffee\022\uffee\024\uffee\026\uffee\032\uffee" +
    "\035\uffee\037\uffee\043\uffee\044\uffee\046\uffee\001\002\000" +
    "\046\004\051\005\026\006\053\013\050\014\046\015\047" +
    "\017\030\025\057\027\054\030\055\033\031\034\035\036" +
    "\036\050\060\060\045\067\032\076\033\077\056\001\002" +
    "\000\006\037\uffe8\046\221\001\002\000\060\037\uffe6\042" +
    "\071\045\217\046\uffe6\051\100\052\104\053\105\054\101" +
    "\055\072\056\062\057\065\060\076\061\074\062\070\063" +
    "\106\065\064\066\067\070\073\071\077\072\066\073\063" +
    "\074\075\075\102\001\002\000\004\037\216\001\002\000" +
    "\034\002\uffec\007\uffec\016\uffec\020\uffec\022\uffec\024\uffec" +
    "\026\uffec\032\uffec\035\uffec\037\uffec\043\uffec\044\uffec\046" +
    "\uffec\001\002\000\046\004\051\005\026\006\053\013\050" +
    "\014\046\015\047\017\030\025\057\027\054\030\055\033" +
    "\031\034\035\036\036\050\060\060\045\067\032\076\033" +
    "\077\056\001\002\000\056\037\uffe5\042\071\046\uffe5\051" +
    "\100\052\104\053\105\054\101\055\072\056\062\057\065" +
    "\060\076\061\074\062\070\063\106\065\064\066\067\070" +
    "\073\071\077\072\066\073\063\074\075\075\102\001\002" +
    "\000\046\004\051\005\026\006\053\013\050\014\046\015" +
    "\047\017\030\025\057\027\054\030\055\033\031\034\035" +
    "\036\036\050\060\060\045\067\032\076\033\077\056\001" +
    "\002\000\004\037\uffe7\001\002\000\010\023\204\036\207" +
    "\076\205\001\002\000\006\043\226\046\227\001\002\000" +
    "\006\043\uffea\046\uffea\001\002\000\004\031\231\001\002" +
    "\000\010\023\204\036\207\076\205\001\002\000\006\043" +
    "\uffe9\046\uffe9\001\002\000\010\023\204\036\207\076\205" +
    "\001\002\000\034\002\uffeb\007\uffeb\016\uffeb\020\uffeb\022" +
    "\uffeb\024\uffeb\026\uffeb\032\uffeb\035\uffeb\037\uffeb\043\uffeb" +
    "\044\uffeb\046\uffeb\001\002\000\046\004\051\005\026\006" +
    "\053\013\050\014\046\015\047\017\030\025\057\027\054" +
    "\030\055\033\031\034\035\036\036\050\060\060\045\067" +
    "\032\076\033\077\056\001\002\000\104\002\uffb8\016\uffb8" +
    "\020\uffb8\022\uffb8\024\uffb8\026\uffb8\032\uffb8\035\uffb8\037" +
    "\uffb8\042\071\043\uffb8\045\uffb8\046\uffb8\050\uffb8\051\100" +
    "\052\104\053\105\054\101\055\072\056\062\057\065\060" +
    "\076\061\074\062\070\063\106\065\064\066\067\070\073" +
    "\071\077\072\066\073\063\074\075\075\102\001\002\000" +
    "\054\037\236\042\071\051\100\052\104\053\105\054\101" +
    "\055\072\056\062\057\065\060\076\061\074\062\070\063" +
    "\106\065\064\066\067\070\073\071\077\072\066\073\063" +
    "\074\075\075\102\001\002\000\104\002\uffe2\016\uffe2\020" +
    "\uffe2\022\uffe2\024\uffe2\026\uffe2\032\uffe2\035\uffe2\037\uffe2" +
    "\042\uffe2\043\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\065\uffe2\066\uffe2\070\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\001\002\000\104" +
    "\002\uffd3\016\uffd3\020\uffd3\022\uffd3\024\uffd3\026\uffd3\032" +
    "\uffd3\035\uffd3\037\uffd3\042\071\043\uffd3\045\uffd3\046\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\065\uffd3" +
    "\066\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\001\002\000\046\004\051\005\026\006\053\013\050" +
    "\014\046\015\047\017\030\025\057\027\054\030\055\033" +
    "\031\034\035\036\036\050\060\060\045\067\032\076\033" +
    "\077\056\001\002\000\054\042\071\046\242\051\100\052" +
    "\104\053\105\054\101\055\072\056\062\057\065\060\076" +
    "\061\074\062\070\063\106\065\064\066\067\070\073\071" +
    "\077\072\066\073\063\074\075\075\102\001\002\000\046" +
    "\004\051\005\026\006\053\013\050\014\046\015\047\017" +
    "\030\025\057\027\054\030\055\033\031\034\035\036\036" +
    "\050\060\060\045\067\032\076\033\077\056\001\002\000" +
    "\054\042\071\046\244\051\100\052\104\053\105\054\101" +
    "\055\072\056\062\057\065\060\076\061\074\062\070\063" +
    "\106\065\064\066\067\070\073\071\077\072\066\073\063" +
    "\074\075\075\102\001\002\000\046\004\051\005\026\006" +
    "\053\013\050\014\046\015\047\017\030\025\057\027\054" +
    "\030\055\033\031\034\035\036\036\050\060\060\045\067" +
    "\032\076\033\077\056\001\002\000\054\037\246\042\071" +
    "\051\100\052\104\053\105\054\101\055\072\056\062\057" +
    "\065\060\076\061\074\062\070\063\106\065\064\066\067" +
    "\070\073\071\077\072\066\073\063\074\075\075\102\001" +
    "\002\000\104\002\uffc0\016\uffc0\020\uffc0\022\uffc0\024\uffc0" +
    "\026\uffc0\032\uffc0\035\uffc0\037\uffc0\042\uffc0\043\uffc0\045" +
    "\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063" +
    "\uffc0\065\uffc0\066\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\001\002\000\056\002\uffa6\032\uffa6\042" +
    "\071\051\100\052\104\053\105\054\101\055\072\056\062" +
    "\057\065\060\076\061\074\062\070\063\106\065\064\066" +
    "\067\070\073\071\077\072\066\073\063\074\075\075\102" +
    "\001\002\000\004\002\uffff\001\002\000\046\004\051\005" +
    "\026\006\053\013\050\014\046\015\047\017\030\025\057" +
    "\027\054\030\055\033\031\034\035\036\036\050\060\060" +
    "\045\067\032\076\033\077\056\001\002\000\004\002\uffa4" +
    "\001\002\000\024\002\uffb1\016\uffb1\020\uffb1\022\uffb1\024" +
    "\uffb1\026\uffb1\032\uffb1\035\uffb1\046\274\001\002\000\012" +
    "\007\261\010\257\011\256\047\260\001\002\000\022\002" +
    "\uffb2\016\uffb2\020\uffb2\022\uffb2\024\uffb2\026\uffb2\032\uffb2" +
    "\035\uffb2\001\002\000\004\012\267\001\002\000\010\023" +
    "\204\036\207\076\205\001\002\000\010\023\204\036\207" +
    "\076\205\001\002\000\046\004\051\005\026\006\053\013" +
    "\050\014\046\015\047\017\030\025\057\027\054\030\055" +
    "\033\031\034\035\036\036\050\060\060\045\067\032\076" +
    "\033\077\056\001\002\000\074\002\uffad\016\uffad\020\uffad" +
    "\022\uffad\024\uffad\026\uffad\032\uffad\035\uffad\042\071\046" +
    "\uffad\051\100\052\104\053\105\054\101\055\072\056\062" +
    "\057\065\060\076\061\074\062\070\063\106\065\064\066" +
    "\067\070\073\071\077\072\066\073\063\074\075\075\102" +
    "\001\002\000\004\007\264\001\002\000\046\004\051\005" +
    "\026\006\053\013\050\014\046\015\047\017\030\025\057" +
    "\027\054\030\055\033\031\034\035\036\036\050\060\060" +
    "\045\067\032\076\033\077\056\001\002\000\074\002\uffae" +
    "\016\uffae\020\uffae\022\uffae\024\uffae\026\uffae\032\uffae\035" +
    "\uffae\042\071\046\uffae\051\100\052\104\053\105\054\101" +
    "\055\072\056\062\057\065\060\076\061\074\062\070\063" +
    "\106\065\064\066\067\070\073\071\077\072\066\073\063" +
    "\074\075\075\102\001\002\000\024\002\uffaf\016\uffaf\020" +
    "\uffaf\022\uffaf\024\uffaf\026\uffaf\032\uffaf\035\uffaf\046\uffaf" +
    "\001\002\000\004\040\271\001\002\000\024\002\uffac\016" +
    "\uffac\020\uffac\022\uffac\024\uffac\026\uffac\032\uffac\035\uffac" +
    "\046\uffac\001\002\000\004\076\200\001\002\000\004\041" +
    "\273\001\002\000\024\002\uffab\016\uffab\020\uffab\022\uffab" +
    "\024\uffab\026\uffab\032\uffab\035\uffab\046\uffab\001\002\000" +
    "\004\076\200\001\002\000\022\002\uffb0\016\uffb0\020\uffb0" +
    "\022\uffb0\024\uffb0\026\uffb0\032\uffb0\035\uffb0\001\002\000" +
    "\024\002\uffa9\016\uffa9\020\uffa9\022\uffa9\024\uffa9\026\uffa9" +
    "\032\uffa9\035\uffa9\046\303\001\002\000\004\047\301\001" +
    "\002\000\022\002\uffaa\016\uffaa\020\uffaa\022\uffaa\024\uffaa" +
    "\026\uffaa\032\uffaa\035\uffaa\001\002\000\010\023\204\036" +
    "\207\076\205\001\002\000\024\002\ufff1\016\ufff1\020\ufff1" +
    "\022\ufff1\024\ufff1\026\ufff1\032\ufff1\035\ufff1\046\ufff1\001" +
    "\002\000\004\076\200\001\002\000\022\002\uffa8\016\uffa8" +
    "\020\uffa8\022\uffa8\024\uffa8\026\uffa8\032\uffa8\035\uffa8\001" +
    "\002\000\012\002\ufffb\024\ufffb\026\ufffb\032\ufffb\001\002" +
    "\000\022\002\uffb3\016\uffb3\020\uffb3\022\uffb3\024\uffb3\026" +
    "\uffb3\032\uffb3\035\uffb3\001\002\000\024\002\ufff3\016\ufff3" +
    "\020\ufff3\022\ufff3\024\ufff3\026\ufff3\032\ufff3\035\ufff3\046" +
    "\ufff3\001\002\000\010\012\315\046\201\047\ufff0\001\002" +
    "\000\024\002\ufff6\016\ufff6\020\ufff6\022\ufff6\024\ufff6\026" +
    "\ufff6\032\ufff6\035\ufff6\046\313\001\002\000\024\002\ufff5" +
    "\016\ufff5\020\ufff5\022\ufff5\024\ufff5\026\ufff5\032\ufff5\035" +
    "\ufff5\046\ufff5\001\002\000\004\076\310\001\002\000\024" +
    "\002\ufff4\016\ufff4\020\ufff4\022\ufff4\024\ufff4\026\ufff4\032" +
    "\ufff4\035\ufff4\046\ufff4\001\002\000\004\036\316\001\002" +
    "\000\004\044\317\001\002\000\004\044\320\001\002\000" +
    "\004\044\321\001\002\000\004\037\322\001\002\000\024" +
    "\002\ufff2\016\ufff2\020\ufff2\022\ufff2\024\ufff2\026\ufff2\032" +
    "\ufff2\035\ufff2\046\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\002\004\001\001\000\022\003\014\004" +
    "\021\005\017\006\011\011\012\012\007\013\016\014\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\310\016\311\017\306\020\276\001\001\000\002\001\001" +
    "\000\026\025\122\026\305\027\051\030\037\031\026\032" +
    "\036\033\042\034\041\035\033\036\043\001\001\000\016" +
    "\005\304\006\011\011\012\012\007\013\016\014\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\275\020\276\043\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\253\040\254\041\252" +
    "\001\001\000\004\007\022\001\001\000\004\010\247\001" +
    "\001\000\024\025\246\027\051\030\037\031\026\032\036" +
    "\033\042\034\041\035\033\036\043\001\001\000\024\025" +
    "\040\027\051\030\037\031\026\032\036\033\042\034\041" +
    "\035\033\036\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\025\236" +
    "\027\051\030\037\031\026\032\036\033\042\034\041\035" +
    "\033\036\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\025\234\027\051\030\037\031" +
    "\026\032\036\033\042\034\041\035\033\036\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\176\037\175" +
    "\001\001\000\024\025\174\027\051\030\037\031\026\032" +
    "\036\033\042\034\041\035\033\036\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\025\060\027\051\030\037\031\026\032\036\033\042" +
    "\034\041\035\033\036\043\001\001\000\002\001\001\000" +
    "\024\025\135\027\051\030\037\031\026\032\036\033\042" +
    "\034\041\035\033\036\043\001\001\000\024\025\134\027" +
    "\051\030\037\031\026\032\036\033\042\034\041\035\033" +
    "\036\043\001\001\000\024\025\133\027\051\030\037\031" +
    "\026\032\036\033\042\034\041\035\033\036\043\001\001" +
    "\000\024\025\132\027\051\030\037\031\026\032\036\033" +
    "\042\034\041\035\033\036\043\001\001\000\024\025\131" +
    "\027\051\030\037\031\026\032\036\033\042\034\041\035" +
    "\033\036\043\001\001\000\024\025\130\027\051\030\037" +
    "\031\026\032\036\033\042\034\041\035\033\036\043\001" +
    "\001\000\024\025\127\027\051\030\037\031\026\032\036" +
    "\033\042\034\041\035\033\036\043\001\001\000\026\025" +
    "\122\026\123\027\051\030\037\031\026\032\036\033\042" +
    "\034\041\035\033\036\043\001\001\000\024\025\121\027" +
    "\051\030\037\031\026\032\036\033\042\034\041\035\033" +
    "\036\043\001\001\000\024\025\120\027\051\030\037\031" +
    "\026\032\036\033\042\034\041\035\033\036\043\001\001" +
    "\000\024\025\117\027\051\030\037\031\026\032\036\033" +
    "\042\034\041\035\033\036\043\001\001\000\024\025\116" +
    "\027\051\030\037\031\026\032\036\033\042\034\041\035" +
    "\033\036\043\001\001\000\024\025\115\027\051\030\037" +
    "\031\026\032\036\033\042\034\041\035\033\036\043\001" +
    "\001\000\024\025\114\027\051\030\037\031\026\032\036" +
    "\033\042\034\041\035\033\036\043\001\001\000\024\025" +
    "\113\027\051\030\037\031\026\032\036\033\042\034\041" +
    "\035\033\036\043\001\001\000\024\025\112\027\051\030" +
    "\037\031\026\032\036\033\042\034\041\035\033\036\043" +
    "\001\001\000\024\025\111\027\051\030\037\031\026\032" +
    "\036\033\042\034\041\035\033\036\043\001\001\000\002" +
    "\001\001\000\024\025\110\027\051\030\037\031\026\032" +
    "\036\033\042\034\041\035\033\036\043\001\001\000\024" +
    "\025\107\027\051\030\037\031\026\032\036\033\042\034" +
    "\041\035\033\036\043\001\001\000\024\025\106\027\051" +
    "\030\037\031\026\032\036\033\042\034\041\035\033\036" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\025\122\026\126\027\051\030\037\031\026\032\036\033" +
    "\042\034\041\035\033\036\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\025\137\027\051\030\037\031\026\032" +
    "\036\033\042\034\041\035\033\036\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\025\142\027\051\030" +
    "\037\031\026\032\036\033\042\034\041\035\033\036\043" +
    "\001\001\000\002\001\001\000\024\025\144\027\051\030" +
    "\037\031\026\032\036\033\042\034\041\035\033\036\043" +
    "\001\001\000\002\001\001\000\024\025\146\027\051\030" +
    "\037\031\026\032\036\033\042\034\041\035\033\036\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\025" +
    "\151\027\051\030\037\031\026\032\036\033\042\034\041" +
    "\035\033\036\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\025\154\027\051\030\037\031\026\032\036" +
    "\033\042\034\041\035\033\036\043\001\001\000\002\001" +
    "\001\000\024\025\156\027\051\030\037\031\026\032\036" +
    "\033\042\034\041\035\033\036\043\001\001\000\002\001" +
    "\001\000\024\025\160\027\051\030\037\031\026\032\036" +
    "\033\042\034\041\035\033\036\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\025\163\027\051\030\037" +
    "\031\026\032\036\033\042\034\041\035\033\036\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\025\166" +
    "\027\051\030\037\031\026\032\036\033\042\034\041\035" +
    "\033\036\043\001\001\000\002\001\001\000\024\025\170" +
    "\027\051\030\037\031\026\032\036\033\042\034\041\035" +
    "\033\036\043\001\001\000\002\001\001\000\024\025\172" +
    "\027\051\030\037\031\026\032\036\033\042\034\041\035" +
    "\033\036\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\201\001\001\000\002\001\001" +
    "\000\004\021\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\023\214\024\212\025" +
    "\213\027\051\030\037\031\026\032\036\033\042\034\041" +
    "\035\033\036\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\025\217" +
    "\027\051\030\037\031\026\032\036\033\042\034\041\035" +
    "\033\036\043\001\001\000\002\001\001\000\030\023\221" +
    "\024\212\025\213\027\051\030\037\031\026\032\036\033" +
    "\042\034\041\035\033\036\043\001\001\000\002\001\001" +
    "\000\006\021\224\022\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\227\001\001" +
    "\000\002\001\001\000\004\021\231\001\001\000\002\001" +
    "\001\000\024\025\233\027\051\030\037\031\026\032\036" +
    "\033\042\034\041\035\033\036\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\025\240\027\051\030\037\031\026\032\036\033" +
    "\042\034\041\035\033\036\043\001\001\000\002\001\001" +
    "\000\024\025\242\027\051\030\037\031\026\032\036\033" +
    "\042\034\041\035\033\036\043\001\001\000\002\001\001" +
    "\000\024\025\244\027\051\030\037\031\026\032\036\033" +
    "\042\034\041\035\033\036\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\025\122\026\251\027\051\030\037\031\026\032\036" +
    "\033\042\034\041\035\033\036\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\267\001\001\000\004\021\265\001\001\000" +
    "\004\021\262\001\001\000\024\025\261\027\051\030\037" +
    "\031\026\032\036\033\042\034\041\035\033\036\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\025\264" +
    "\027\051\030\037\031\026\032\036\033\042\034\041\035" +
    "\033\036\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\253" +
    "\040\274\041\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\301" +
    "\001\001\000\002\001\001\000\010\017\275\020\276\043" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\313\017\306\020\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EssencePrimeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EssencePrimeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EssencePrimeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




     public StringBuffer errorMessage = new StringBuffer("");

    /* The reason for the error is passed into the method in the
       String 'message'. */

    public void report_error(String message, Object info)  {

        StringBuffer m = new StringBuffer("Parse error");


        if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                                m.append(" in line "+(s.left));
                if (s.right >= 0)
                        m.append(", column "+(s.right));
            }
        }
        m.append(" : "+message);
        //throw new Exception(m);
        errorMessage = m;
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)  {
        report_error(message, info);
        //System.exit(1);
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EssencePrimeParser$actions {



        public int errors_found = 0;
       


  private final EssencePrimeParser parser;

  /** Constructor */
  CUP$EssencePrimeParser$actions(EssencePrimeParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EssencePrimeParser$do_action(
    int                        CUP$EssencePrimeParser$act_num,
    java_cup.runtime.lr_parser CUP$EssencePrimeParser$parser,
    java.util.Stack            CUP$EssencePrimeParser$stack,
    int                        CUP$EssencePrimeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EssencePrimeParser$result;

      /* select the action based on the action number */
      switch (CUP$EssencePrimeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // constraint_block ::= 
            {
              Object RESULT =null;
		
		            RESULT = new LinkedList(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // constraint_block ::= SUCH_THAT expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (LinkedList) e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // objective ::= 
            {
              Object RESULT =null;
		    
			  RESULT = new Objective(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // objective ::= MINIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Objective(true, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // objective ::= MAXIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Objective(false, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variable_list ::= domain_identifiers COMMA variable_list 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int di_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int di_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) di_list).add((DomainIdentifiers) di);  
			 RESULT = di_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_list",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variable_list ::= domain_identifiers 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
			list.add((DomainIdentifiers) di); 
			RESULT = list;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_list",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // find_block ::= FIND variable_list 
            {
              Object RESULT =null;
		int v_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int v_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object v_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) v_list).toArray();	
	        	    DomainIdentifiers[] v_array = new DomainIdentifiers[tmp.length];
			    for(int i=v_array.length; i>0; i--) {
 			   	          v_array[i-1] = (DomainIdentifiers) tmp[v_array.length-i];
	            }
			    RESULT = new Declaration(v_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("find_block",10, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // user_def_type ::= ENUM LBRACE identifier_list RBRACE 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) id_list).toArray();	
	        	    Identifier[] id_array = new Identifier[tmp.length];
			    for(int i=0;i<id_array.length;i++)
 			   	 id_array[i] = (Identifier) tmp[i];

			    RESULT = new Type(new Enumeration(id_array)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("user_def_type",32, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // constant ::= identifier_list BE_NEW_TYPE user_def_type 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];
                              constantList.add(new Constant(new NewTypeConstant(id, (Type) t))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // constant ::= identifier_list BE expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // constant ::= identifier_list COLON domain BE expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Domain) d,(Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // constant ::= identifier_list BE_DOMAIN domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident = (String) identifier_list[i];
                              constantList.add(new Constant(new DomainConstant(ident, (Domain) d))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // constant_list ::= constant COMMA constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int constant_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int constant_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object constant_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 for(int i=0; i<((LinkedList) c_list).size(); i++) {
		            ((LinkedList) constant_list).add( ((LinkedList) c_list).get(i)) ; 
                           }
			    RESULT = c_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_list",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // constant_list ::= constant 
            {
              Object RESULT =null;
		int clistleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object clist = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		   
			   RESULT = clist; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_list",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // letting_block ::= LETTING constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) c_list).toArray();	
	        	    Constant[] c_array = new Constant[tmp.length];
			    for(int i=0;i<c_array.length;i++)
 			   	 c_array[i] = (Constant) tmp[i];

			    RESULT = new Declaration(c_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // where_block ::= WHERE expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) e_list).toArray();	
	        	    Expression[] e_array = new Expression[tmp.length];
			    for(int i=0;i<e_array.length;i++)
 			   	 e_array[i] = (Expression) tmp[i];

			    RESULT = new Declaration (e_array);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("where_block",8, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binding_expression ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) id_list).toArray();	
	        	    String[] id_array = new String[tmp.length];
			    for(int i=0;i<id_array.length;i++)
 			   	 id_array[i] = (String) tmp[i];
				 
			    RESULT = new BindingExpression(new DomainIdentifiers(id_array,(Domain) d )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binding_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // quantifier ::= SUM 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.SUM); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // quantifier ::= FORALL 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.FORALL); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // quantifier ::= EXISTS 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.EXISTS); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // quantifierop_expression ::= quantifier binding_expression DOT expression 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int bind_eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int bind_eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object bind_e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new QuantificationExpression((Quantifier) q, 
								       (BindingExpression) bind_e, 
								        (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifierop_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lex_expression ::= expression LEXGEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_GEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lex_expression ::= expression LEXLEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_LEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lex_expression ::= expression LEXGREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_GREATER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lex_expression ::= expression LEXLESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_LESS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // functionop_expression ::= ELEMENT LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ELEMENT,
	                									(Expression) e1,
	                									(Expression) e2,
	                									(Expression) e3);   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // functionop_expression ::= OCCURRENCE LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.OCCURRENCE,
	                                                   (Expression) e1,
	                                                   (Expression) e2,
	                                                   (Expression) e3);   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // functionop_expression ::= ATMOST LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ATMOST,
									(Expression) e1,
									(Expression) e2,
									(Expression) e3); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // functionop_expression ::= ATLEAST LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ATLEAST,
									(Expression) e1,
									(Expression) e2,
									(Expression) e3); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // functionop_expression ::= MAX LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.MAX, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // functionop_expression ::= MIN LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.MIN, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // functionop_expression ::= ALLDIFF LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ALLDIFF, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // binaryop_expression ::= expression IFF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.IFF), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binaryop_expression ::= expression IF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.IF), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binaryop_expression ::= expression OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.OR), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // binaryop_expression ::= expression AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.AND), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // binaryop_expression ::= expression POWER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.POWER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // binaryop_expression ::= expression DIVISION expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.DIVIDE), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binaryop_expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.MULT), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binaryop_expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.MINUS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binaryop_expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(	
			(Expression) e1, new BinaryOperator (EssenceGlobals.PLUS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binaryop_expression ::= expression GEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.GEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // binaryop_expression ::= expression GREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.GREATER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binaryop_expression ::= expression LEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.LEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // binaryop_expression ::= expression LESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.LESS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binaryop_expression ::= expression NEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.NEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binaryop_expression ::= expression EQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.EQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unitop_expression ::= NOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryExpression(EssenceGlobals.NOT, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unitop_expression ::= BAR expression BAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new UnaryExpression(EssenceGlobals.ABS, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unitop_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryExpression(EssenceGlobals.NEGATION, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // deref_expression ::= expression LBRACK expression_list RBRACK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) e_list).toArray();	
	        	    Expression[] e_array = new Expression[tmp.length];
			    for(int i=0;i<e_array.length;i++)
 			   	 e_array[i] = (Expression) tmp[i];
	
			  RESULT = new NonAtomicExpression(EssenceGlobals.NONATOMIC_EXPR_BRACKET, 
								(Expression)  e,
								 e_array ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("deref_expression",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atom_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomicExpression(new String(id)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atom_expression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new AtomicExpression(false); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // atom_expression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new AtomicExpression(true); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // atom_expression ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				  RESULT = new AtomicExpression(i); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= lex_expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression((LexExpression) le);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= quantifierop_expression 
            {
              Object RESULT =null;
		int qeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int qeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object qe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (QuantificationExpression) qe); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= functionop_expression 
            {
              Object RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object fe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (FunctionExpression) fe); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= binaryop_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (BinaryExpression) be); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= unitop_expression 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (UnaryExpression) ue); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= deref_expression 
            {
              Object RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (NonAtomicExpression) de); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= atom_expression 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (AtomicExpression) ae); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new Expression((Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression_list ::= expression COMMA expression_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) e_list).addFirst(e); 
				   RESULT = e_list;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList e_list = new LinkedList();	
				   e_list.addFirst(e); 
				   RESULT = e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // range_atom ::= expression DOTDOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new RangeAtom((Expression) e1, (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // range_atom ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
				RESULT = new RangeAtom(EssenceGlobals.RANGE_EXPR, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // range_atom_list ::= range_atom COMMA range_atom_list 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int ra_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ra_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ra_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) ra_list).add(  ra); 
				   RESULT = ra_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom_list",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // range_atom_list ::= range_atom 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				   list.add(  ra);
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom_list",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // domain_list ::= domain_list COMMA domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) d_list).add(  d); 
		       RESULT = d_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // domain_list ::= domain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
		      list.add(  d); 
		      RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // domain ::= MATRIX_INDEXED_BY LBRACK domain_list RBRACK OF domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) d_list).toArray();	
	        	    Domain[] d_array = new Domain[tmp.length];
			    for(int i=0;i<d_array.length;i++)
 			   	 d_array[i] = (Domain) tmp[i];

	                   
			    RESULT = new Domain(new MatrixDomain(d_array, (Domain) d) ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // domain ::= IDENTIFIER LPAREN range_atom_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int ra_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int ra_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object ra_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) ra_list).toArray();	
	        	    RangeAtom[] ra_array = new RangeAtom[tmp.length];
			    for(int i=0;i<ra_array.length;i++)
 			   	 ra_array[i] = (RangeAtom) tmp[i];			  

			   if(id.equalsIgnoreCase("int")) 
			      RESULT = new Domain(new IntegerDomain(ra_array)); 			    
			   else 
	           	      RESULT = new Domain(new IdentifierDomain(new String(id), ra_array)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // domain ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 if(id.equals("bool")) 
			     RESULT = new Domain();
	                   else 
			     RESULT = new Domain(new IdentifierDomain(new String(id) )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // domain ::= LPAREN domain RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = (Domain) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) id_list).add(new String(id)); 
				    RESULT = id_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 	
			           LinkedList list = new LinkedList();
				   list.add(new String(id));
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // domain_identifiers ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			  Object[] tmp = ((LinkedList) id_list).toArray();
			  String[] id_array = new String[tmp.length];
			  for(int i=0;i<id_array.length;i++)
 				id_array[i] = (String) tmp[i];

			 RESULT = new DomainIdentifiers(id_array, (Domain) d); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_identifiers",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameter ::= IDENTIFIER ENUM LPAREN DOT DOT DOT RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		 RESULT = new Parameter(id); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter ::= domain_identifiers 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Parameter((DomainIdentifiers) di); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object p_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) p_list).add(p); 
		            RESULT = p_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameter_list ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			   LinkedList list = new LinkedList();
			   list.add(p); 
			   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // given_block ::= GIVEN parameter_list 
            {
              Object RESULT =null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) p_list).toArray();	
	            Parameter[] p_array = new Parameter[tmp.length];
		    for(int i=0;i<p_array.length;i++)
 				p_array[i] = (Parameter) tmp[i];

 		    RESULT = new Declaration(p_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("given_block",7, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= find_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =(Declaration)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= letting_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= where_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= given_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_list ::= declaration declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) d_list).add((Declaration) d);
				  RESULT = d_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				   list.add((Declaration) d); 
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Object RESULT =null;
			  RESULT = new LinkedList(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declarations objective constraint_block 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object expr_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp1 = ((LinkedList) d_list).toArray();
	            Declaration[] d_array = new Declaration[tmp1.length];
		    for(int i=0;i<d_array.length;i++)
 				d_array[i] = (Declaration) tmp1[i];

                    Object[] tmp2 = ((LinkedList) expr_list).toArray();	
	            Expression[] expr_array = new Expression[tmp2.length];
		    for(int i=0;i<expr_array.length;i++)
 				expr_array[i] = (Expression) tmp2[i];

		 RESULT = new EssenceSpecification(d_array,
						   (Objective)  obj,
						   expr_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= essencemodel EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		RESULT = start_val;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EssencePrimeParser$parser.done_parsing();
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // essencemodel ::= HEADER body 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (EssenceSpecification) b; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("essencemodel",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

