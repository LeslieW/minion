
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 10 18:00:54 GMT 2008
//----------------------------------------------------

package translator.essencePrimeParser;

import translator.expression.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 10 18:00:54 GMT 2008
  */
public class EssencePrimeParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EssencePrimeParser() {super();}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\011\004\000\002" +
    "\011\004\000\002\012\004\000\002\013\006\000\002\013" +
    "\010\000\002\013\006\000\002\013\006\000\002\013\010" +
    "\000\002\013\006\000\002\013\010\000\002\014\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\010\004\000\002\010\002\000\002\015\003\000\002\015" +
    "\005\000\002\016\003\000\002\016\005\000\002\017\005" +
    "\000\002\020\005\000\002\024\007\000\002\024\007\000" +
    "\002\024\005\000\002\024\006\000\002\024\003\000\002" +
    "\021\003\000\002\021\005\000\002\022\005\000\002\022" +
    "\003\000\002\022\010\000\002\022\006\000\002\022\010" +
    "\000\002\023\003\000\002\023\005\000\002\026\003\000" +
    "\002\026\005\000\002\026\005\000\002\025\005\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\006\000\002" +
    "\030\011\000\002\032\003\000\002\032\004\000\002\032" +
    "\004\000\002\032\005\000\002\032\003\000\002\032\005" +
    "\000\002\033\003\000\002\033\005\000\002\031\003\000" +
    "\002\031\003\000\002\034\004\000\002\034\005\000\002" +
    "\034\004\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\037\010\000\002\037\010\000" +
    "\002\037\006\000\002\037\006\000\002\037\012\000\002" +
    "\037\012\000\002\037\012\000\002\037\016\000\002\037" +
    "\016\000\002\037\012\000\002\037\012\000\002\037\012" +
    "\000\002\037\012\000\002\037\012\000\002\037\012\000" +
    "\002\037\012\000\002\037\012\000\002\041\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\040\010\000\002\040\010\000\002\040\010" +
    "\000\002\042\010\000\002\042\010\000\002\042\010\000" +
    "\002\043\003\000\002\043\005\000\002\044\003\000\002" +
    "\044\004\000\002\044\005\000\002\044\006\000\002\046" +
    "\005\000\002\045\003\000\002\045\005\000\002\047\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\004\022\004\001\002\000\022\002\ufffd\016" +
    "\016\021\007\024\021\026\ufffd\030\ufffd\035\ufffd\041\011" +
    "\001\002\000\004\002\006\001\002\000\004\002\000\001" +
    "\002\000\004\100\245\001\002\000\022\002\ufff9\016\ufff9" +
    "\021\ufff9\024\ufff9\026\ufff9\030\ufff9\035\ufff9\041\ufff9\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\051" +
    "\015\052\017\030\020\047\027\060\031\056\036\031\037" +
    "\041\040\037\042\040\052\061\062\050\071\033\100\034" +
    "\101\057\001\002\000\022\002\ufffa\016\ufffa\021\ufffa\024" +
    "\ufffa\026\ufffa\030\ufffa\035\ufffa\041\ufffa\001\002\000\022" +
    "\002\ufffc\016\016\021\007\024\021\026\ufffc\030\ufffc\035" +
    "\ufffc\041\011\001\002\000\022\002\ufff7\016\ufff7\021\ufff7" +
    "\024\ufff7\026\ufff7\030\ufff7\035\ufff7\041\ufff7\001\002\000" +
    "\004\002\001\001\002\000\004\100\245\001\002\000\022" +
    "\002\ufff8\016\ufff8\021\ufff8\024\ufff8\026\ufff8\030\ufff8\035" +
    "\ufff8\041\ufff8\001\002\000\012\002\ufffe\026\ufffe\030\ufffe" +
    "\035\ufffe\001\002\000\004\100\u011d\001\002\000\012\002" +
    "\uffe9\026\024\030\025\035\uffe9\001\002\000\006\002\uffe7" +
    "\035\u011b\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\051\015\052\017\030\020\047\027\060\031\056" +
    "\036\031\037\041\040\037\042\040\052\061\062\050\071" +
    "\033\100\034\101\057\001\002\000\050\004\054\005\027" +
    "\006\055\013\053\014\051\015\052\017\030\020\047\027" +
    "\060\031\056\036\031\037\041\040\037\042\040\052\061" +
    "\062\050\071\033\100\034\101\057\001\002\000\106\002" +
    "\uffce\003\uffce\016\uffce\021\uffce\024\uffce\026\uffce\030\uffce" +
    "\032\uffce\035\uffce\041\uffce\043\uffce\045\uffce\047\uffce\050" +
    "\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\067" +
    "\uffce\070\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce" +
    "\077\uffce\001\002\000\004\042\u010a\001\002\000\004\100" +
    "\245\001\002\000\004\100\245\001\002\000\106\002\uffc7" +
    "\003\uffc7\016\uffc7\021\uffc7\024\uffc7\026\uffc7\030\uffc7\032" +
    "\uffc7\035\uffc7\041\uffc7\043\uffc7\045\uffc7\047\uffc7\050\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\067\uffc7" +
    "\070\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077" +
    "\uffc7\001\002\000\050\004\054\005\027\006\055\013\053" +
    "\014\051\015\052\017\030\020\047\027\060\031\056\036" +
    "\031\037\041\040\037\042\040\052\061\062\050\071\033" +
    "\100\034\101\057\001\002\000\110\002\uffc3\003\uffc3\016" +
    "\uffc3\021\uffc3\024\uffc3\026\uffc3\030\uffc3\032\uffc3\035\uffc3" +
    "\041\uffc3\043\uffc3\044\150\045\uffc3\047\uffc3\050\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\067\uffc3\070" +
    "\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3" +
    "\001\002\000\106\002\uffca\003\uffca\016\uffca\021\uffca\024" +
    "\uffca\026\uffca\030\uffca\032\uffca\035\uffca\041\uffca\043\uffca" +
    "\045\uffca\047\uffca\050\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\067\uffca\070\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\001\002\000\106\002\uffcc" +
    "\003\uffcc\016\uffcc\021\uffcc\024\uffcc\026\uffcc\030\uffcc\032" +
    "\uffcc\035\uffcc\041\uffcc\043\uffcc\045\uffcc\047\uffcc\050\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\067\uffcc" +
    "\070\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077" +
    "\uffcc\001\002\000\106\002\uffc5\003\uffc5\016\uffc5\021\uffc5" +
    "\024\uffc5\026\uffc5\030\uffc5\032\uffc5\035\uffc5\041\uffc5\043" +
    "\uffc5\045\uffc5\047\uffc5\050\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\067\uffc5\070\uffc5\072\uffc5\073\uffc5" +
    "\074\uffc5\075\uffc5\076\uffc5\077\uffc5\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\051\015\052\017\030" +
    "\020\047\027\060\031\056\036\031\037\041\040\037\042" +
    "\040\052\061\062\050\071\033\100\034\101\057\001\002" +
    "\000\004\042\355\001\002\000\106\002\uffcb\003\uffcb\016" +
    "\uffcb\021\uffcb\024\uffcb\026\uffcb\030\uffcb\032\uffcb\035\uffcb" +
    "\041\uffcb\043\uffcb\045\uffcb\047\uffcb\050\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\065\uffcb\067\uffcb\070\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\001\002" +
    "\000\106\002\uffcd\003\uffcd\016\uffcd\021\uffcd\024\uffcd\026" +
    "\uffcd\030\uffcd\032\uffcd\035\uffcd\041\uffcd\043\uffcd\045\uffcd" +
    "\047\uffcd\050\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\067\uffcd\070\uffcd\072\uffcd\073\uffcd\074\uffcd\075" +
    "\uffcd\076\uffcd\077\uffcd\001\002\000\056\002\uffea\032\073" +
    "\035\uffea\053\101\054\105\055\106\056\102\057\072\060" +
    "\063\061\066\062\077\063\075\064\071\065\107\067\065" +
    "\070\070\072\074\073\100\074\067\075\064\076\076\077" +
    "\103\001\002\000\106\002\uffc9\003\uffc9\016\uffc9\021\uffc9" +
    "\024\uffc9\026\uffc9\030\uffc9\032\uffc9\035\uffc9\041\uffc9\043" +
    "\uffc9\045\uffc9\047\uffc9\050\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\067\uffc9\070\uffc9\072\uffc9\073\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\077\uffc9\001\002\000\106\002" +
    "\uffc8\003\uffc8\016\uffc8\021\uffc8\024\uffc8\026\uffc8\030\uffc8" +
    "\032\uffc8\035\uffc8\041\uffc8\043\uffc8\045\uffc8\047\uffc8\050" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\067" +
    "\uffc8\070\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\077\uffc8\001\002\000\004\042\311\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\051\015\052\017\030" +
    "\020\047\027\060\031\056\036\031\037\041\040\037\042" +
    "\040\052\061\062\050\071\033\100\034\101\057\001\002" +
    "\000\004\042\301\001\002\000\106\002\uffc4\003\uffc4\016" +
    "\uffc4\021\uffc4\024\uffc4\026\uffc4\030\uffc4\032\uffc4\035\uffc4" +
    "\041\uffc4\043\uffc4\045\uffc4\047\uffc4\050\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\065\uffc4\067\uffc4\070\uffc4\072" +
    "\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\001\002" +
    "\000\004\100\245\001\002\000\004\042\237\001\002\000" +
    "\004\042\220\001\002\000\004\042\207\001\002\000\106" +
    "\002\uffc6\003\uffc6\016\uffc6\021\uffc6\024\uffc6\026\uffc6\030" +
    "\uffc6\032\uffc6\035\uffc6\041\uffc6\043\uffc6\045\uffc6\047\uffc6" +
    "\050\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6" +
    "\067\uffc6\070\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076" +
    "\uffc6\077\uffc6\001\002\000\004\042\134\001\002\000\050" +
    "\004\054\005\027\006\055\013\053\014\051\015\052\017" +
    "\030\020\047\027\060\031\056\036\031\037\041\040\037" +
    "\042\040\052\061\062\050\071\033\100\034\101\057\001" +
    "\002\000\054\032\073\052\104\053\101\054\105\055\106" +
    "\056\102\057\072\060\063\061\066\062\077\063\075\064" +
    "\071\065\107\067\065\070\070\072\074\073\100\074\067" +
    "\075\064\076\076\077\103\001\002\000\050\004\054\005" +
    "\027\006\055\013\053\014\051\015\052\017\030\020\047" +
    "\027\060\031\056\036\031\037\041\040\037\042\040\052" +
    "\061\062\050\071\033\100\034\101\057\001\002\000\050" +
    "\004\054\005\027\006\055\013\053\014\051\015\052\017" +
    "\030\020\047\027\060\031\056\036\031\037\041\040\037" +
    "\042\040\052\061\062\050\071\033\100\034\101\057\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\051" +
    "\015\052\017\030\020\047\027\060\031\056\036\031\037" +
    "\041\040\037\042\040\052\061\062\050\071\033\100\034" +
    "\101\057\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\051\015\052\017\030\020\047\027\060\031\056" +
    "\036\031\037\041\040\037\042\040\052\061\062\050\071" +
    "\033\100\034\101\057\001\002\000\050\004\054\005\027" +
    "\006\055\013\053\014\051\015\052\017\030\020\047\027" +
    "\060\031\056\036\031\037\041\040\037\042\040\052\061" +
    "\062\050\071\033\100\034\101\057\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\051\015\052\017\030" +
    "\020\047\027\060\031\056\036\031\037\041\040\037\042" +
    "\040\052\061\062\050\071\033\100\034\101\057\001\002" +
    "\000\050\004\054\005\027\006\055\013\053\014\051\015" +
    "\052\017\030\020\047\027\060\031\056\036\031\037\041" +
    "\040\037\042\040\052\061\062\050\071\033\100\034\101" +
    "\057\001\002\000\050\004\054\005\027\006\055\013\053" +
    "\014\051\015\052\017\030\020\047\027\060\031\056\036" +
    "\031\037\041\040\037\042\040\052\061\062\050\071\033" +
    "\100\034\101\057\001\002\000\050\004\054\005\027\006" +
    "\055\013\053\014\051\015\052\017\030\020\047\027\060" +
    "\031\056\036\031\037\041\040\037\042\040\052\061\062" +
    "\050\071\033\100\034\101\057\001\002\000\050\004\054" +
    "\005\027\006\055\013\053\014\051\015\052\017\030\020" +
    "\047\027\060\031\056\036\031\037\041\040\037\042\040" +
    "\052\061\062\050\071\033\100\034\101\057\001\002\000" +
    "\050\004\054\005\027\006\055\013\053\014\051\015\052" +
    "\017\030\020\047\027\060\031\056\036\031\037\041\040" +
    "\037\042\040\052\061\062\050\071\033\100\034\101\057" +
    "\001\002\000\050\004\054\005\027\006\055\013\053\014" +
    "\051\015\052\017\030\020\047\027\060\031\056\036\031" +
    "\037\041\040\037\042\040\052\061\062\050\071\033\100" +
    "\034\101\057\001\002\000\050\004\054\005\027\006\055" +
    "\013\053\014\051\015\052\017\030\020\047\027\060\031" +
    "\056\036\031\037\041\040\037\042\040\052\061\062\050" +
    "\071\033\100\034\101\057\001\002\000\050\004\054\005" +
    "\027\006\055\013\053\014\051\015\052\017\030\020\047" +
    "\027\060\031\056\036\031\037\041\040\037\042\040\052" +
    "\061\062\050\071\033\100\034\101\057\001\002\000\050" +
    "\004\054\005\027\006\055\013\053\014\051\015\052\017" +
    "\030\020\047\027\060\031\056\036\031\037\041\040\037" +
    "\042\040\052\061\062\050\071\033\100\034\101\057\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\051" +
    "\015\052\017\030\020\047\027\060\031\056\036\031\037" +
    "\041\040\037\042\040\052\061\062\050\071\033\100\034" +
    "\101\057\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\051\015\052\017\030\020\047\027\060\031\056" +
    "\036\031\037\041\040\037\042\040\052\061\062\050\071" +
    "\033\100\034\101\057\001\002\000\106\002\uffb5\003\uffb5" +
    "\016\uffb5\021\uffb5\024\uffb5\026\uffb5\030\uffb5\032\uffb5\035" +
    "\uffb5\041\uffb5\043\uffb5\045\uffb5\047\uffb5\050\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\067\uffb5\070\uffb5" +
    "\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\051" +
    "\015\052\017\030\020\047\027\060\031\056\036\031\037" +
    "\041\040\037\042\040\052\061\062\050\071\033\100\034" +
    "\101\057\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\051\015\052\017\030\020\047\027\060\031\056" +
    "\036\031\037\041\040\037\042\040\052\061\062\050\071" +
    "\033\100\034\101\057\001\002\000\050\004\054\005\027" +
    "\006\055\013\053\014\051\015\052\017\030\020\047\027" +
    "\060\031\056\036\031\037\041\040\037\042\040\052\061" +
    "\062\050\071\033\100\034\101\057\001\002\000\106\002" +
    "\uffa9\003\uffa9\016\uffa9\021\uffa9\024\uffa9\026\uffa9\030\uffa9" +
    "\032\uffa9\035\uffa9\041\uffa9\043\uffa9\045\uffa9\047\uffa9\050" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\067" +
    "\065\070\070\072\074\073\100\074\uffa9\075\uffa9\076\uffa9" +
    "\077\uffa9\001\002\000\066\002\uffb1\003\uffb1\016\uffb1\021" +
    "\uffb1\024\uffb1\026\uffb1\030\uffb1\032\073\035\uffb1\041\uffb1" +
    "\043\uffb1\045\uffb1\047\uffb1\050\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\061\066\062\077\063\075\064\071\065\107\067\065" +
    "\070\070\072\074\073\100\001\002\000\102\002\uffb2\003" +
    "\uffb2\016\uffb2\021\uffb2\024\uffb2\026\uffb2\030\uffb2\032\073" +
    "\035\uffb2\041\uffb2\043\uffb2\045\uffb2\047\uffb2\050\uffb2\052" +
    "\uffb2\055\106\056\102\057\072\060\063\061\066\062\077" +
    "\063\075\064\071\065\107\067\065\070\070\072\074\073" +
    "\100\074\067\075\064\076\076\077\103\001\002\000\066" +
    "\002\uff8a\003\uff8a\016\uff8a\021\uff8a\024\uff8a\026\uff8a\030" +
    "\uff8a\032\073\035\uff8a\041\uff8a\043\uff8a\045\uff8a\047\uff8a" +
    "\050\uff8a\052\uff8a\053\uff8a\054\uff8a\061\066\062\077\063" +
    "\075\064\071\065\107\067\065\070\070\072\074\073\100" +
    "\001\002\000\066\002\uffb0\003\uffb0\016\uffb0\021\uffb0\024" +
    "\uffb0\026\uffb0\030\uffb0\032\073\035\uffb0\041\uffb0\043\uffb0" +
    "\045\uffb0\047\uffb0\050\uffb0\052\uffb0\053\uffb0\054\uffb0\061" +
    "\066\062\077\063\075\064\071\065\107\067\065\070\070" +
    "\072\074\073\100\001\002\000\102\002\uffb3\003\uffb3\016" +
    "\uffb3\021\uffb3\024\uffb3\026\uffb3\030\uffb3\032\073\035\uffb3" +
    "\041\uffb3\043\uffb3\045\uffb3\047\uffb3\050\uffb3\052\uffb3\055" +
    "\106\056\102\057\072\060\063\061\066\062\077\063\075" +
    "\064\071\065\107\067\065\070\070\072\074\073\100\074" +
    "\067\075\064\076\076\077\103\001\002\000\106\002\uffa4" +
    "\003\uffa4\016\uffa4\021\uffa4\024\uffa4\026\uffa4\030\uffa4\032" +
    "\uffa4\035\uffa4\041\uffa4\043\uffa4\045\uffa4\047\uffa4\050\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\067\065" +
    "\070\070\072\074\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077" +
    "\uffa4\001\002\000\106\002\uffac\003\uffac\016\uffac\021\uffac" +
    "\024\uffac\026\uffac\030\uffac\032\073\035\uffac\041\uffac\043" +
    "\uffac\045\uffac\047\uffac\050\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063" +
    "\075\064\071\065\107\067\065\070\070\072\074\073\100" +
    "\074\uffac\075\uffac\076\uffac\077\uffac\001\002\000\066\002" +
    "\uff8b\003\uff8b\016\uff8b\021\uff8b\024\uff8b\026\uff8b\030\uff8b" +
    "\032\073\035\uff8b\041\uff8b\043\uff8b\045\uff8b\047\uff8b\050" +
    "\uff8b\052\uff8b\053\uff8b\054\uff8b\061\066\062\077\063\075" +
    "\064\071\065\107\067\065\070\070\072\074\073\100\001" +
    "\002\000\106\002\uffab\003\uffab\016\uffab\021\uffab\024\uffab" +
    "\026\uffab\030\uffab\032\uffab\035\uffab\041\uffab\043\uffab\045" +
    "\uffab\047\uffab\050\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064" +
    "\uffab\065\107\067\065\070\070\072\074\073\100\074\uffab" +
    "\075\uffab\076\uffab\077\uffab\001\002\000\106\002\uffa5\003" +
    "\uffa5\016\uffa5\021\uffa5\024\uffa5\026\uffa5\030\uffa5\032\uffa5" +
    "\035\uffa5\041\uffa5\043\uffa5\045\uffa5\047\uffa5\050\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\067\065\070" +
    "\070\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5" +
    "\001\002\000\106\002\uffa8\003\uffa8\016\uffa8\021\uffa8\024" +
    "\uffa8\026\uffa8\030\uffa8\032\uffa8\035\uffa8\041\uffa8\043\uffa8" +
    "\045\uffa8\047\uffa8\050\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\065\107\067\065\070\070\072\074\073\100\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\001\002\000\066\002\uffaf" +
    "\003\uffaf\016\uffaf\021\uffaf\024\uffaf\026\uffaf\030\uffaf\032" +
    "\073\035\uffaf\041\uffaf\043\uffaf\045\uffaf\047\uffaf\050\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\061\066\062\077\063\075\064" +
    "\071\065\107\067\065\070\070\072\074\073\100\001\002" +
    "\000\106\002\uffaa\003\uffaa\016\uffaa\021\uffaa\024\uffaa\026" +
    "\uffaa\030\uffaa\032\uffaa\035\uffaa\041\uffaa\043\uffaa\045\uffaa" +
    "\047\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\107\067\065\070\070\072\074\073\100\074\uffaa\075" +
    "\uffaa\076\uffaa\077\uffaa\001\002\000\106\002\uffa6\003\uffa6" +
    "\016\uffa6\021\uffa6\024\uffa6\026\uffa6\030\uffa6\032\uffa6\035" +
    "\uffa6\041\uffa6\043\uffa6\045\uffa6\047\uffa6\050\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\067\065\070\uffa6" +
    "\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\001" +
    "\002\000\066\002\uff8d\003\uff8d\016\uff8d\021\uff8d\024\uff8d" +
    "\026\uff8d\030\uff8d\032\073\035\uff8d\041\uff8d\043\uff8d\045" +
    "\uff8d\047\uff8d\050\uff8d\052\uff8d\053\uff8d\054\uff8d\061\066" +
    "\062\077\063\075\064\071\065\107\067\065\070\070\072" +
    "\074\073\100\001\002\000\106\002\uffad\003\uffad\016\uffad" +
    "\021\uffad\024\uffad\026\uffad\030\uffad\032\073\035\uffad\041" +
    "\uffad\043\uffad\045\uffad\047\uffad\050\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\075\064\071\065\107\067\065\070\070\072\074" +
    "\073\100\074\uffad\075\uffad\076\uffad\077\uffad\001\002\000" +
    "\106\002\uffa7\003\uffa7\016\uffa7\021\uffa7\024\uffa7\026\uffa7" +
    "\030\uffa7\032\uffa7\035\uffa7\041\uffa7\043\uffa7\045\uffa7\047" +
    "\uffa7\050\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7" +
    "\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065" +
    "\uffa7\067\uffa7\070\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\001\002\000\066\002\uff8c\003\uff8c\016" +
    "\uff8c\021\uff8c\024\uff8c\026\uff8c\030\uff8c\032\073\035\uff8c" +
    "\041\uff8c\043\uff8c\045\uff8c\047\uff8c\050\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\061\066\062\077\063\075\064\071\065\107" +
    "\067\065\070\070\072\074\073\100\001\002\000\066\002" +
    "\uffae\003\uffae\016\uffae\021\uffae\024\uffae\026\uffae\030\uffae" +
    "\032\073\035\uffae\041\uffae\043\uffae\045\uffae\047\uffae\050" +
    "\uffae\052\uffae\053\uffae\054\uffae\061\066\062\077\063\075" +
    "\064\071\065\107\067\065\070\070\072\074\073\100\001" +
    "\002\000\052\004\054\005\027\006\055\013\053\014\051" +
    "\015\052\017\030\020\047\027\060\031\056\036\031\037" +
    "\041\040\037\042\040\044\135\052\061\062\050\071\033" +
    "\100\136\101\057\001\002\000\004\100\203\001\002\000" +
    "\060\032\uffc3\043\uffb7\044\150\050\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\067\uffc3\070\uffc3\072\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\077\uffc3\001\002\000\004\043" +
    "\147\001\002\000\056\032\uffcd\043\uffb8\050\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\067\uffcd\070\uffcd\072\uffcd" +
    "\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\001\002\000" +
    "\054\032\073\050\144\053\101\054\105\055\106\056\102" +
    "\057\072\060\063\061\066\062\077\063\075\064\071\065" +
    "\107\067\065\070\070\072\074\073\100\074\067\075\064" +
    "\076\076\077\103\001\002\000\004\043\143\001\002\000" +
    "\106\002\uff9c\003\uff9c\016\uff9c\021\uff9c\024\uff9c\026\uff9c" +
    "\030\uff9c\032\uff9c\035\uff9c\041\uff9c\043\uff9c\045\uff9c\047" +
    "\uff9c\050\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\067\uff9c\070\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c" +
    "\076\uff9c\077\uff9c\001\002\000\050\004\054\005\027\006" +
    "\055\013\053\014\051\015\052\017\030\020\047\027\060" +
    "\031\056\036\031\037\041\040\037\042\040\052\061\062" +
    "\050\071\033\100\034\101\057\001\002\000\054\032\073" +
    "\043\146\053\101\054\105\055\106\056\102\057\072\060" +
    "\063\061\066\062\077\063\075\064\071\065\107\067\065" +
    "\070\070\072\074\073\100\074\067\075\064\076\076\077" +
    "\103\001\002\000\106\002\uff9e\003\uff9e\016\uff9e\021\uff9e" +
    "\024\uff9e\026\uff9e\030\uff9e\032\uff9e\035\uff9e\041\uff9e\043" +
    "\uff9e\045\uff9e\047\uff9e\050\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\067\uff9e\070\uff9e\072\uff9e\073\uff9e" +
    "\074\uff9e\075\uff9e\076\uff9e\077\uff9e\001\002\000\106\002" +
    "\uff9d\003\uff9d\016\uff9d\021\uff9d\024\uff9d\026\uff9d\030\uff9d" +
    "\032\uff9d\035\uff9d\041\uff9d\043\uff9d\045\uff9d\047\uff9d\050" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\067" +
    "\uff9d\070\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d" +
    "\077\uff9d\001\002\000\052\004\054\005\027\006\055\013" +
    "\053\014\051\015\052\017\030\020\047\027\060\031\056" +
    "\036\031\037\041\040\037\042\152\047\154\052\061\062" +
    "\050\071\033\100\034\101\057\001\002\000\006\045\uffba" +
    "\050\176\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\051\015\052\017\030\020\047\027\060\031\056" +
    "\036\031\037\041\040\037\042\040\052\061\062\050\071" +
    "\033\100\034\101\057\001\002\000\060\032\073\045\uffbc" +
    "\047\163\050\uffbc\053\101\054\105\055\106\056\102\057" +
    "\072\060\063\061\066\062\077\063\075\064\071\065\107" +
    "\067\065\070\070\072\074\073\100\074\067\075\064\076" +
    "\076\077\103\001\002\000\054\004\054\005\027\006\055" +
    "\013\053\014\051\015\052\017\030\020\047\027\060\031" +
    "\056\036\031\037\041\040\037\042\040\045\uffc0\050\uffc0" +
    "\052\061\062\050\071\033\100\034\101\057\001\002\000" +
    "\004\045\156\001\002\000\110\002\uffc2\003\uffc2\016\uffc2" +
    "\021\uffc2\024\uffc2\026\uffc2\030\uffc2\032\uffc2\035\uffc2\041" +
    "\uffc2\043\uffc2\044\157\045\uffc2\047\uffc2\050\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\067\uffc2\070\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\001" +
    "\002\000\052\004\054\005\027\006\055\013\053\014\051" +
    "\015\052\017\030\020\047\027\060\031\056\036\031\037" +
    "\041\040\037\042\152\047\154\052\061\062\050\071\033" +
    "\100\034\101\057\001\002\000\004\045\161\001\002\000" +
    "\106\002\uffc1\003\uffc1\016\uffc1\021\uffc1\024\uffc1\026\uffc1" +
    "\030\uffc1\032\uffc1\035\uffc1\041\uffc1\043\uffc1\045\uffc1\047" +
    "\uffc1\050\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065" +
    "\uffc1\067\uffc1\070\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\001\002\000\056\032\073\045\uffbf\050" +
    "\uffbf\053\101\054\105\055\106\056\102\057\072\060\063" +
    "\061\066\062\077\063\075\064\071\065\107\067\065\070" +
    "\070\072\074\073\100\074\067\075\064\076\076\077\103" +
    "\001\002\000\054\004\054\005\027\006\055\013\053\014" +
    "\051\015\052\017\030\020\047\027\060\031\056\036\031" +
    "\037\041\040\037\042\040\045\uffbe\050\uffbe\052\061\062" +
    "\050\071\033\100\034\101\057\001\002\000\056\032\073" +
    "\045\uffbd\050\uffbd\053\101\054\105\055\106\056\102\057" +
    "\072\060\063\061\066\062\077\063\075\064\071\065\107" +
    "\067\065\070\070\072\074\073\100\074\067\075\064\076" +
    "\076\077\103\001\002\000\060\003\172\032\073\043\170" +
    "\050\171\053\101\054\105\055\106\056\102\057\072\060" +
    "\063\061\066\062\077\063\075\064\071\065\107\067\065" +
    "\070\070\072\074\073\100\074\067\075\064\076\076\077" +
    "\103\001\002\000\004\043\167\001\002\000\006\045\uffbb" +
    "\050\uffbb\001\002\000\106\002\uffcf\003\uffcf\016\uffcf\021" +
    "\uffcf\024\uffcf\026\uffcf\030\uffcf\032\uffcf\035\uffcf\041\uffcf" +
    "\043\uffcf\045\uffcf\047\uffcf\050\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\067\uffcf\070\uffcf\072\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\001\002\000\050" +
    "\004\054\005\027\006\055\013\053\014\051\015\052\017" +
    "\030\020\047\027\060\031\056\036\031\037\041\040\037" +
    "\042\040\052\061\062\050\071\033\100\034\101\057\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\051" +
    "\015\052\017\030\020\047\027\060\031\056\036\031\037" +
    "\041\040\037\042\040\052\061\062\050\071\033\100\034" +
    "\101\057\001\002\000\102\002\uffd2\003\172\016\uffd2\021" +
    "\uffd2\024\uffd2\026\uffd2\030\uffd2\032\073\035\uffd2\041\uffd2" +
    "\043\uffd2\045\uffd2\050\171\053\101\054\105\055\106\056" +
    "\102\057\072\060\063\061\066\062\077\063\075\064\071" +
    "\065\107\067\065\070\070\072\074\073\100\074\067\075" +
    "\064\076\076\077\103\001\002\000\026\002\uffd0\016\uffd0" +
    "\021\uffd0\024\uffd0\026\uffd0\030\uffd0\035\uffd0\041\uffd0\043" +
    "\uffd0\045\uffd0\001\002\000\026\002\uffd1\016\uffd1\021\uffd1" +
    "\024\uffd1\026\uffd1\030\uffd1\035\uffd1\041\uffd1\043\uffd1\045" +
    "\uffd1\001\002\000\052\004\054\005\027\006\055\013\053" +
    "\014\051\015\052\017\030\020\047\027\060\031\056\036" +
    "\031\037\041\040\037\042\152\047\154\052\061\062\050" +
    "\071\033\100\034\101\057\001\002\000\004\045\uffb9\001" +
    "\002\000\010\043\uffb8\045\uffb8\050\uffb8\001\002\000\004" +
    "\045\206\001\002\000\006\045\uff83\050\204\001\002\000" +
    "\012\043\uffb7\044\150\045\uffb7\050\uffb7\001\002\000\004" +
    "\100\203\001\002\000\004\045\uff82\001\002\000\006\043" +
    "\uff8e\050\uff8e\001\002\000\052\004\054\005\027\006\055" +
    "\013\053\014\051\015\052\017\030\020\047\027\060\031" +
    "\056\036\031\037\041\040\037\042\040\044\135\052\061" +
    "\062\050\071\033\100\136\101\057\001\002\000\004\043" +
    "\217\001\002\000\054\032\073\050\214\053\101\054\105" +
    "\055\106\056\102\057\072\060\063\061\066\062\077\063" +
    "\075\064\071\065\107\067\065\070\070\072\074\073\100" +
    "\074\067\075\064\076\076\077\103\001\002\000\004\043" +
    "\213\001\002\000\106\002\uffa0\003\uffa0\016\uffa0\021\uffa0" +
    "\024\uffa0\026\uffa0\030\uffa0\032\uffa0\035\uffa0\041\uffa0\043" +
    "\uffa0\045\uffa0\047\uffa0\050\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\067\uffa0\070\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\077\uffa0\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\051\015\052\017\030" +
    "\020\047\027\060\031\056\036\031\037\041\040\037\042" +
    "\040\052\061\062\050\071\033\100\034\101\057\001\002" +
    "\000\054\032\073\043\216\053\101\054\105\055\106\056" +
    "\102\057\072\060\063\061\066\062\077\063\075\064\071" +
    "\065\107\067\065\070\070\072\074\073\100\074\067\075" +
    "\064\076\076\077\103\001\002\000\106\002\uff9f\003\uff9f" +
    "\016\uff9f\021\uff9f\024\uff9f\026\uff9f\030\uff9f\032\uff9f\035" +
    "\uff9f\041\uff9f\043\uff9f\045\uff9f\047\uff9f\050\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\067\uff9f\070\uff9f" +
    "\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\001" +
    "\002\000\106\002\uffa1\003\uffa1\016\uffa1\021\uffa1\024\uffa1" +
    "\026\uffa1\030\uffa1\032\uffa1\035\uffa1\041\uffa1\043\uffa1\045" +
    "\uffa1\047\uffa1\050\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064" +
    "\uffa1\065\uffa1\067\uffa1\070\uffa1\072\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\076\uffa1\077\uffa1\001\002\000\050\004\054\005" +
    "\027\006\055\013\053\014\051\015\052\017\030\020\047" +
    "\027\060\031\056\036\031\037\041\040\037\042\040\052" +
    "\061\062\050\071\033\100\034\101\057\001\002\000\054" +
    "\032\073\050\222\053\101\054\105\055\106\056\102\057" +
    "\072\060\063\061\066\062\077\063\075\064\071\065\107" +
    "\067\065\070\070\072\074\073\100\074\067\075\064\076" +
    "\076\077\103\001\002\000\006\044\223\100\224\001\002" +
    "\000\050\004\054\005\027\006\055\013\053\014\051\015" +
    "\052\017\030\020\047\027\060\031\056\036\031\037\041" +
    "\040\037\042\040\052\061\062\050\071\033\100\034\101" +
    "\057\001\002\000\004\050\225\001\002\000\004\100\226" +
    "\001\002\000\004\043\227\001\002\000\106\002\uff9a\003" +
    "\uff9a\016\uff9a\021\uff9a\024\uff9a\026\uff9a\030\uff9a\032\uff9a" +
    "\035\uff9a\041\uff9a\043\uff9a\045\uff9a\047\uff9a\050\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\067\uff9a\070" +
    "\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a" +
    "\001\002\000\004\045\231\001\002\000\004\050\232\001" +
    "\002\000\004\044\233\001\002\000\050\004\054\005\027" +
    "\006\055\013\053\014\051\015\052\017\030\020\047\027" +
    "\060\031\056\036\031\037\041\040\037\042\040\052\061" +
    "\062\050\071\033\100\034\101\057\001\002\000\004\045" +
    "\235\001\002\000\004\043\236\001\002\000\106\002\uff98" +
    "\003\uff98\016\uff98\021\uff98\024\uff98\026\uff98\030\uff98\032" +
    "\uff98\035\uff98\041\uff98\043\uff98\045\uff98\047\uff98\050\uff98" +
    "\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\067\uff98" +
    "\070\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077" +
    "\uff98\001\002\000\006\044\135\100\203\001\002\000\004" +
    "\043\243\001\002\000\004\043\242\001\002\000\106\002" +
    "\uffa2\003\uffa2\016\uffa2\021\uffa2\024\uffa2\026\uffa2\030\uffa2" +
    "\032\uffa2\035\uffa2\041\uffa2\043\uffa2\045\uffa2\047\uffa2\050" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\067" +
    "\uffa2\070\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2" +
    "\077\uffa2\001\002\000\106\002\uffa3\003\uffa3\016\uffa3\021" +
    "\uffa3\024\uffa3\026\uffa3\030\uffa3\032\uffa3\035\uffa3\041\uffa3" +
    "\043\uffa3\045\uffa3\047\uffa3\050\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\063\uffa3\064\uffa3\065\uffa3\067\uffa3\070\uffa3\072\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\001\002\000\004" +
    "\051\250\001\002\000\006\050\246\051\uffdb\001\002\000" +
    "\004\100\245\001\002\000\004\051\uffda\001\002\000\012" +
    "\023\255\025\251\042\254\100\252\001\002\000\004\044" +
    "\271\001\002\000\034\002\uffd8\007\uffd8\016\uffd8\021\uffd8" +
    "\024\uffd8\026\uffd8\030\uffd8\035\uffd8\041\uffd8\043\uffd8\045" +
    "\uffd8\046\uffd8\050\uffd8\001\002\000\004\046\267\001\002" +
    "\000\012\023\255\025\251\042\254\100\252\001\002\000" +
    "\004\042\256\001\002\000\050\004\054\005\027\006\055" +
    "\013\053\014\051\015\052\017\030\020\047\027\060\031" +
    "\056\036\031\037\041\040\037\042\040\052\061\062\050" +
    "\071\033\100\034\101\057\001\002\000\062\003\172\032" +
    "\073\043\uffd2\047\262\050\171\053\101\054\105\055\106" +
    "\056\102\057\072\060\063\061\066\062\077\063\075\064" +
    "\071\065\107\067\065\070\070\072\074\073\100\074\067" +
    "\075\064\076\076\077\103\001\002\000\004\043\261\001" +
    "\002\000\034\002\uffd6\007\uffd6\016\uffd6\021\uffd6\024\uffd6" +
    "\026\uffd6\030\uffd6\035\uffd6\041\uffd6\043\uffd6\045\uffd6\046" +
    "\uffd6\050\uffd6\001\002\000\050\004\054\005\027\006\055" +
    "\013\053\014\051\015\052\017\030\020\047\027\060\031" +
    "\056\036\031\037\041\040\037\042\040\052\061\062\050" +
    "\071\033\100\034\101\057\001\002\000\054\032\073\043" +
    "\264\053\101\054\105\055\106\056\102\057\072\060\063" +
    "\061\066\062\077\063\075\064\071\065\107\067\065\070" +
    "\070\072\074\073\100\074\067\075\064\076\076\077\103" +
    "\001\002\000\034\002\uffd7\007\uffd7\016\uffd7\021\uffd7\024" +
    "\uffd7\026\uffd7\030\uffd7\035\uffd7\041\uffd7\043\uffd7\045\uffd7" +
    "\046\uffd7\050\uffd7\001\002\000\004\043\266\001\002\000" +
    "\034\002\uffd9\007\uffd9\016\uffd9\021\uffd9\024\uffd9\026\uffd9" +
    "\030\uffd9\035\uffd9\041\uffd9\043\uffd9\045\uffd9\046\uffd9\050" +
    "\uffd9\001\002\000\050\004\054\005\027\006\055\013\053" +
    "\014\051\015\052\017\030\020\047\027\060\031\056\036" +
    "\031\037\041\040\037\042\040\052\061\062\050\071\033" +
    "\100\034\101\057\001\002\000\106\002\uff89\003\uff89\016" +
    "\uff89\021\uff89\024\uff89\026\uff89\030\uff89\032\073\035\uff89" +
    "\041\uff89\043\uff89\045\uff89\047\uff89\050\uff89\052\uff89\053" +
    "\101\054\105\055\106\056\102\057\072\060\063\061\066" +
    "\062\077\063\075\064\071\065\107\067\065\070\070\072" +
    "\074\073\100\074\067\075\064\076\076\077\103\001\002" +
    "\000\012\023\255\025\251\042\254\100\252\001\002\000" +
    "\006\045\274\050\275\001\002\000\006\045\uffd4\050\uffd4" +
    "\001\002\000\004\034\277\001\002\000\012\023\255\025" +
    "\251\042\254\100\252\001\002\000\006\045\uffd3\050\uffd3" +
    "\001\002\000\012\023\255\025\251\042\254\100\252\001" +
    "\002\000\034\002\uffd5\007\uffd5\016\uffd5\021\uffd5\024\uffd5" +
    "\026\uffd5\030\uffd5\035\uffd5\041\uffd5\043\uffd5\045\uffd5\046" +
    "\uffd5\050\uffd5\001\002\000\050\004\054\005\027\006\055" +
    "\013\053\014\051\015\052\017\030\020\047\027\060\031" +
    "\056\036\031\037\041\040\037\042\040\052\061\062\050" +
    "\071\033\100\034\101\057\001\002\000\054\032\073\050" +
    "\303\053\101\054\105\055\106\056\102\057\072\060\063" +
    "\061\066\062\077\063\075\064\071\065\107\067\065\070" +
    "\070\072\074\073\100\074\067\075\064\076\076\077\103" +
    "\001\002\000\050\004\054\005\027\006\055\013\053\014" +
    "\051\015\052\017\030\020\047\027\060\031\056\036\031" +
    "\037\041\040\037\042\040\052\061\062\050\071\033\100" +
    "\034\101\057\001\002\000\054\032\073\050\305\053\101" +
    "\054\105\055\106\056\102\057\072\060\063\061\066\062" +
    "\077\063\075\064\071\065\107\067\065\070\070\072\074" +
    "\073\100\074\067\075\064\076\076\077\103\001\002\000" +
    "\050\004\054\005\027\006\055\013\053\014\051\015\052" +
    "\017\030\020\047\027\060\031\056\036\031\037\041\040" +
    "\037\042\040\052\061\062\050\071\033\100\034\101\057" +
    "\001\002\000\054\032\073\043\307\053\101\054\105\055" +
    "\106\056\102\057\072\060\063\061\066\062\077\063\075" +
    "\064\071\065\107\067\065\070\070\072\074\073\100\074" +
    "\067\075\064\076\076\077\103\001\002\000\106\002\uff9b" +
    "\003\uff9b\016\uff9b\021\uff9b\024\uff9b\026\uff9b\030\uff9b\032" +
    "\uff9b\035\uff9b\041\uff9b\043\uff9b\045\uff9b\047\uff9b\050\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\067\uff9b" +
    "\070\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077" +
    "\uff9b\001\002\000\106\002\uffb6\003\uffb6\016\uffb6\021\uffb6" +
    "\024\uffb6\026\uffb6\030\uffb6\032\uffb6\035\uffb6\041\uffb6\043" +
    "\uffb6\045\uffb6\047\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\067\065\070\070\072\074\073\100" +
    "\074\uffb6\075\uffb6\076\uffb6\077\uffb6\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\051\015\052\017\030" +
    "\020\047\027\060\031\056\036\031\037\041\040\037\042" +
    "\040\052\061\062\050\071\033\100\034\101\057\001\002" +
    "\000\054\032\073\050\313\053\101\054\105\055\106\056" +
    "\102\057\072\060\063\061\066\062\077\063\075\064\071" +
    "\065\107\067\065\070\070\072\074\073\100\074\067\075" +
    "\064\076\076\077\103\001\002\000\006\044\317\100\316" +
    "\001\002\000\004\050\346\001\002\000\004\050\340\001" +
    "\002\000\004\050\331\001\002\000\010\062\321\100\203" +
    "\101\320\001\002\000\006\045\uff81\050\327\001\002\000" +
    "\004\101\324\001\002\000\004\045\323\001\002\000\030" +
    "\002\uff7d\016\uff7d\021\uff7d\024\uff7d\026\uff7d\030\uff7d\035" +
    "\uff7d\041\uff7d\043\uff7d\045\uff7d\050\uff7d\001\002\000\006" +
    "\045\uff80\050\325\001\002\000\006\062\321\101\320\001" +
    "\002\000\004\045\uff7e\001\002\000\006\062\321\101\320" +
    "\001\002\000\004\045\uff7f\001\002\000\006\044\317\100" +
    "\334\001\002\000\004\043\337\001\002\000\004\043\336" +
    "\001\002\000\004\043\335\001\002\000\106\002\uff92\003" +
    "\uff92\016\uff92\021\uff92\024\uff92\026\uff92\030\uff92\032\uff92" +
    "\035\uff92\041\uff92\043\uff92\045\uff92\047\uff92\050\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92" +
    "\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\067\uff92\070" +
    "\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92" +
    "\001\002\000\106\002\uff96\003\uff96\016\uff96\021\uff96\024" +
    "\uff96\026\uff96\030\uff96\032\uff96\035\uff96\041\uff96\043\uff96" +
    "\045\uff96\047\uff96\050\uff96\052\uff96\053\uff96\054\uff96\055" +
    "\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\067\uff96\070\uff96\072\uff96\073\uff96\074" +
    "\uff96\075\uff96\076\uff96\077\uff96\001\002\000\106\002\uff95" +
    "\003\uff95\016\uff95\021\uff95\024\uff95\026\uff95\030\uff95\032" +
    "\uff95\035\uff95\041\uff95\043\uff95\045\uff95\047\uff95\050\uff95" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\067\uff95" +
    "\070\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95\077" +
    "\uff95\001\002\000\006\044\342\100\343\001\002\000\004" +
    "\043\345\001\002\000\006\062\321\101\320\001\002\000" +
    "\004\043\344\001\002\000\106\002\uff94\003\uff94\016\uff94" +
    "\021\uff94\024\uff94\026\uff94\030\uff94\032\uff94\035\uff94\041" +
    "\uff94\043\uff94\045\uff94\047\uff94\050\uff94\052\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\064\uff94\065\uff94\067\uff94\070\uff94\072\uff94" +
    "\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94\001\002\000" +
    "\106\002\uff91\003\uff91\016\uff91\021\uff91\024\uff91\026\uff91" +
    "\030\uff91\032\uff91\035\uff91\041\uff91\043\uff91\045\uff91\047" +
    "\uff91\050\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065" +
    "\uff91\067\uff91\070\uff91\072\uff91\073\uff91\074\uff91\075\uff91" +
    "\076\uff91\077\uff91\001\002\000\006\044\317\100\350\001" +
    "\002\000\004\043\354\001\002\000\004\043\353\001\002" +
    "\000\004\043\352\001\002\000\106\002\uff90\003\uff90\016" +
    "\uff90\021\uff90\024\uff90\026\uff90\030\uff90\032\uff90\035\uff90" +
    "\041\uff90\043\uff90\045\uff90\047\uff90\050\uff90\052\uff90\053" +
    "\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\067\uff90\070\uff90\072" +
    "\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\001\002" +
    "\000\106\002\uff93\003\uff93\016\uff93\021\uff93\024\uff93\026" +
    "\uff93\030\uff93\032\uff93\035\uff93\041\uff93\043\uff93\045\uff93" +
    "\047\uff93\050\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056" +
    "\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93" +
    "\065\uff93\067\uff93\070\uff93\072\uff93\073\uff93\074\uff93\075" +
    "\uff93\076\uff93\077\uff93\001\002\000\106\002\uff8f\003\uff8f" +
    "\016\uff8f\021\uff8f\024\uff8f\026\uff8f\030\uff8f\032\uff8f\035" +
    "\uff8f\041\uff8f\043\uff8f\045\uff8f\047\uff8f\050\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\067\uff8f\070\uff8f" +
    "\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\001" +
    "\002\000\006\044\135\100\203\001\002\000\004\050\373" +
    "\001\002\000\004\050\360\001\002\000\006\044\363\100" +
    "\203\001\002\000\004\043\372\001\002\000\004\043\371" +
    "\001\002\000\004\044\342\001\002\000\006\045\uff7c\050" +
    "\367\001\002\000\004\045\366\001\002\000\024\002\uff7a" +
    "\016\uff7a\021\uff7a\024\uff7a\026\uff7a\030\uff7a\035\uff7a\041" +
    "\uff7a\043\uff7a\001\002\000\004\044\342\001\002\000\004" +
    "\045\uff7b\001\002\000\106\002\uff84\003\uff84\016\uff84\021" +
    "\uff84\024\uff84\026\uff84\030\uff84\032\uff84\035\uff84\041\uff84" +
    "\043\uff84\045\uff84\047\uff84\050\uff84\052\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84" +
    "\063\uff84\064\uff84\065\uff84\067\uff84\070\uff84\072\uff84\073" +
    "\uff84\074\uff84\075\uff84\076\uff84\077\uff84\001\002\000\106" +
    "\002\uff85\003\uff85\016\uff85\021\uff85\024\uff85\026\uff85\030" +
    "\uff85\032\uff85\035\uff85\041\uff85\043\uff85\045\uff85\047\uff85" +
    "\050\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057" +
    "\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85" +
    "\067\uff85\070\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076" +
    "\uff85\077\uff85\001\002\000\004\100\203\001\002\000\004" +
    "\043\375\001\002\000\106\002\uff86\003\uff86\016\uff86\021" +
    "\uff86\024\uff86\026\uff86\030\uff86\032\uff86\035\uff86\041\uff86" +
    "\043\uff86\045\uff86\047\uff86\050\uff86\052\uff86\053\uff86\054" +
    "\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86" +
    "\063\uff86\064\uff86\065\uff86\067\uff86\070\uff86\072\uff86\073" +
    "\uff86\074\uff86\075\uff86\076\uff86\077\uff86\001\002\000\054" +
    "\032\073\043\170\053\101\054\105\055\106\056\102\057" +
    "\072\060\063\061\066\062\077\063\075\064\071\065\107" +
    "\067\065\070\070\072\074\073\100\074\067\075\064\076" +
    "\076\077\103\001\002\000\106\002\uffb4\003\uffb4\016\uffb4" +
    "\021\uffb4\024\uffb4\026\uffb4\030\uffb4\032\uffb4\035\uffb4\041" +
    "\uffb4\043\uffb4\045\uffb4\047\uffb4\050\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4\070\uffb4\072\uffb4" +
    "\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\001\002\000" +
    "\004\051\u0101\001\002\000\012\023\255\025\251\042\254" +
    "\100\252\001\002\000\004\046\u0103\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\051\015\052\017\030" +
    "\020\047\027\060\031\056\036\031\037\041\040\037\042" +
    "\040\052\061\062\050\071\033\100\034\101\057\001\002" +
    "\000\106\002\uff87\003\uff87\016\uff87\021\uff87\024\uff87\026" +
    "\uff87\030\uff87\032\073\035\uff87\041\uff87\043\uff87\045\uff87" +
    "\047\uff87\050\uff87\052\uff87\053\101\054\105\055\106\056" +
    "\102\057\072\060\063\061\066\062\077\063\075\064\071" +
    "\065\107\067\065\070\070\072\074\073\100\074\067\075" +
    "\064\076\076\077\103\001\002\000\004\051\u0106\001\002" +
    "\000\012\023\255\025\251\042\254\100\252\001\002\000" +
    "\004\046\u0108\001\002\000\050\004\054\005\027\006\055" +
    "\013\053\014\051\015\052\017\030\020\047\027\060\031" +
    "\056\036\031\037\041\040\037\042\040\052\061\062\050" +
    "\071\033\100\034\101\057\001\002\000\106\002\uff88\003" +
    "\uff88\016\uff88\021\uff88\024\uff88\026\uff88\030\uff88\032\073" +
    "\035\uff88\041\uff88\043\uff88\045\uff88\047\uff88\050\uff88\052" +
    "\uff88\053\101\054\105\055\106\056\102\057\072\060\063" +
    "\061\066\062\077\063\075\064\071\065\107\067\065\070" +
    "\070\072\074\073\100\074\067\075\064\076\076\077\103" +
    "\001\002\000\050\004\054\005\027\006\055\013\053\014" +
    "\051\015\052\017\030\020\047\027\060\031\056\036\031" +
    "\037\041\040\037\042\040\052\061\062\050\071\033\100" +
    "\034\101\057\001\002\000\054\032\073\050\u010c\053\101" +
    "\054\105\055\106\056\102\057\072\060\063\061\066\062" +
    "\077\063\075\064\071\065\107\067\065\070\070\072\074" +
    "\073\100\074\067\075\064\076\076\077\103\001\002\000" +
    "\006\044\u010e\100\u010d\001\002\000\004\050\u0116\001\002" +
    "\000\050\004\054\005\027\006\055\013\053\014\051\015" +
    "\052\017\030\020\047\027\060\031\056\036\031\037\041" +
    "\040\037\042\040\052\061\062\050\071\033\100\034\101" +
    "\057\001\002\000\004\045\u0110\001\002\000\004\050\u0111" +
    "\001\002\000\004\044\u0112\001\002\000\050\004\054\005" +
    "\027\006\055\013\053\014\051\015\052\017\030\020\047" +
    "\027\060\031\056\036\031\037\041\040\037\042\040\052" +
    "\061\062\050\071\033\100\034\101\057\001\002\000\004" +
    "\045\u0114\001\002\000\004\043\u0115\001\002\000\106\002" +
    "\uff97\003\uff97\016\uff97\021\uff97\024\uff97\026\uff97\030\uff97" +
    "\032\uff97\035\uff97\041\uff97\043\uff97\045\uff97\047\uff97\050" +
    "\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\067" +
    "\uff97\070\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97" +
    "\077\uff97\001\002\000\004\100\u0117\001\002\000\004\043" +
    "\u0118\001\002\000\106\002\uff99\003\uff99\016\uff99\021\uff99" +
    "\024\uff99\026\uff99\030\uff99\032\uff99\035\uff99\041\uff99\043" +
    "\uff99\045\uff99\047\uff99\050\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063" +
    "\uff99\064\uff99\065\uff99\067\uff99\070\uff99\072\uff99\073\uff99" +
    "\074\uff99\075\uff99\076\uff99\077\uff99\001\002\000\056\002" +
    "\uffeb\032\073\035\uffeb\053\101\054\105\055\106\056\102" +
    "\057\072\060\063\061\066\062\077\063\075\064\071\065" +
    "\107\067\065\070\070\072\074\073\100\074\067\075\064" +
    "\076\076\077\103\001\002\000\004\002\uffff\001\002\000" +
    "\050\004\054\005\027\006\055\013\053\014\051\015\052" +
    "\017\030\020\047\027\060\031\056\036\031\037\041\040" +
    "\037\042\040\052\061\062\050\071\033\100\034\101\057" +
    "\001\002\000\004\002\uffe8\001\002\000\010\007\u0120\010" +
    "\u011e\051\u011f\001\002\000\012\023\255\025\251\042\254" +
    "\100\252\001\002\000\012\023\255\025\251\042\254\100" +
    "\252\001\002\000\052\004\054\005\027\006\055\013\053" +
    "\014\051\015\052\017\030\020\047\027\060\031\056\036" +
    "\031\037\041\040\037\042\040\044\u0122\052\061\062\050" +
    "\071\033\100\034\101\057\001\002\000\022\002\uffee\016" +
    "\uffee\021\uffee\024\uffee\026\uffee\030\uffee\035\uffee\041\uffee" +
    "\001\002\000\010\044\342\062\321\101\320\001\002\000" +
    "\022\002\ufff0\016\ufff0\021\ufff0\024\ufff0\026\ufff0\030\ufff0" +
    "\035\ufff0\041\ufff0\001\002\000\072\002\ufff3\016\ufff3\021" +
    "\ufff3\024\ufff3\026\ufff3\030\ufff3\032\073\035\ufff3\041\ufff3" +
    "\053\101\054\105\055\106\056\102\057\072\060\063\061" +
    "\066\062\077\063\075\064\071\065\107\067\065\070\070" +
    "\072\074\073\100\074\067\075\064\076\076\077\103\001" +
    "\002\000\004\007\u0126\001\002\000\052\004\054\005\027" +
    "\006\055\013\053\014\051\015\052\017\030\020\047\027" +
    "\060\031\056\036\031\037\041\040\037\042\040\044\u0122" +
    "\052\061\062\050\071\033\100\034\101\057\001\002\000" +
    "\022\002\uffed\016\uffed\021\uffed\024\uffed\026\uffed\030\uffed" +
    "\035\uffed\041\uffed\001\002\000\022\002\uffef\016\uffef\021" +
    "\uffef\024\uffef\026\uffef\030\uffef\035\uffef\041\uffef\001\002" +
    "\000\072\002\ufff2\016\ufff2\021\ufff2\024\ufff2\026\ufff2\030" +
    "\ufff2\032\073\035\ufff2\041\ufff2\053\101\054\105\055\106" +
    "\056\102\057\072\060\063\061\066\062\077\063\075\064" +
    "\071\065\107\067\065\070\070\072\074\073\100\074\067" +
    "\075\064\076\076\077\103\001\002\000\022\002\ufff1\016" +
    "\ufff1\021\ufff1\024\ufff1\026\ufff1\030\ufff1\035\ufff1\041\ufff1" +
    "\001\002\000\022\002\uffec\016\uffec\021\uffec\024\uffec\026" +
    "\uffec\030\uffec\035\uffec\041\uffec\001\002\000\004\051\u0130" +
    "\001\002\000\024\002\uffe6\016\uffe6\021\uffe6\024\uffe6\026" +
    "\uffe6\030\uffe6\035\uffe6\041\uffe6\050\u012e\001\002\000\004" +
    "\100\245\001\002\000\022\002\uffe5\016\uffe5\021\uffe5\024" +
    "\uffe5\026\uffe5\030\uffe5\035\uffe5\041\uffe5\001\002\000\012" +
    "\023\255\025\251\042\254\100\252\001\002\000\024\002" +
    "\uffe2\016\uffe2\021\uffe2\024\uffe2\026\uffe2\030\uffe2\035\uffe2" +
    "\041\uffe2\050\uffe2\001\002\000\012\002\ufffb\026\ufffb\030" +
    "\ufffb\035\ufffb\001\002\000\022\002\ufff4\016\ufff4\021\ufff4" +
    "\024\ufff4\026\ufff4\030\ufff4\035\ufff4\041\ufff4\001\002\000" +
    "\022\002\ufff6\016\ufff6\021\ufff6\024\ufff6\026\ufff6\030\ufff6" +
    "\035\ufff6\041\ufff6\001\002\000\024\002\uffe4\016\uffe4\021" +
    "\uffe4\024\uffe4\026\uffe4\030\uffe4\035\uffe4\041\uffe4\050\u0144" +
    "\001\002\000\004\051\u0138\001\002\000\022\002\ufff5\016" +
    "\ufff5\021\ufff5\024\ufff5\026\ufff5\030\ufff5\035\ufff5\041\ufff5" +
    "\001\002\000\012\023\u013a\025\251\042\254\100\252\001" +
    "\002\000\024\002\uffe1\016\uffe1\021\uffe1\024\uffe1\026\uffe1" +
    "\030\uffe1\035\uffe1\041\uffe1\050\uffe1\001\002\000\026\002" +
    "\uffdc\016\uffdc\021\uffdc\024\uffdc\026\uffdc\030\uffdc\035\uffdc" +
    "\041\uffdc\042\u013b\050\uffdc\001\002\000\054\004\054\005" +
    "\027\006\055\013\053\014\051\015\052\017\030\020\047" +
    "\027\060\031\056\036\031\037\041\040\037\042\040\043" +
    "\u013c\047\u013e\052\061\062\050\071\033\100\034\101\057" +
    "\001\002\000\024\002\uffde\016\uffde\021\uffde\024\uffde\026" +
    "\uffde\030\uffde\035\uffde\041\uffde\050\uffde\001\002\000\062" +
    "\003\172\032\073\043\uffd2\047\u0142\050\171\053\101\054" +
    "\105\055\106\056\102\057\072\060\063\061\066\062\077" +
    "\063\075\064\071\065\107\067\065\070\070\072\074\073" +
    "\100\074\067\075\064\076\076\077\103\001\002\000\052" +
    "\004\054\005\027\006\055\013\053\014\051\015\052\017" +
    "\030\020\047\027\060\031\056\036\031\037\041\040\037" +
    "\042\040\043\u013f\052\061\062\050\071\033\100\034\101" +
    "\057\001\002\000\024\002\uffdd\016\uffdd\021\uffdd\024\uffdd" +
    "\026\uffdd\030\uffdd\035\uffdd\041\uffdd\050\uffdd\001\002\000" +
    "\054\032\073\043\u0141\053\101\054\105\055\106\056\102" +
    "\057\072\060\063\061\066\062\077\063\075\064\071\065" +
    "\107\067\065\070\070\072\074\073\100\074\067\075\064" +
    "\076\076\077\103\001\002\000\024\002\uffdf\016\uffdf\021" +
    "\uffdf\024\uffdf\026\uffdf\030\uffdf\035\uffdf\041\uffdf\050\uffdf" +
    "\001\002\000\052\004\054\005\027\006\055\013\053\014" +
    "\051\015\052\017\030\020\047\027\060\031\056\036\031" +
    "\037\041\040\037\042\040\043\u0143\052\061\062\050\071" +
    "\033\100\034\101\057\001\002\000\024\002\uffe0\016\uffe0" +
    "\021\uffe0\024\uffe0\026\uffe0\030\uffe0\035\uffe0\041\uffe0\050" +
    "\uffe0\001\002\000\004\100\245\001\002\000\022\002\uffe3" +
    "\016\uffe3\021\uffe3\024\uffe3\026\uffe3\030\uffe3\035\uffe3\041" +
    "\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\004\002\004\001\001\000\022\003\014\004" +
    "\021\005\017\006\012\011\011\012\007\013\016\014\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\u0133\016\u0136\017\u012c\020\u0134\021\u0135\001\001\000\002" +
    "\001\001\000\026\025\172\026\u0132\027\025\030\042\034" +
    "\035\035\041\036\045\037\034\040\044\042\031\001\001" +
    "\000\002\001\001\000\016\005\u0131\006\012\011\011\012" +
    "\007\013\016\014\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\u012a\017\u012c\021\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\022\001\001\000\004\010\u0119\001\001\000\024\025" +
    "\u0118\027\025\030\042\034\035\035\041\036\045\037\034" +
    "\040\044\042\031\001\001\000\024\025\043\027\025\030" +
    "\042\034\035\035\041\036\045\037\034\040\044\042\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u0104\001\001\000\004\021\377\001\001\000\002\001\001" +
    "\000\024\025\376\027\025\030\042\034\035\035\041\036" +
    "\045\037\034\040\044\042\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\025\375\027\025\030\042\034\035\035\041\036\045" +
    "\037\034\040\044\042\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\025" +
    "\307\027\025\030\042\034\035\035\041\036\045\037\034" +
    "\040\044\042\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\025\061\027\025\030\042\034\035\035\041" +
    "\036\045\037\034\040\044\042\031\001\001\000\002\001" +
    "\001\000\024\025\132\027\025\030\042\034\035\035\041" +
    "\036\045\037\034\040\044\042\031\001\001\000\024\025" +
    "\131\027\025\030\042\034\035\035\041\036\045\037\034" +
    "\040\044\042\031\001\001\000\024\025\130\027\025\030" +
    "\042\034\035\035\041\036\045\037\034\040\044\042\031" +
    "\001\001\000\024\025\127\027\025\030\042\034\035\035" +
    "\041\036\045\037\034\040\044\042\031\001\001\000\024" +
    "\025\126\027\025\030\042\034\035\035\041\036\045\037" +
    "\034\040\044\042\031\001\001\000\024\025\125\027\025" +
    "\030\042\034\035\035\041\036\045\037\034\040\044\042" +
    "\031\001\001\000\024\025\124\027\025\030\042\034\035" +
    "\035\041\036\045\037\034\040\044\042\031\001\001\000" +
    "\024\025\123\027\025\030\042\034\035\035\041\036\045" +
    "\037\034\040\044\042\031\001\001\000\024\025\122\027" +
    "\025\030\042\034\035\035\041\036\045\037\034\040\044" +
    "\042\031\001\001\000\024\025\121\027\025\030\042\034" +
    "\035\035\041\036\045\037\034\040\044\042\031\001\001" +
    "\000\024\025\120\027\025\030\042\034\035\035\041\036" +
    "\045\037\034\040\044\042\031\001\001\000\024\025\117" +
    "\027\025\030\042\034\035\035\041\036\045\037\034\040" +
    "\044\042\031\001\001\000\024\025\116\027\025\030\042" +
    "\034\035\035\041\036\045\037\034\040\044\042\031\001" +
    "\001\000\024\025\115\027\025\030\042\034\035\035\041" +
    "\036\045\037\034\040\044\042\031\001\001\000\024\025" +
    "\114\027\025\030\042\034\035\035\041\036\045\037\034" +
    "\040\044\042\031\001\001\000\024\025\113\027\025\030" +
    "\042\034\035\035\041\036\045\037\034\040\044\042\031" +
    "\001\001\000\024\025\112\027\025\030\042\034\035\035" +
    "\041\036\045\037\034\040\044\042\031\001\001\000\002" +
    "\001\001\000\024\025\111\027\025\030\042\034\035\035" +
    "\041\036\045\037\034\040\044\042\031\001\001\000\024" +
    "\025\110\027\025\030\042\034\035\035\041\036\045\037" +
    "\034\040\044\042\031\001\001\000\024\025\107\027\025" +
    "\030\042\034\035\035\041\036\045\037\034\040\044\042" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\025\140\027\025\030\137" +
    "\031\141\034\035\035\041\036\045\037\034\040\044\041" +
    "\136\042\031\001\001\000\010\030\177\031\201\043\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\025\144\027\025\030\042\034\035\035\041\036" +
    "\045\037\034\040\044\042\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\025\152\027" +
    "\025\030\042\032\150\033\154\034\035\035\041\036\045" +
    "\037\034\040\044\042\031\001\001\000\002\001\001\000" +
    "\026\025\164\026\165\027\025\030\042\034\035\035\041" +
    "\036\045\037\034\040\044\042\031\001\001\000\002\001" +
    "\001\000\024\025\161\027\025\030\042\034\035\035\041" +
    "\036\045\037\034\040\044\042\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\025\152\027\025\030\042" +
    "\032\150\033\157\034\035\035\041\036\045\037\034\040" +
    "\044\042\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\025\163\027\025\030\042\034" +
    "\035\035\041\036\045\037\034\040\044\042\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\172\026\174" +
    "\027\025\030\042\034\035\035\041\036\045\037\034\040" +
    "\044\042\031\001\001\000\026\025\172\026\173\027\025" +
    "\030\042\034\035\035\041\036\045\037\034\040\044\042" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\025\152\027\025\030\042\032\150\033" +
    "\176\034\035\035\041\036\045\037\034\040\044\042\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\177" +
    "\031\201\043\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\025\210\027\025\030\137\031\211\034\035" +
    "\035\041\036\045\037\034\040\044\041\207\042\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\025\214\027\025\030\042\034" +
    "\035\035\041\036\045\037\034\040\044\042\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\025\220\027\025\030\042\034\035\035\041\036\045" +
    "\037\034\040\044\042\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\025\172\026\227\027\025\030\042" +
    "\034\035\035\041\036\045\037\034\040\044\042\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\025\172\026\233\027\025\030\042" +
    "\034\035\035\041\036\045\037\034\040\044\042\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\177\031\237\041\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\246\001" +
    "\001\000\002\001\001\000\004\022\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\264\001\001\000\002\001\001\000\026\025\256\026\257" +
    "\027\025\030\042\034\035\035\041\036\045\037\034\040" +
    "\044\042\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\025\262\027\025\030\042\034" +
    "\035\035\041\036\045\037\034\040\044\042\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\025\267\027\025\030\042\034\035" +
    "\035\041\036\045\037\034\040\044\042\031\001\001\000" +
    "\002\001\001\000\006\022\272\023\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\275\001\001\000\002\001\001\000\004\022\277\001\001" +
    "\000\002\001\001\000\024\025\301\027\025\030\042\034" +
    "\035\035\041\036\045\037\034\040\044\042\031\001\001" +
    "\000\002\001\001\000\024\025\303\027\025\030\042\034" +
    "\035\035\041\036\045\037\034\040\044\042\031\001\001" +
    "\000\002\001\001\000\024\025\305\027\025\030\042\034" +
    "\035\035\041\036\045\037\034\040\044\042\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\025\311\027\025\030\042\034\035\035\041\036\045" +
    "\037\034\040\044\042\031\001\001\000\002\001\001\000" +
    "\006\041\314\046\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\177\031\201\043" +
    "\200\044\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\325\001\001\000\002\001\001\000\004\044\327" +
    "\001\001\000\002\001\001\000\006\041\332\046\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\340\001\001\000\002\001\001\000\004\044\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\350\046\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\177\031\355" +
    "\041\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\177\031\361\047\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\364\046\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\367\046\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\177\031\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0101\001\001" +
    "\000\002\001\001\000\024\025\u0103\027\025\030\042\034" +
    "\035\035\041\036\045\037\034\040\044\042\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0106\001" +
    "\001\000\002\001\001\000\024\025\u0108\027\025\030\042" +
    "\034\035\035\041\036\045\037\034\040\044\042\031\001" +
    "\001\000\002\001\001\000\024\025\u010a\027\025\030\042" +
    "\034\035\035\041\036\045\037\034\040\044\042\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\025\172\026\u010e\027\025\030\042\034\035\035" +
    "\041\036\045\037\034\040\044\042\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\025" +
    "\172\026\u0112\027\025\030\042\034\035\035\041\036\045" +
    "\037\034\040\044\042\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\025\172\026\u011b\027\025\030\042\034\035" +
    "\035\041\036\045\037\034\040\044\042\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0129\001\001" +
    "\000\004\022\u0124\001\001\000\030\025\u0123\027\025\030" +
    "\042\034\035\035\041\036\045\037\034\040\044\042\031" +
    "\046\u0122\047\u0120\001\001\000\002\001\001\000\010\044" +
    "\321\045\364\046\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\025\u0128\027\025\030" +
    "\042\034\035\035\041\036\045\037\034\040\044\042\031" +
    "\046\u0127\047\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\u012e\017" +
    "\u012c\021\u012b\001\001\000\002\001\001\000\004\022\u0130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\u0130\024\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\u013c\026\257" +
    "\027\025\030\042\034\035\035\041\036\045\037\034\040" +
    "\044\042\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\025\u013f\027\025\030\042\034\035\035\041\036" +
    "\045\037\034\040\044\042\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\025\262\027" +
    "\025\030\042\034\035\035\041\036\045\037\034\040\044" +
    "\042\031\001\001\000\002\001\001\000\010\015\u0144\017" +
    "\u012c\021\u012b\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EssencePrimeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EssencePrimeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EssencePrimeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	 public boolean hadErrorRecovery = false;
     public StringBuffer errorMessage = new StringBuffer("");

    /* The reason for the error is passed into the method in the
       String 'message'. */

    public void report_error(String message, Object info)  {

        StringBuffer m = new StringBuffer("Parse error:");


        if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                                m.append(" in line "+(s.left));
                if (s.right >= 0)
                        m.append(", column "+(s.right));
            }
            m.append(" : "+message);
        }
        else m.append(" "+message);
        //throw new Exception(m);
        errorMessage = m;
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)  {
        report_error(message, info);
        //System.exit(1);
    }
    
    public void setErrorRecovery(boolean on) {
    	hadErrorRecovery = on;
    	//System.out.println("Error recovery on?:"+hadErrorRecovery);
    }
   
   /* 
    public boolean hadErrorRecovery() {
    	if(this.action_obj!= null)
    		return this.action_obj.hadErrorRecovery;
    	else return false;
    }
    
    public StringBuffer getActionErrorMessage() {
    	if(action_obj != null)
			return this.action_obj.errorMessage;
		else return new StringBuffer("");
	}
	*/

	


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EssencePrimeParser$actions {



	public boolean hadErrorRecovery = false;
     public StringBuffer errorMessage = new StringBuffer("");

    /* The reason for the error is passed into the method in the
       String 'message'. */

    public void report_error(String message, Object info)  {

        StringBuffer m = new StringBuffer("Parse error:");


        if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                                m.append(" in line "+(s.left));
                if (s.right >= 0)
                        m.append(", column "+(s.right));
            }
        }
        m.append(" : "+message);
        //throw new Exception(m);
        errorMessage = m;
        System.err.println(m);
    }


	public String print_array_list (ArrayList<Domain> list) {
	
		StringBuffer s = new StringBuffer("");
			
		for(int i=0; i<list.size(); i++) {
			if(i>0) s.append(",");
			s.append(list.get(i));
		} 
	
		return s.toString();
	}


  private final EssencePrimeParser parser;

  /** Constructor */
  CUP$EssencePrimeParser$actions(EssencePrimeParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EssencePrimeParser$do_action(
    int                        CUP$EssencePrimeParser$act_num,
    java_cup.runtime.lr_parser CUP$EssencePrimeParser$parser,
    java.util.Stack            CUP$EssencePrimeParser$stack,
    int                        CUP$EssencePrimeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EssencePrimeParser$result;

      /* select the action based on the action number */
      switch (CUP$EssencePrimeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // constant_matrix ::= LBRACK constant_vector_list RBRACK 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		      
                      ArrayList<ArrayList<Integer>> vectorList = (ArrayList<ArrayList<Integer>>) list;     
                     ArrayList<Integer> vector0 =  vectorList.get(0);
                  	//System.out.println("");
                     
                     Integer[][] matrix = new Integer[vectorList.size()][vector0.size()];
                   
                     for(int i=0; i<vectorList.size(); i++) {
                     
                        ArrayList<Integer> vector = vectorList.get(i);
                        
                        if(vector.size() != vector0.size()) 
                           throw new Exception("Illegal constant array: every vector/row has to have the same amount of elements!");
                        
                        for(int j=0; j<vector.size(); j++)
                           matrix[i][j] = (Integer) vector.get(j);
                     
                     }
                     
                      RESULT = new ConstantMatrix(new String("hugsi"), matrix);
                    
                   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_matrix",37, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // constant_vector_list ::= constant_vector COMMA constant_vector_list 
            {
              Object RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object vector = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
                             ArrayList<ArrayList<Integer>> vectorList = (ArrayList<ArrayList<Integer>>) list;
                             vectorList.add(0,(ArrayList<Integer>) vector);
                             RESULT = vectorList;
                          
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector_list",35, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // constant_vector_list ::= constant_vector 
            {
              Object RESULT =null;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                             ArrayList<ArrayList<Integer>> vectorList = new ArrayList<ArrayList<Integer>>();
                             vectorList.add(0, (ArrayList<Integer>) int_list);
                             RESULT = vectorList; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector_list",35, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // constant_vector ::= LBRACK integer_list RBRACK 
            {
              Object RESULT =null;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object i_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		   
					   RESULT = i_list;
					
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector",36, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // integer_list ::= MINUS INTEGER COMMA integer_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((ArrayList<Integer>) int_list).add(0,(Integer) (i-2*i)); 
				    RESULT = int_list; 
				 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // integer_list ::= INTEGER COMMA integer_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((ArrayList<Integer>) int_list).add(0,(Integer) i); 
				    RESULT = int_list; 
				 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // integer_list ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ArrayList<Integer> list = new ArrayList<Integer>();
                    list.add(0,(Integer) (i-2*i));
                    RESULT = list;
                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // integer_list ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ArrayList<Integer> list = new ArrayList<Integer>();
				    list.add(0,(Integer) i);
				    RESULT = list;
                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // atom_list ::= atom_expression COMMA atom_list 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int a_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int a_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object a_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                  ((ArrayList<AtomExpression>) a_list).add(0,(AtomExpression) atom); 
				  RESULT = a_list; 
			   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // atom_list ::= atom_expression 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                  ArrayList<AtomExpression> list = new ArrayList<AtomExpression>();
				  list.add(0,(AtomExpression) atom);
				  RESULT = list; 
			    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // table_constraint ::= TABLE LPAREN variable_array COMMA atom_expression RPAREN 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
			           System.out.println("Parsing table");
			           RESULT = new TableConstraintNew( (Expression) va, 
			                                             (Expression) ca); 
			                                      
			        
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("table_constraint",32, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // table_constraint ::= TABLE LPAREN variable_array COMMA constant_matrix RPAREN 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
			            //System.out.println("Parsing the right thing");
			            //Expression vva = (Expression) va;
			            //System.out.println("Got the variable array:"+vva);
			            //Expression cca = (Expression) ca;
			            //System.out.println("Got the value array:"+cca);
			            RESULT = new TableConstraintNew( (Expression) va, 
			                                             (Expression) ca); 
			                                      
			        
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("table_constraint",32, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // table_constraint ::= TABLE LPAREN atom_expression COMMA atom_expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new TableConstraintNew( (Expression) e1,
					                                     (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("table_constraint",32, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // quantified_expression ::= SUM identifier_list COLON domain DOT expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			         	  RESULT = new QuantifiedSum((ArrayList<String>) id_list,
								                     (Domain) d, 
								                     (Expression) e); 
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantified_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // quantified_expression ::= FORALL identifier_list COLON domain DOT expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			         	  boolean isUniversal = true;
			         	  RESULT = new QuantifiedExpression(isUniversal, 
								                            (ArrayList<String>) id_list,
								                            (Domain) d, 
								                            (Expression) e); 
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantified_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // quantified_expression ::= EXISTS identifier_list COLON domain DOT expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			         	  boolean isUniversal = false;
			         	  RESULT = new QuantifiedExpression(isUniversal, 
								                            (ArrayList<String>) id_list,
								                            (Domain) d, 
								                            (Expression) e); 
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantified_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lex_expression ::= expression LEXGEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                        RESULT = new LexConstraint( (Expression) e1, 
                                                     Expression.LEX_GEQ, 
                                                    (Expression) e2); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lex_expression ::= expression LEXLEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                        RESULT = new LexConstraint( (Expression) e1, 
                                                     Expression.LEX_LEQ, 
                                                    (Expression) e2); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lex_expression ::= expression LEXGREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                        RESULT = new LexConstraint( (Expression) e1, 
                                                     Expression.LEX_GREATER, 
                                                    (Expression) e2); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lex_expression ::= expression LEXLESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                        RESULT = new LexConstraint( (Expression) e1, 
                                                     Expression.LEX_LESS, 
                                                    (Expression) e2); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variable_array ::= LBRACK atom_list RBRACK 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  
                    	RESULT = new VariableArray( (ArrayList<AtomExpression>) list);  
                    	
                    
                    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_array",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // global_constraint ::= GCC LPAREN expression COMMA constant_vector COMMA constant_vector RPAREN 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int capacitiesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int capacitiesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object capacities = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		               ArrayList<Integer> integers1 = (ArrayList<Integer>) values;
		               int[] ints1 = new int[integers1.size()];
		               for(int i=0; i<ints1.length; i++) {
		                  ints1[i] = integers1.get(i);
		               }
		               
		               ConstantVector constVector1 = new ConstantVector("hugsi1", ints1);
		               
		               ArrayList<Integer> integers2 = (ArrayList<Integer>) capacities;
		               int[] ints2 = new int[integers2.size()];
		               for(int i=0; i<ints2.length; i++) {
		                  ints2[i] = integers2.get(i);
		               }
		               
		               ConstantVector constVector2 = new ConstantVector("hugsi2", ints2);
		               
		               RESULT =  new GlobalCardinality( (Expression) vars,
		                                                constVector1,
		                                                constVector2);
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // global_constraint ::= GCC LPAREN expression COMMA constant_vector COMMA variable_array RPAREN 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int capacitiesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int capacitiesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object capacities = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		             
		               ArrayList<Integer> integers = (ArrayList<Integer>) values;
		               int[] ints = new int[integers.size()];
		               for(int i=0; i<ints.length; i++) {
		                  ints[i] = integers.get(i);
		               }
		               
		               ConstantVector constVector = new ConstantVector("hugsi", ints);
		             
		               RESULT =  new GlobalCardinality( (Expression) vars,
		                                                constVector, 
		                                                (VariableArray) capacities);
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // global_constraint ::= GCC LPAREN expression COMMA variable_array COMMA constant_vector RPAREN 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int capacitiesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int capacitiesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object capacities = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		             
		               ArrayList<Integer> integers = (ArrayList<Integer>) capacities;
		               int[] ints = new int[integers.size()];
		               for(int i=0; i<ints.length; i++) {
		                  ints[i] = integers.get(i);
		               }
		               
		               ConstantVector constVector = new ConstantVector("hugsi", ints);
		             
		               RESULT =  new GlobalCardinality( (Expression) vars,
		                                                (VariableArray) values,
		                                                constVector);
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // global_constraint ::= GCC LPAREN expression COMMA IDENTIFIER COMMA IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String values = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int capacitiesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int capacitiesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		String capacities = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		               RESULT =  new GlobalCardinality( (Expression) vars,
		                                                (String)  values,
		                                                (String) capacities);
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // global_constraint ::= GCC LPAREN expression COMMA constant_vector COMMA IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int capacitiesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int capacitiesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		String capacities = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		               
		               ArrayList<Integer> integers = (ArrayList<Integer>) values;
		               int[] ints = new int[integers.size()];
		               for(int i=0; i<ints.length; i++) {
		                  ints[i] = integers.get(i);
		               }
		               
		               ConstantVector constVector = new ConstantVector("hugsi", ints);         
		               
		               RESULT =  new GlobalCardinality( (Expression) vars,
		                                                constVector,
		                                                (String) capacities);
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // global_constraint ::= GCC LPAREN expression COMMA variable_array COMMA IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int capacitiesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int capacitiesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		String capacities = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		               RESULT =  new GlobalCardinality( (Expression) vars,
		                                                (VariableArray)  values,
		                                                (String) capacities);
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // global_constraint ::= GCC LPAREN expression COMMA IDENTIFIER COMMA constant_vector RPAREN 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String values = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int capacitiesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int capacitiesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object capacities = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		               ArrayList<Integer> integers = (ArrayList<Integer>) capacities;
		               int[] ints = new int[integers.size()];
		               for(int i=0; i<ints.length; i++) {
		                  ints[i] = integers.get(i);
		               }
		               
		               ConstantVector constVector = new ConstantVector("hugsi", ints);
		             
		             
		               RESULT =  new GlobalCardinality( (Expression) vars,
		                                                (String) values,
		                                                constVector);
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // global_constraint ::= GCC LPAREN expression COMMA IDENTIFIER COMMA variable_array RPAREN 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String values = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int capacitiesleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int capacitiesright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object capacities = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		               RESULT =  new GlobalCardinality( (Expression) vars,
		                                                (String) values,
		                                                (VariableArray) capacities);
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // global_constraint ::= ATLEAST LPAREN expression COMMA LBRACK expression_list RBRACK COMMA LBRACK expression_list RBRACK RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		Object list1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
					    boolean isAtmost = false;
		                RESULT = new Atmost((Expression) e, 
		                                     (ArrayList<Expression>) list1,
		                                     (ArrayList<Expression>) list2,
		                                      isAtmost 
		                                    );
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-11)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // global_constraint ::= ATMOST LPAREN expression COMMA LBRACK expression_list RBRACK COMMA LBRACK expression_list RBRACK RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		Object list1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
					    boolean isAtmost = true;
		                RESULT = new Atmost((Expression) e, 
		                                     (ArrayList<Expression>) list1,
		                                     (ArrayList<Expression>) list2,
		                                      isAtmost 
		                                    );
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-11)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // global_constraint ::= ATLEAST LPAREN expression COMMA IDENTIFIER COMMA IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int occleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int occright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String occ = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		                boolean isAtmost = false;
		                RESULT = new Atmost((Expression) e, 
		                                     (String) occ,
		                                     (String) val,
		                                      isAtmost 
		                                    );
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // global_constraint ::= ATMOST LPAREN expression COMMA IDENTIFIER COMMA IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int occleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int occright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String occ = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		                boolean isAtmost = true;
		                RESULT = new Atmost((Expression) e, 
		                                     (String) occ,
		                                     (String) val,
		                                      isAtmost 
		                                    );
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // global_constraint ::= ELEMENT LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new ElementConstraint( (Expression) e1,
	                									(Expression) e2,
	                									(Expression) e3);   
	                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // global_constraint ::= MAX LPAREN atom_expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
					  boolean isMaximum = true;
					  RESULT = new Minimum( (Expression) e,
					                         isMaximum ); 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // global_constraint ::= MAX LPAREN variable_array RPAREN 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
					  boolean isMaximum = true;
					  RESULT = new Minimum( (Expression) va,
					                         isMaximum ); 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // global_constraint ::= MAX LPAREN expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
				       boolean isMaximum = true;
				       RESULT = new BinaryMinimum( (Expression) e1, (Expression) e2, isMaximum);	 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // global_constraint ::= MIN LPAREN expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
				       boolean isMaximum = false;
				       RESULT = new BinaryMinimum( (Expression) e1, (Expression) e2, isMaximum);	 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // global_constraint ::= MIN LPAREN atom_expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
					  boolean isMaximum = false;
					  RESULT = new Minimum( (Expression) e,
					                         isMaximum ); 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // global_constraint ::= MIN LPAREN variable_array RPAREN 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
					  boolean isMaximum = false;
					  RESULT = new Minimum( (Expression) va,
					                         isMaximum ); 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // global_constraint ::= ALLDIFF LPAREN variable_array RPAREN 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new AllDifferent( (VariableArray) va); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // global_constraint ::= ALLDIFF LPAREN atom_expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new AllDifferent( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binary_expression ::= expression IFF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new CommutativeBinaryRelationalExpression( (Expression) e1, 
			                                                         Expression.IFF,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binary_expression ::= expression IF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.IF,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binary_expression ::= expression OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Disjunction( new Expression[] { (Expression) e1, (Expression) e2 }); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binary_expression ::= expression AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Conjunction( new Expression[] { (Expression) e1, (Expression) e2 }); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binary_expression ::= expression MODULO expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new NonCommutativeArithmeticBinaryExpression( (Expression) e1, 
			                                                           Expression.MOD, 
			                                                           (Expression) e2
			                                                         ); 
			                                          
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binary_expression ::= expression POWER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new NonCommutativeArithmeticBinaryExpression( (Expression) e1, 
			                                                           Expression.POWER, 
			                                                           (Expression) e2
			                                                         ); 
			                                          
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binary_expression ::= expression DIVISION expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new NonCommutativeArithmeticBinaryExpression( (Expression) e1, 
			                                                           Expression.DIV, 
			                                                           (Expression) e2
			                                                         ); 
			                                          
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binary_expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Multiplication (new Expression[] { (Expression) e1, (Expression) e2} 
			                                );
		     
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binary_expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Sum ( new Expression[] {(Expression) e1} ,
								  new Expression[] {(Expression) e2 } 
								 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binary_expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Sum ( new Expression[] { (Expression) e1, (Expression) e2 },
								  new Expression[] {} 
								 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binary_expression ::= expression GEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.GEQ,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binary_expression ::= expression GREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.GREATER,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binary_expression ::= expression LEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.LEQ,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binary_expression ::= expression LESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.LESS,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binary_expression ::= expression NEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new CommutativeBinaryRelationalExpression( (Expression) e1, 
			                                                         Expression.NEQ,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binary_expression ::= expression EQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new CommutativeBinaryRelationalExpression( (Expression) e1, 
			                                                         Expression.EQ,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary_expression ::= NOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Negation( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unary_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary_expression ::= BAR expression BAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new AbsoluteValue( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unary_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unary_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryMinus((Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unary_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atom_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new SimpleVariable(new String(id)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atom_expression ::= deref_expression 
            {
              Object RESULT =null;
		int derefleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int derefright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object deref = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = deref; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // index_list ::= index COMMA index_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object i_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                   ((ArrayList<Domain>) i_list).add(0, (Domain)  i); 
				     RESULT = i_list;  
				 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index_list",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // index_list ::= index 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                    ArrayList<Domain> e_list = new ArrayList<Domain>();	
				     e_list.add(0, (Domain) i); 
				     RESULT = e_list;   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index_list",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // index ::= LPAREN expression_list RPAREN 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		         RESULT = new SparseExpressionRange( (ArrayList<Expression>) e_list);
               
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // index ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new SingleExpressionRange( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // index ::= expression DOTDOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BoundedExpressionRange( (Expression) e1, (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // index ::= expression DOTDOT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  
                   boolean isLowerBound = true;
                   RESULT = new InfiniteDomain( (Expression) e, isLowerBound);
                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // index ::= DOTDOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                  boolean isLowerBound = false;
                  RESULT = new InfiniteDomain( (Expression) e, isLowerBound);
                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // index ::= DOTDOT 
            {
              Object RESULT =null;
		 RESULT = new InfiniteDomain(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // deref_expression ::= IDENTIFIER LBRACK index_list RBRACK LBRACK index_list RBRACK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int e_list1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int e_list1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object e_list1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int e_list2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_list2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  
               	        	 String errMessage = "Detected parse error around expression expression '"+id+
				   			"["+(print_array_list((ArrayList<Domain>)e_list1))+"]["
				   			       +(print_array_list((ArrayList<Domain>) e_list2))+"]'\nShould be written '"
				   			+id+"["+(print_array_list((ArrayList<Domain>)e_list1))+","+(print_array_list((ArrayList<Domain>) e_list2))+"]'.";
				   			
				   			
				  			errorMessage.append(errMessage);
				  			parser.errorMessage.append("\n"+errMessage);
				   			parser.hadErrorRecovery = true;
				   			//report_error(errMessage,e_list1);
				   			
				   			ArrayList<Domain> e_list = (ArrayList<Domain>) e_list1;
				   			ArrayList<Domain> e_list_rest = (ArrayList<Domain>) e_list2;
				   			
				   			for(int i=0; i<e_list_rest.size(); i++) {
				   				e_list.add(e_list_rest.remove(0));
				   			}
				   			
							RESULT = new SimpleArrayVariable(new String(id), 
							                                 (ArrayList<Domain>) e_list); 
							                                   
								                           
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("deref_expression",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // deref_expression ::= IDENTIFIER LBRACK index_list RBRACK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  
							RESULT = new SimpleArrayVariable(new String(id), 
							                                 (ArrayList<Domain>) e_list); 
							                                   
								                           
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("deref_expression",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atomic_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new SimpleVariable(new String(id)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atomic_expression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new RelationalAtomExpression(false); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atomic_expression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new RelationalAtomExpression(true); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atomic_expression ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				  RESULT = new ArithmeticAtomExpression(i); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= table_constraint 
            {
              Object RESULT =null;
		int tab_constraintleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int tab_constraintright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object tab_constraint = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = tab_constraint;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= lex_expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = le;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= quantified_expression 
            {
              Object RESULT =null;
		int qeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int qeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object qe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = qe; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= global_constraint 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = g; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= binary_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = be; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= unary_expression 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = ue; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= deref_expression 
            {
              Object RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = de; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= atomic_expression 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = ae; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = e; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression_list ::= expression error expression_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		
			       //((ArrayList<Expression>) e_list).add(0,(Expression) e); 
				   //RESULT = e_list;
				   String errMessage = "Detected parse error around the expression '"+e+
				   	"'\nMaybe missing comma after constraint?";
				   errorMessage.append(errMessage);
				   parser.errorMessage.append("\n"+errMessage);
				   parser.hadErrorRecovery = true;
				   //parser.setErrorRecovery(true);
				   //System.err.println(errMessage);
				   //parser.report_error(errMessage, e);
				   ((ArrayList<Expression>) e_list).add(0,(Expression) e); 
				   RESULT = e_list;
				   //throw new Exception("Parse error: "+errMessage);
			    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression_list ::= expression COMMA expression_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((ArrayList<Expression>) e_list).add(0,(Expression) e); 
				   RESULT = e_list;
				
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ArrayList<Expression> e_list = new ArrayList<Expression>();	
				   e_list.add(0,(Expression) e); 
				   RESULT = e_list; 
				
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // domain_list ::= domain_list COMMA domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		       ((ArrayList<Domain>) d_list).add( (Domain)  d); 
		       RESULT = d_list; 
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // domain_list ::= domain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		       ArrayList<Domain> list = new ArrayList<Domain>();
		      list.add((Domain)  d); 
		      RESULT = list; 
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // domain ::= MATRIX_INDEXED_BY LBRACK domain_list RBRACK OF domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
				RESULT = new ArrayDomain( (Domain) d,
				                          (ArrayList<Domain>) d_list) ;

              
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // domain ::= INT LPAREN expression_list RPAREN 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
            	RESULT = new SparseExpressionRange((ArrayList<Expression>) e_list);
            
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // domain ::= INT LPAREN expression DOTDOT expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
                RESULT = new BoundedExpressionRange( (Expression) e1,
                                                     (Expression) e2);
             
             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // domain ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 if(id.equals("bool") || id.equals("BOOL")) 
			     RESULT = new BoolDomain();
			     
	           else 
			     RESULT = new IdentifierDomain(new String(id) ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // domain ::= LPAREN domain RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = (Domain) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				       ((ArrayList<String>) id_list).add(0,new String(id)); 
				       RESULT = id_list; 
				   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 	
			           ArrayList<String> list = new ArrayList<String>();
				       list.add(0,new String(id));
				       RESULT = list; 
				   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // infinite_domain ::= INT 
            {
              Object RESULT =null;
		 RESULT = new InfiniteDomain(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // infinite_domain ::= INT LPAREN DOTDOT RPAREN 
            {
              Object RESULT =null;
		 RESULT = new InfiniteDomain(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // infinite_domain ::= INT LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = new InfiniteDomain();
                     
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // infinite_domain ::= INT LPAREN DOTDOT expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
                       boolean isLowerBound = false;
                        RESULT = new InfiniteDomain((Expression) e, isLowerBound); 
                   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // infinite_domain ::= INT LPAREN expression DOTDOT RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
                        boolean isLowerBound = true;
                        RESULT = new InfiniteDomain((Expression) e, isLowerBound); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // identifiers_with_infinite_domain ::= identifier_list COLON infinite_domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			   boolean isParameter = true; /* only parameters are allowed to have infinte domains*/
			   RESULT = new VariableDeclaration((ArrayList<String>) id_list,
										         (Domain) d,
										          isParameter);
             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifiers_with_infinite_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identifiers_with_domain ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				RESULT = new VariableDeclaration((ArrayList<String>) id_list,
										         (Domain) d);
			 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifiers_with_domain",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // infinite_variable_declaration_list ::= identifiers_with_infinite_domain COMMA variable_declaration_list 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int di_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int di_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		         ((ArrayList<VariableDeclaration>) di_list).add(0,(VariableDeclaration) di);  
			     RESULT = di_list; 
			 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_variable_declaration_list",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // infinite_variable_declaration_list ::= identifiers_with_infinite_domain 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			    ArrayList<VariableDeclaration> list = new ArrayList<VariableDeclaration>();
			    list.add( (VariableDeclaration) id);
			     RESULT = list;  
			  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_variable_declaration_list",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_declaration_list ::= identifiers_with_domain COMMA variable_declaration_list 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int di_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int di_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		         ((ArrayList<VariableDeclaration>) di_list).add(0,(VariableDeclaration) di);  
			     RESULT = di_list; 
			 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable_declaration_list ::= identifiers_with_domain 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			    ArrayList<VariableDeclaration> list = new ArrayList<VariableDeclaration>();
			    list.add( (VariableDeclaration) id);
			     RESULT = list;  
			  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constraint_block ::= 
            {
              Object RESULT =null;
		
		            RESULT = new ArrayList<Expression>(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // constraint_block ::= SUCH_THAT expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // objective ::= 
            {
              Object RESULT =null;
		    
			         RESULT = new Objective(); 
			       
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // objective ::= MINIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
 	                 boolean isMaximising = false;
			         RESULT = new Objective((Expression) e, isMaximising); 
			       
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // objective ::= MAXIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			         boolean isMaximising = true;
			         RESULT = new Objective((Expression) e, isMaximising); 
			       
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // find_block ::= FIND variable_declaration_list 
            {
              Object RESULT =null;
		int v_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int v_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object v_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
	          RESULT = v_list;
	       
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("find_block",10, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // letting_block ::= LETTING IDENTIFIER COLON domain BE constant_matrix 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int constant_matrixleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int constant_matrixright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object constant_matrix = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		  ConstantMatrix cm = (ConstantMatrix) constant_matrix;
		  cm.setArrayDomain((ArrayDomain) d);
		  cm.setArrayName(id);
		  RESULT = new ExpressionDefinition( (String) id,
		  		                              cm
		                                      /*new ConstantMatrix( (String) id,
		                                                          (Integer[][]) constant_matrix,
		                                                           (Domain) d
		                                                         )*/
		                                   );
		                                                          
		
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // letting_block ::= LETTING IDENTIFIER BE constant_matrix 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int constant_matrixleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int constant_matrixright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object constant_matrix = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		  ConstantMatrix cm = (ConstantMatrix) constant_matrix;
		  cm.setArrayName(id);
		  RESULT = new ExpressionDefinition( (String) id,
		                                     cm
		                                      /*new ConstantMatrix( (String) id,
		                                                          (Integer[][]) constant_matrix
		                                                         )
		                                                         */
		                                   );
		                                                          
		
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // letting_block ::= LETTING IDENTIFIER COLON domain BE constant_vector 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
	      ArrayList<Integer> i_list = (ArrayList<Integer>) cv;
	      Integer[] i_array = new Integer[i_list.size()];
	      for(int i=i_array.length-1; i>=0; i--)
	      	i_array[i] = i_list.remove(i);
	      
	      RESULT = new ExpressionDefinition( (String) id,
	                                          new ConstantVector( (String) id,
	                                                              i_array,
	                                                              (Domain) d)
	                                       );
	    
	    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // letting_block ::= LETTING IDENTIFIER BE constant_vector 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
	      ArrayList<Integer> i_list = (ArrayList<Integer>) cv;
	      Integer[] i_array = new Integer[i_list.size()];
	      for(int i=i_array.length-1; i>=0; i--)
	      	i_array[i] = i_list.remove(i);
	      
	      RESULT = new ExpressionDefinition( (String) id,
	                                          new ConstantVector( (String) id,
	                                                              i_array)
	                                       );
	    
	    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // letting_block ::= LETTING IDENTIFIER BE_DOMAIN domain 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		  RESULT = new DomainDefinition( (String) id,
					         (Domain) d);
		
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // letting_block ::= LETTING IDENTIFIER COLON domain BE expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		   RESULT = new ExpressionDefinition((String) id,
						      (Expression) e,
						      (Domain) d);
		
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // letting_block ::= LETTING IDENTIFIER BE expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		   RESULT = new ExpressionDefinition((String) id,
                                                      (Expression) e);

                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // where_block ::= WHERE expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		
			              RESULT = new ConstantRestriction((ArrayList<Expression>) e_list);  
		                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("where_block",8, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // given_block ::= GIVEN infinite_variable_declaration_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
		   		ArrayList<VariableDeclaration> parameters =(ArrayList<VariableDeclaration>) list;		   
		   		ArrayList<GeneralDeclaration> declarations = new ArrayList<GeneralDeclaration>();
		   		   
                for(int i=0; i<parameters.size(); i++) {
		      	    declarations.add(new ParameterDeclaration(parameters.get(i).getNames(),
		      	    										  parameters.get(i).getDomain()
		      	    										  )
		      	    				);
                }		       		   

		        RESULT = declarations; 

		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("given_block",7, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // given_block ::= GIVEN variable_declaration_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
		   		ArrayList<VariableDeclaration> parameters =(ArrayList<VariableDeclaration>) list;		   
		   		ArrayList<GeneralDeclaration> declarations = new ArrayList<GeneralDeclaration>();
		   		   
                for(int i=0; i<parameters.size(); i++) {
		      	    declarations.add(new ParameterDeclaration(parameters.get(i).getNames(),
		      	    										  parameters.get(i).getDomain()
		      	    										  )
		      	    	             );
                }		       		   

		        RESULT = declarations; 

		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("given_block",7, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= find_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =(ArrayList<GeneralDeclaration>)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= letting_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ArrayList<GeneralDeclaration> list = new ArrayList<GeneralDeclaration>();
		      list.add((GeneralDeclaration)  d);
		      RESULT = list;
		     
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= where_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		
		      ArrayList<GeneralDeclaration> list = new ArrayList<GeneralDeclaration>();
		      list.add((ConstantRestriction)  d);
		      RESULT = list; 
		     
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= given_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (ArrayList<GeneralDeclaration>) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_list ::= declaration declaration_list 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
					ArrayList<GeneralDeclaration> list1 = (ArrayList<GeneralDeclaration>) d1; 
					ArrayList<GeneralDeclaration> list2 = (ArrayList<GeneralDeclaration>) d2; 
					
					if(list1.size() > list2.size()) {
					   
					   for(int i=list2.size()-1; i>=0; i--) {
					   	   list1.add(0,list2.get(i));
					   }
					   RESULT = list1;	
					}
					
					else {
					
					   for(int i=list1.size()-1; i>=0; i--) {
					   	   list2.add(0,list1.get(i));
					   }
					   RESULT = list2;	
				    }
                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Object RESULT =null;
			  RESULT = new ArrayList<GeneralDeclaration>(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declarations objective constraint_block 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object expr_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		       RESULT = new EssencePrimeModel(
						   (ArrayList<GeneralDeclaration>) d_list,
						   (Objective)  obj,
						   (ArrayList<Expression>)expr_list 
                                               ); 
                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= essencemodel EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		RESULT = start_val;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EssencePrimeParser$parser.done_parsing();
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // essencemodel ::= HEADER body 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (EssencePrimeModel) b; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("essencemodel",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

