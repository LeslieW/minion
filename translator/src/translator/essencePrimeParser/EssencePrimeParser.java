
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 07 20:39:17 GMT 2007
//----------------------------------------------------

package translator.essencePrimeParser;

import translator.conjureEssenceSpecification.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 07 20:39:17 GMT 2007
  */
public class EssencePrimeParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EssencePrimeParser() {super();}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\011\004\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\011\000\002\016\005\000\002\017\007\000\002\017\007" +
    "\000\002\017\005\000\002\017\006\000\002\017\003\000" +
    "\002\020\005\000\002\021\003\000\002\021\005\000\002" +
    "\022\005\000\002\022\003\000\002\022\006\000\002\022" +
    "\010\000\002\023\003\000\002\023\005\000\002\024\003" +
    "\000\002\024\005\000\002\025\003\000\002\025\005\000" +
    "\002\027\003\000\002\027\005\000\002\026\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\006\000\002" +
    "\032\003\000\002\032\003\000\002\033\004\000\002\033" +
    "\005\000\002\033\004\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\036\006\000\002\036\006\000\002\036\006\000" +
    "\002\036\012\000\002\036\012\000\002\036\012\000\002" +
    "\036\012\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\037\006\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\005\000" +
    "\002\042\014\000\002\043\003\000\002\043\005\000\002" +
    "\044\003\000\002\044\005\000\002\045\005\000\002\046" +
    "\003\000\002\046\005\000\002\012\004\000\002\013\004" +
    "\000\002\047\003\000\002\047\005\000\002\050\005\000" +
    "\002\050\007\000\002\050\005\000\002\050\005\000\002" +
    "\051\006\000\002\014\004\000\002\052\003\000\002\052" +
    "\005\000\002\007\004\000\002\007\004\000\002\007\002" +
    "\000\002\010\004\000\002\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\021\004\001\002\000\022\002\ufffd\016" +
    "\016\020\007\023\021\025\ufffd\027\ufffd\033\ufffd\037\011" +
    "\001\002\000\004\002\006\001\002\000\004\002\000\001" +
    "\002\000\004\100\344\001\002\000\022\002\ufff9\016\ufff9" +
    "\020\ufff9\023\ufff9\025\ufff9\027\ufff9\033\ufff9\037\ufff9\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\052" +
    "\015\051\017\031\026\061\030\056\031\057\034\032\035" +
    "\041\036\037\040\040\052\062\062\050\071\034\100\035" +
    "\101\060\001\002\000\022\002\ufffc\016\016\020\007\023" +
    "\021\025\ufffc\027\ufffc\033\ufffc\037\011\001\002\000\022" +
    "\002\ufffa\016\ufffa\020\ufffa\023\ufffa\025\ufffa\027\ufffa\033" +
    "\ufffa\037\ufffa\001\002\000\022\002\ufff7\016\ufff7\020\ufff7" +
    "\023\ufff7\025\ufff7\027\ufff7\033\ufff7\037\ufff7\001\002\000" +
    "\004\002\001\001\002\000\004\100\202\001\002\000\022" +
    "\002\ufff8\016\ufff8\020\ufff8\023\ufff8\025\ufff8\027\ufff8\033" +
    "\ufff8\037\ufff8\001\002\000\012\002\ufffe\025\ufffe\027\ufffe" +
    "\033\ufffe\001\002\000\004\100\202\001\002\000\012\002" +
    "\uff94\025\025\027\024\033\uff94\001\002\000\006\002\uff92" +
    "\033\304\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\052\015\051\017\031\026\061\030\056\031\057" +
    "\034\032\035\041\036\037\040\040\052\062\062\050\071" +
    "\034\100\035\101\060\001\002\000\050\004\054\005\027" +
    "\006\055\013\053\014\052\015\051\017\031\026\061\030" +
    "\056\031\057\034\032\035\041\036\037\040\040\052\062" +
    "\062\050\071\034\100\035\101\060\001\002\000\104\002" +
    "\uffdb\016\uffdb\020\uffdb\023\uffdb\025\uffdb\027\uffdb\033\uffdb" +
    "\037\uffdb\041\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\067\uffdb\070" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\001\002\000\004\040\273\001\002\000\104\002\uffd9\016" +
    "\uffd9\020\uffd9\023\uffd9\025\uffd9\027\uffd9\033\uffd9\037\uffd9" +
    "\041\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\065\uffd9\067\uffd9\070\uffd9\072" +
    "\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\001\002" +
    "\000\004\100\uffad\001\002\000\004\100\uffac\001\002\000" +
    "\104\002\uffd4\016\uffd4\020\uffd4\023\uffd4\025\uffd4\027\uffd4" +
    "\033\uffd4\037\uffd4\041\uffd4\044\uffd4\045\uffd4\047\uffd4\050" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\067" +
    "\uffd4\070\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4" +
    "\077\uffd4\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\052\015\051\017\031\026\061\030\056\031\057" +
    "\034\032\035\041\036\037\040\040\052\062\062\050\071" +
    "\034\100\035\101\060\001\002\000\104\002\uffd0\016\uffd0" +
    "\020\uffd0\023\uffd0\025\uffd0\027\uffd0\033\uffd0\037\uffd0\041" +
    "\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\067\uffd0\070\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000" +
    "\104\002\uffd6\016\uffd6\020\uffd6\023\uffd6\025\uffd6\027\uffd6" +
    "\033\uffd6\037\uffd6\041\uffd6\044\uffd6\045\uffd6\047\uffd6\050" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\067" +
    "\uffd6\070\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6" +
    "\077\uffd6\001\002\000\104\002\uffd2\016\uffd2\020\uffd2\023" +
    "\uffd2\025\uffd2\027\uffd2\033\uffd2\037\uffd2\041\uffd2\044\uffd2" +
    "\045\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\067\uffd2\070\uffd2\072\uffd2\073\uffd2\074" +
    "\uffd2\075\uffd2\076\uffd2\077\uffd2\001\002\000\050\004\054" +
    "\005\027\006\055\013\053\014\052\015\051\017\031\026" +
    "\061\030\056\031\057\034\032\035\041\036\037\040\040" +
    "\052\062\062\050\071\034\100\035\101\060\001\002\000" +
    "\004\040\240\001\002\000\104\002\uffda\016\uffda\020\uffda" +
    "\023\uffda\025\uffda\027\uffda\033\uffda\037\uffda\041\uffda\044" +
    "\uffda\045\uffda\047\uffda\050\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\064\uffda\065\uffda\067\uffda\070\uffda\072\uffda\073\uffda" +
    "\074\uffda\075\uffda\076\uffda\077\uffda\001\002\000\056\002" +
    "\uff96\033\uff96\044\073\053\102\054\106\055\107\056\103" +
    "\057\074\060\064\061\067\062\100\063\076\064\072\065" +
    "\110\067\066\070\070\072\075\073\101\074\071\075\065" +
    "\076\077\077\104\001\002\000\104\002\uffd8\016\uffd8\020" +
    "\uffd8\023\uffd8\025\uffd8\027\uffd8\033\uffd8\037\uffd8\041\uffd8" +
    "\044\uffd8\045\uffd8\047\uffd8\050\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\067\uffd8\070\uffd8\072\uffd8\073" +
    "\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\001\002\000\104" +
    "\002\uffd7\016\uffd7\020\uffd7\023\uffd7\025\uffd7\027\uffd7\033" +
    "\uffd7\037\uffd7\041\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\067\uffd7" +
    "\070\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\001\002\000\104\002\uffd5\016\uffd5\020\uffd5\023\uffd5" +
    "\025\uffd5\027\uffd5\033\uffd5\037\uffd5\041\uffd5\044\uffd5\045" +
    "\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\067\uffd5\070\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\076\uffd5\077\uffd5\001\002\000\004\100\202\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\052" +
    "\015\051\017\031\026\061\030\056\031\057\034\032\035" +
    "\041\036\037\040\040\052\062\062\050\071\034\100\035" +
    "\101\060\001\002\000\104\002\uffd1\016\uffd1\020\uffd1\023" +
    "\uffd1\025\uffd1\027\uffd1\033\uffd1\037\uffd1\041\uffd1\044\uffd1" +
    "\045\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\065\uffd1\067\uffd1\070\uffd1\072\uffd1\073\uffd1\074" +
    "\uffd1\075\uffd1\076\uffd1\077\uffd1\001\002\000\004\040\170" +
    "\001\002\000\004\100\uffae\001\002\000\004\040\165\001" +
    "\002\000\004\040\156\001\002\000\004\040\153\001\002" +
    "\000\004\040\144\001\002\000\104\002\uffd3\016\uffd3\020" +
    "\uffd3\023\uffd3\025\uffd3\027\uffd3\033\uffd3\037\uffd3\041\uffd3" +
    "\044\uffd3\045\uffd3\047\uffd3\050\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\067\uffd3\070\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\001\002\000\004" +
    "\040\141\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\052\015\051\017\031\026\061\030\056\031\057" +
    "\034\032\035\041\036\037\040\040\052\062\062\050\071" +
    "\034\100\035\101\060\001\002\000\054\044\073\052\105" +
    "\053\102\054\106\055\107\056\103\057\074\060\064\061" +
    "\067\062\100\063\076\064\072\065\110\067\066\070\070" +
    "\072\075\073\101\074\071\075\065\076\077\077\104\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\052" +
    "\015\051\017\031\026\061\030\056\031\057\034\032\035" +
    "\041\036\037\040\040\052\062\062\050\071\034\100\035" +
    "\101\060\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\052\015\051\017\031\026\061\030\056\031\057" +
    "\034\032\035\041\036\037\040\040\052\062\062\050\071" +
    "\034\100\035\101\060\001\002\000\050\004\054\005\027" +
    "\006\055\013\053\014\052\015\051\017\031\026\061\030" +
    "\056\031\057\034\032\035\041\036\037\040\040\052\062" +
    "\062\050\071\034\100\035\101\060\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\052\015\051\017\031" +
    "\026\061\030\056\031\057\034\032\035\041\036\037\040" +
    "\040\052\062\062\050\071\034\100\035\101\060\001\002" +
    "\000\050\004\054\005\027\006\055\013\053\014\052\015" +
    "\051\017\031\026\061\030\056\031\057\034\032\035\041" +
    "\036\037\040\040\052\062\062\050\071\034\100\035\101" +
    "\060\001\002\000\050\004\054\005\027\006\055\013\053" +
    "\014\052\015\051\017\031\026\061\030\056\031\057\034" +
    "\032\035\041\036\037\040\040\052\062\062\050\071\034" +
    "\100\035\101\060\001\002\000\050\004\054\005\027\006" +
    "\055\013\053\014\052\015\051\017\031\026\061\030\056" +
    "\031\057\034\032\035\041\036\037\040\040\052\062\062" +
    "\050\071\034\100\035\101\060\001\002\000\050\004\054" +
    "\005\027\006\055\013\053\014\052\015\051\017\031\026" +
    "\061\030\056\031\057\034\032\035\041\036\037\040\040" +
    "\052\062\062\050\071\034\100\035\101\060\001\002\000" +
    "\050\004\054\005\027\006\055\013\053\014\052\015\051" +
    "\017\031\026\061\030\056\031\057\034\032\035\041\036" +
    "\037\040\040\052\062\062\050\071\034\100\035\101\060" +
    "\001\002\000\050\004\054\005\027\006\055\013\053\014" +
    "\052\015\051\017\031\026\061\030\056\031\057\034\032" +
    "\035\041\036\037\040\040\052\062\062\050\071\034\100" +
    "\035\101\060\001\002\000\050\004\054\005\027\006\055" +
    "\013\053\014\052\015\051\017\031\026\061\030\056\031" +
    "\057\034\032\035\041\036\037\040\040\052\062\062\050" +
    "\071\034\100\035\101\060\001\002\000\050\004\054\005" +
    "\027\006\055\013\053\014\052\015\051\017\031\026\061" +
    "\030\056\031\057\034\032\035\041\036\037\040\040\052" +
    "\062\062\050\071\034\100\035\101\060\001\002\000\050" +
    "\004\054\005\027\006\055\013\053\014\052\015\051\017" +
    "\031\026\061\030\056\031\057\034\032\035\041\036\037" +
    "\040\040\052\062\062\050\071\034\100\035\101\060\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\052" +
    "\015\051\017\031\026\061\030\056\031\057\034\032\035" +
    "\041\036\037\040\040\052\062\062\050\071\034\100\035" +
    "\101\060\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\052\015\051\017\031\026\061\030\056\031\057" +
    "\034\032\035\041\036\037\040\040\052\062\062\050\071" +
    "\034\100\035\101\060\001\002\000\050\004\054\005\027" +
    "\006\055\013\053\014\052\015\051\017\031\026\061\030" +
    "\056\031\057\034\032\035\041\036\037\040\040\052\062" +
    "\062\050\071\034\100\035\101\060\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\052\015\051\017\031" +
    "\026\061\030\056\031\057\034\032\035\041\036\037\040" +
    "\040\052\062\062\050\071\034\100\035\101\060\001\002" +
    "\000\104\002\uffcb\016\uffcb\020\uffcb\023\uffcb\025\uffcb\027" +
    "\uffcb\033\uffcb\037\uffcb\041\uffcb\044\uffcb\045\uffcb\047\uffcb" +
    "\050\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\067\uffcb\070\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\077\uffcb\001\002\000\050\004\054\005\027\006\055" +
    "\013\053\014\052\015\051\017\031\026\061\030\056\031" +
    "\057\034\032\035\041\036\037\040\040\052\062\062\050" +
    "\071\034\100\035\101\060\001\002\000\050\004\054\005" +
    "\027\006\055\013\053\014\052\015\051\017\031\026\061" +
    "\030\056\031\057\034\032\035\041\036\037\040\040\052" +
    "\062\062\050\071\034\100\035\101\060\001\002\000\050" +
    "\004\054\005\027\006\055\013\053\014\052\015\051\017" +
    "\031\026\061\030\056\031\057\034\032\035\041\036\037" +
    "\040\040\052\062\062\050\071\034\100\035\101\060\001" +
    "\002\000\104\002\uffbf\016\uffbf\020\uffbf\023\uffbf\025\uffbf" +
    "\027\uffbf\033\uffbf\037\uffbf\041\uffbf\044\073\045\uffbf\047" +
    "\uffbf\050\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\067\066\070\070\072\075\073\101\074\uffbf\075\uffbf" +
    "\076\uffbf\077\uffbf\001\002\000\064\002\uffc7\016\uffc7\020" +
    "\uffc7\023\uffc7\025\uffc7\027\uffc7\033\uffc7\037\uffc7\041\uffc7" +
    "\044\073\045\uffc7\047\uffc7\050\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\061\067\062\100\063\076\064\072\065\110\067\066" +
    "\070\070\072\075\073\101\001\002\000\100\002\uffc8\016" +
    "\uffc8\020\uffc8\023\uffc8\025\uffc8\027\uffc8\033\uffc8\037\uffc8" +
    "\041\uffc8\044\073\045\uffc8\047\uffc8\050\uffc8\052\uffc8\055" +
    "\107\056\103\057\074\060\064\061\067\062\100\063\076" +
    "\064\072\065\110\067\066\070\070\072\075\073\101\074" +
    "\071\075\065\076\077\077\104\001\002\000\064\002\uffb0" +
    "\016\uffb0\020\uffb0\023\uffb0\025\uffb0\027\uffb0\033\uffb0\037" +
    "\uffb0\041\uffb0\044\073\045\uffb0\047\uffb0\050\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\061\067\062\100\063\076\064\072\065" +
    "\110\067\066\070\070\072\075\073\101\001\002\000\064" +
    "\002\uffc6\016\uffc6\020\uffc6\023\uffc6\025\uffc6\027\uffc6\033" +
    "\uffc6\037\uffc6\041\uffc6\044\073\045\uffc6\047\uffc6\050\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\061\067\062\100\063\076\064" +
    "\072\065\110\067\066\070\070\072\075\073\101\001\002" +
    "\000\100\002\uffc9\016\uffc9\020\uffc9\023\uffc9\025\uffc9\027" +
    "\uffc9\033\uffc9\037\uffc9\041\uffc9\044\073\045\uffc9\047\uffc9" +
    "\050\uffc9\052\uffc9\055\107\056\103\057\074\060\064\061" +
    "\067\062\100\063\076\064\072\065\110\067\066\070\070" +
    "\072\075\073\101\074\071\075\065\076\077\077\104\001" +
    "\002\000\104\002\uffbb\016\uffbb\020\uffbb\023\uffbb\025\uffbb" +
    "\027\uffbb\033\uffbb\037\uffbb\041\uffbb\044\073\045\uffbb\047" +
    "\uffbb\050\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065" +
    "\uffbb\067\066\070\070\072\075\073\uffbb\074\uffbb\075\uffbb" +
    "\076\uffbb\077\uffbb\001\002\000\104\002\uffc2\016\uffc2\020" +
    "\uffc2\023\uffc2\025\uffc2\027\uffc2\033\uffc2\037\uffc2\041\uffc2" +
    "\044\073\045\uffc2\047\uffc2\050\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\076\064\072\065\110\067\066\070\070\072\075\073" +
    "\101\074\uffc2\075\uffc2\076\uffc2\077\uffc2\001\002\000\064" +
    "\002\uffb1\016\uffb1\020\uffb1\023\uffb1\025\uffb1\027\uffb1\033" +
    "\uffb1\037\uffb1\041\uffb1\044\073\045\uffb1\047\uffb1\050\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\061\067\062\100\063\076\064" +
    "\072\065\110\067\066\070\070\072\075\073\101\001\002" +
    "\000\104\002\uffc1\016\uffc1\020\uffc1\023\uffc1\025\uffc1\027" +
    "\uffc1\033\uffc1\037\uffc1\041\uffc1\044\073\045\uffc1\047\uffc1" +
    "\050\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\110" +
    "\067\066\070\070\072\075\073\101\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\001\002\000\104\002\uffbc\016\uffbc\020\uffbc" +
    "\023\uffbc\025\uffbc\027\uffbc\033\uffbc\037\uffbc\041\uffbc\044" +
    "\073\045\uffbc\047\uffbc\050\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\067\066\070\070\072\uffbc\073\uffbc" +
    "\074\uffbc\075\uffbc\076\uffbc\077\uffbc\001\002\000\064\002" +
    "\uffc5\016\uffc5\020\uffc5\023\uffc5\025\uffc5\027\uffc5\033\uffc5" +
    "\037\uffc5\041\uffc5\044\073\045\uffc5\047\uffc5\050\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\061\067\062\100\063\076\064\072" +
    "\065\110\067\066\070\070\072\075\073\101\001\002\000" +
    "\076\002\uffde\016\uffde\020\uffde\023\uffde\025\uffde\027\uffde" +
    "\033\uffde\037\uffde\044\073\045\uffde\050\130\053\102\054" +
    "\106\055\107\056\103\057\074\060\064\061\067\062\100" +
    "\063\076\064\072\065\110\067\066\070\070\072\075\073" +
    "\101\074\071\075\065\076\077\077\104\001\002\000\004" +
    "\045\127\001\002\000\104\002\uffcf\016\uffcf\020\uffcf\023" +
    "\uffcf\025\uffcf\027\uffcf\033\uffcf\037\uffcf\041\uffcf\044\uffcf" +
    "\045\uffcf\047\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\067\uffcf\070\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\075\uffcf\076\uffcf\077\uffcf\001\002\000\050\004\054" +
    "\005\027\006\055\013\053\014\052\015\051\017\031\026" +
    "\061\030\056\031\057\034\032\035\041\036\037\040\040" +
    "\052\062\062\050\071\034\100\035\101\060\001\002\000" +
    "\024\002\uffdd\016\uffdd\020\uffdd\023\uffdd\025\uffdd\027\uffdd" +
    "\033\uffdd\037\uffdd\045\uffdd\001\002\000\104\002\uffc0\016" +
    "\uffc0\020\uffc0\023\uffc0\025\uffc0\027\uffc0\033\uffc0\037\uffc0" +
    "\041\uffc0\044\073\045\uffc0\047\uffc0\050\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\110\067\066\070\070\072" +
    "\075\073\101\074\uffc0\075\uffc0\076\uffc0\077\uffc0\001\002" +
    "\000\064\002\uffb3\016\uffb3\020\uffb3\023\uffb3\025\uffb3\027" +
    "\uffb3\033\uffb3\037\uffb3\041\uffb3\044\073\045\uffb3\047\uffb3" +
    "\050\uffb3\052\uffb3\053\uffb3\054\uffb3\061\067\062\100\063" +
    "\076\064\072\065\110\067\066\070\070\072\075\073\101" +
    "\001\002\000\104\002\uffbd\016\uffbd\020\uffbd\023\uffbd\025" +
    "\uffbd\027\uffbd\033\uffbd\037\uffbd\041\uffbd\044\073\045\uffbd" +
    "\047\uffbd\050\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\067\066\070\uffbd\072\uffbd\073\uffbd\074\uffbd\075" +
    "\uffbd\076\uffbd\077\uffbd\001\002\000\104\002\uffc3\016\uffc3" +
    "\020\uffc3\023\uffc3\025\uffc3\027\uffc3\033\uffc3\037\uffc3\041" +
    "\uffc3\044\073\045\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\063\076\064\072\065\110\067\066\070\070\072\075" +
    "\073\101\074\uffc3\075\uffc3\076\uffc3\077\uffc3\001\002\000" +
    "\104\002\uffbe\016\uffbe\020\uffbe\023\uffbe\025\uffbe\027\uffbe" +
    "\033\uffbe\037\uffbe\041\uffbe\044\073\045\uffbe\047\uffbe\050" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\067" +
    "\uffbe\070\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe" +
    "\077\uffbe\001\002\000\064\002\uffb2\016\uffb2\020\uffb2\023" +
    "\uffb2\025\uffb2\027\uffb2\033\uffb2\037\uffb2\041\uffb2\044\073" +
    "\045\uffb2\047\uffb2\050\uffb2\052\uffb2\053\uffb2\054\uffb2\061" +
    "\067\062\100\063\076\064\072\065\110\067\066\070\070" +
    "\072\075\073\101\001\002\000\064\002\uffc4\016\uffc4\020" +
    "\uffc4\023\uffc4\025\uffc4\027\uffc4\033\uffc4\037\uffc4\041\uffc4" +
    "\044\073\045\uffc4\047\uffc4\050\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\061\067\062\100\063\076\064\072\065\110\067\066" +
    "\070\070\072\075\073\101\001\002\000\050\004\054\005" +
    "\027\006\055\013\053\014\052\015\051\017\031\026\061" +
    "\030\056\031\057\034\032\035\041\036\037\040\040\052" +
    "\062\062\050\071\034\100\035\101\060\001\002\000\054" +
    "\041\143\044\073\053\102\054\106\055\107\056\103\057" +
    "\074\060\064\061\067\062\100\063\076\064\072\065\110" +
    "\067\066\070\070\072\075\073\101\074\071\075\065\076" +
    "\077\077\104\001\002\000\104\002\uffb8\016\uffb8\020\uffb8" +
    "\023\uffb8\025\uffb8\027\uffb8\033\uffb8\037\uffb8\041\uffb8\044" +
    "\uffb8\045\uffb8\047\uffb8\050\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\067\uffb8\070\uffb8\072\uffb8\073\uffb8" +
    "\074\uffb8\075\uffb8\076\uffb8\077\uffb8\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\052\015\051\017\031" +
    "\026\061\030\056\031\057\034\032\035\041\036\037\040" +
    "\040\052\062\062\050\071\034\100\035\101\060\001\002" +
    "\000\054\044\073\050\146\053\102\054\106\055\107\056" +
    "\103\057\074\060\064\061\067\062\100\063\076\064\072" +
    "\065\110\067\066\070\070\072\075\073\101\074\071\075" +
    "\065\076\077\077\104\001\002\000\050\004\054\005\027" +
    "\006\055\013\053\014\052\015\051\017\031\026\061\030" +
    "\056\031\057\034\032\035\041\036\037\040\040\052\062" +
    "\062\050\071\034\100\035\101\060\001\002\000\054\044" +
    "\073\050\150\053\102\054\106\055\107\056\103\057\074" +
    "\060\064\061\067\062\100\063\076\064\072\065\110\067" +
    "\066\070\070\072\075\073\101\074\071\075\065\076\077" +
    "\077\104\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\052\015\051\017\031\026\061\030\056\031\057" +
    "\034\032\035\041\036\037\040\040\052\062\062\050\071" +
    "\034\100\035\101\060\001\002\000\054\041\152\044\073" +
    "\053\102\054\106\055\107\056\103\057\074\060\064\061" +
    "\067\062\100\063\076\064\072\065\110\067\066\070\070" +
    "\072\075\073\101\074\071\075\065\076\077\077\104\001" +
    "\002\000\104\002\uffb5\016\uffb5\020\uffb5\023\uffb5\025\uffb5" +
    "\027\uffb5\033\uffb5\037\uffb5\041\uffb5\044\uffb5\045\uffb5\047" +
    "\uffb5\050\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\067\uffb5\070\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\001\002\000\050\004\054\005\027\006" +
    "\055\013\053\014\052\015\051\017\031\026\061\030\056" +
    "\031\057\034\032\035\041\036\037\040\040\052\062\062" +
    "\050\071\034\100\035\101\060\001\002\000\054\041\155" +
    "\044\073\053\102\054\106\055\107\056\103\057\074\060" +
    "\064\061\067\062\100\063\076\064\072\065\110\067\066" +
    "\070\070\072\075\073\101\074\071\075\065\076\077\077" +
    "\104\001\002\000\104\002\uffb9\016\uffb9\020\uffb9\023\uffb9" +
    "\025\uffb9\027\uffb9\033\uffb9\037\uffb9\041\uffb9\044\uffb9\045" +
    "\uffb9\047\uffb9\050\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\067\uffb9\070\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\001\002\000\050\004\054\005" +
    "\027\006\055\013\053\014\052\015\051\017\031\026\061" +
    "\030\056\031\057\034\032\035\041\036\037\040\040\052" +
    "\062\062\050\071\034\100\035\101\060\001\002\000\054" +
    "\044\073\050\160\053\102\054\106\055\107\056\103\057" +
    "\074\060\064\061\067\062\100\063\076\064\072\065\110" +
    "\067\066\070\070\072\075\073\101\074\071\075\065\076" +
    "\077\077\104\001\002\000\050\004\054\005\027\006\055" +
    "\013\053\014\052\015\051\017\031\026\061\030\056\031" +
    "\057\034\032\035\041\036\037\040\040\052\062\062\050" +
    "\071\034\100\035\101\060\001\002\000\054\044\073\050" +
    "\162\053\102\054\106\055\107\056\103\057\074\060\064" +
    "\061\067\062\100\063\076\064\072\065\110\067\066\070" +
    "\070\072\075\073\101\074\071\075\065\076\077\077\104" +
    "\001\002\000\050\004\054\005\027\006\055\013\053\014" +
    "\052\015\051\017\031\026\061\030\056\031\057\034\032" +
    "\035\041\036\037\040\040\052\062\062\050\071\034\100" +
    "\035\101\060\001\002\000\054\041\164\044\073\053\102" +
    "\054\106\055\107\056\103\057\074\060\064\061\067\062" +
    "\100\063\076\064\072\065\110\067\066\070\070\072\075" +
    "\073\101\074\071\075\065\076\077\077\104\001\002\000" +
    "\104\002\uffb6\016\uffb6\020\uffb6\023\uffb6\025\uffb6\027\uffb6" +
    "\033\uffb6\037\uffb6\041\uffb6\044\uffb6\045\uffb6\047\uffb6\050" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\067" +
    "\uffb6\070\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\052\015\051\017\031\026\061\030\056\031\057" +
    "\034\032\035\041\036\037\040\040\052\062\062\050\071" +
    "\034\100\035\101\060\001\002\000\054\041\167\044\073" +
    "\053\102\054\106\055\107\056\103\057\074\060\064\061" +
    "\067\062\100\063\076\064\072\065\110\067\066\070\070" +
    "\072\075\073\101\074\071\075\065\076\077\077\104\001" +
    "\002\000\104\002\uffba\016\uffba\020\uffba\023\uffba\025\uffba" +
    "\027\uffba\033\uffba\037\uffba\041\uffba\044\uffba\045\uffba\047" +
    "\uffba\050\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\067\uffba\070\uffba\072\uffba\073\uffba\074\uffba\075\uffba" +
    "\076\uffba\077\uffba\001\002\000\050\004\054\005\027\006" +
    "\055\013\053\014\052\015\051\017\031\026\061\030\056" +
    "\031\057\034\032\035\041\036\037\040\040\052\062\062" +
    "\050\071\034\100\035\101\060\001\002\000\054\044\073" +
    "\050\172\053\102\054\106\055\107\056\103\057\074\060" +
    "\064\061\067\062\100\063\076\064\072\065\110\067\066" +
    "\070\070\072\075\073\101\074\071\075\065\076\077\077" +
    "\104\001\002\000\050\004\054\005\027\006\055\013\053" +
    "\014\052\015\051\017\031\026\061\030\056\031\057\034" +
    "\032\035\041\036\037\040\040\052\062\062\050\071\034" +
    "\100\035\101\060\001\002\000\054\044\073\050\174\053" +
    "\102\054\106\055\107\056\103\057\074\060\064\061\067" +
    "\062\100\063\076\064\072\065\110\067\066\070\070\072" +
    "\075\073\101\074\071\075\065\076\077\077\104\001\002" +
    "\000\050\004\054\005\027\006\055\013\053\014\052\015" +
    "\051\017\031\026\061\030\056\031\057\034\032\035\041" +
    "\036\037\040\040\052\062\062\050\071\034\100\035\101" +
    "\060\001\002\000\054\041\176\044\073\053\102\054\106" +
    "\055\107\056\103\057\074\060\064\061\067\062\100\063" +
    "\076\064\072\065\110\067\066\070\070\072\075\073\101" +
    "\074\071\075\065\076\077\077\104\001\002\000\104\002" +
    "\uffb4\016\uffb4\020\uffb4\023\uffb4\025\uffb4\027\uffb4\033\uffb4" +
    "\037\uffb4\041\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4\070" +
    "\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4" +
    "\001\002\000\104\002\uffcc\016\uffcc\020\uffcc\023\uffcc\025" +
    "\uffcc\027\uffcc\033\uffcc\037\uffcc\041\uffcc\044\073\045\uffcc" +
    "\047\uffcc\050\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\067\066\070\070\072\075\073\101\074\uffcc\075" +
    "\uffcc\076\uffcc\077\uffcc\001\002\000\004\046\236\001\002" +
    "\000\004\051\205\001\002\000\016\007\uffea\010\uffea\011" +
    "\uffea\043\uffea\050\203\051\uffea\001\002\000\004\100\202" +
    "\001\002\000\014\007\uffe9\010\uffe9\011\uffe9\043\uffe9\051" +
    "\uffe9\001\002\000\012\022\212\024\206\040\211\100\207" +
    "\001\002\000\004\044\226\001\002\000\034\002\uffe7\007" +
    "\uffe7\016\uffe7\020\uffe7\023\uffe7\025\uffe7\027\uffe7\033\uffe7" +
    "\037\uffe7\041\uffe7\045\uffe7\046\uffe7\050\uffe7\001\002\000" +
    "\004\046\uffab\001\002\000\012\022\212\024\206\040\211" +
    "\100\207\001\002\000\004\040\213\001\002\000\050\004" +
    "\054\005\027\006\055\013\053\014\052\015\051\017\031" +
    "\026\061\030\056\031\057\034\032\035\041\036\037\040" +
    "\040\052\062\062\050\071\034\100\035\101\060\001\002" +
    "\000\006\041\uffe2\050\222\001\002\000\060\041\uffe0\044" +
    "\073\047\220\050\uffe0\053\102\054\106\055\107\056\103" +
    "\057\074\060\064\061\067\062\100\063\076\064\072\065" +
    "\110\067\066\070\070\072\075\073\101\074\071\075\065" +
    "\076\077\077\104\001\002\000\004\041\217\001\002\000" +
    "\034\002\uffe6\007\uffe6\016\uffe6\020\uffe6\023\uffe6\025\uffe6" +
    "\027\uffe6\033\uffe6\037\uffe6\041\uffe6\045\uffe6\046\uffe6\050" +
    "\uffe6\001\002\000\050\004\054\005\027\006\055\013\053" +
    "\014\052\015\051\017\031\026\061\030\056\031\057\034" +
    "\032\035\041\036\037\040\040\052\062\062\050\071\034" +
    "\100\035\101\060\001\002\000\056\041\uffdf\044\073\050" +
    "\uffdf\053\102\054\106\055\107\056\103\057\074\060\064" +
    "\061\067\062\100\063\076\064\072\065\110\067\066\070" +
    "\070\072\075\073\101\074\071\075\065\076\077\077\104" +
    "\001\002\000\050\004\054\005\027\006\055\013\053\014" +
    "\052\015\051\017\031\026\061\030\056\031\057\034\032" +
    "\035\041\036\037\040\040\052\062\062\050\071\034\100" +
    "\035\101\060\001\002\000\004\041\uffe1\001\002\000\004" +
    "\041\225\001\002\000\034\002\uffe8\007\uffe8\016\uffe8\020" +
    "\uffe8\023\uffe8\025\uffe8\027\uffe8\033\uffe8\037\uffe8\041\uffe8" +
    "\045\uffe8\046\uffe8\050\uffe8\001\002\000\012\022\212\024" +
    "\206\040\211\100\207\001\002\000\006\045\232\050\231" +
    "\001\002\000\006\045\uffe4\050\uffe4\001\002\000\012\022" +
    "\212\024\206\040\211\100\207\001\002\000\004\032\233" +
    "\001\002\000\012\022\212\024\206\040\211\100\207\001" +
    "\002\000\034\002\uffe5\007\uffe5\016\uffe5\020\uffe5\023\uffe5" +
    "\025\uffe5\027\uffe5\033\uffe5\037\uffe5\041\uffe5\045\uffe5\046" +
    "\uffe5\050\uffe5\001\002\000\006\045\uffe3\050\uffe3\001\002" +
    "\000\050\004\054\005\027\006\055\013\053\014\052\015" +
    "\051\017\031\026\061\030\056\031\057\034\032\035\041" +
    "\036\037\040\040\052\062\062\050\071\034\100\035\101" +
    "\060\001\002\000\104\002\uffaf\016\uffaf\020\uffaf\023\uffaf" +
    "\025\uffaf\027\uffaf\033\uffaf\037\uffaf\041\uffaf\044\073\045" +
    "\uffaf\047\uffaf\050\uffaf\052\uffaf\053\102\054\106\055\107" +
    "\056\103\057\074\060\064\061\067\062\100\063\076\064" +
    "\072\065\110\067\066\070\070\072\075\073\101\074\071" +
    "\075\065\076\077\077\104\001\002\000\004\044\241\001" +
    "\002\000\050\004\054\005\027\006\055\013\053\014\052" +
    "\015\051\017\031\026\061\030\056\031\057\034\032\035" +
    "\041\036\037\040\040\052\062\062\050\071\034\100\242" +
    "\101\060\001\002\000\056\044\uffd0\045\uffcd\050\uffcd\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\067\uffd0\070\uffd0\072" +
    "\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002" +
    "\000\056\044\uffda\045\uffce\050\uffce\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda" +
    "\064\uffda\065\uffda\067\uffda\070\uffda\072\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\077\uffda\001\002\000\052\044\073" +
    "\053\102\054\106\055\107\056\103\057\074\060\064\061" +
    "\067\062\100\063\076\064\072\065\110\067\066\070\070" +
    "\072\075\073\101\074\071\075\065\076\077\077\104\001" +
    "\002\000\006\045\uffa9\050\266\001\002\000\004\045\247" +
    "\001\002\000\004\050\250\001\002\000\004\044\251\001" +
    "\002\000\004\055\253\001\002\000\004\045\264\001\002" +
    "\000\004\101\257\001\002\000\006\045\uffa7\050\255\001" +
    "\002\000\004\055\253\001\002\000\004\045\uffa6\001\002" +
    "\000\006\050\262\057\uffa4\001\002\000\004\057\261\001" +
    "\002\000\006\045\uffa5\050\uffa5\001\002\000\004\101\257" +
    "\001\002\000\004\057\uffa3\001\002\000\004\041\265\001" +
    "\002\000\104\002\uffaa\016\uffaa\020\uffaa\023\uffaa\025\uffaa" +
    "\027\uffaa\033\uffaa\037\uffaa\041\uffaa\044\uffaa\045\uffaa\047" +
    "\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\067\uffaa\070\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\077\uffaa\001\002\000\050\004\054\005\027\006" +
    "\055\013\053\014\052\015\051\017\031\026\061\030\056" +
    "\031\057\034\032\035\041\036\037\040\040\052\062\062" +
    "\050\071\034\100\242\101\060\001\002\000\004\045\uffa8" +
    "\001\002\000\054\041\271\044\073\053\102\054\106\055" +
    "\107\056\103\057\074\060\064\061\067\062\100\063\076" +
    "\064\072\065\110\067\066\070\070\072\075\073\101\074" +
    "\071\075\065\076\077\077\104\001\002\000\104\002\uffdc" +
    "\016\uffdc\020\uffdc\023\uffdc\025\uffdc\027\uffdc\033\uffdc\037" +
    "\uffdc\041\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\067\uffdc\070\uffdc" +
    "\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\001" +
    "\002\000\104\002\uffca\016\uffca\020\uffca\023\uffca\025\uffca" +
    "\027\uffca\033\uffca\037\uffca\041\uffca\044\073\045\uffca\047" +
    "\uffca\050\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\067\uffca\070\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\077\uffca\001\002\000\050\004\054\005\027\006" +
    "\055\013\053\014\052\015\051\017\031\026\061\030\056" +
    "\031\057\034\032\035\041\036\037\040\040\052\062\062" +
    "\050\071\034\100\035\101\060\001\002\000\054\044\073" +
    "\050\275\053\102\054\106\055\107\056\103\057\074\060" +
    "\064\061\067\062\100\063\076\064\072\065\110\067\066" +
    "\070\070\072\075\073\101\074\071\075\065\076\077\077" +
    "\104\001\002\000\050\004\054\005\027\006\055\013\053" +
    "\014\052\015\051\017\031\026\061\030\056\031\057\034" +
    "\032\035\041\036\037\040\040\052\062\062\050\071\034" +
    "\100\035\101\060\001\002\000\054\044\073\050\277\053" +
    "\102\054\106\055\107\056\103\057\074\060\064\061\067" +
    "\062\100\063\076\064\072\065\110\067\066\070\070\072" +
    "\075\073\101\074\071\075\065\076\077\077\104\001\002" +
    "\000\050\004\054\005\027\006\055\013\053\014\052\015" +
    "\051\017\031\026\061\030\056\031\057\034\032\035\041" +
    "\036\037\040\040\052\062\062\050\071\034\100\035\101" +
    "\060\001\002\000\054\041\301\044\073\053\102\054\106" +
    "\055\107\056\103\057\074\060\064\061\067\062\100\063" +
    "\076\064\072\065\110\067\066\070\070\072\075\073\101" +
    "\074\071\075\065\076\077\077\104\001\002\000\104\002" +
    "\uffb7\016\uffb7\020\uffb7\023\uffb7\025\uffb7\027\uffb7\033\uffb7" +
    "\037\uffb7\041\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\067\uffb7\070" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\001\002\000\056\002\uff95\033\uff95\044\073\053\102\054" +
    "\106\055\107\056\103\057\074\060\064\061\067\062\100" +
    "\063\076\064\072\065\110\067\066\070\070\072\075\073" +
    "\101\074\071\075\065\076\077\077\104\001\002\000\004" +
    "\002\uffff\001\002\000\050\004\054\005\027\006\055\013" +
    "\053\014\052\015\051\017\031\026\061\030\056\031\057" +
    "\034\032\035\041\036\037\040\040\052\062\062\050\071" +
    "\034\100\035\101\060\001\002\000\004\002\uff93\001\002" +
    "\000\024\002\uffa0\016\uffa0\020\uffa0\023\uffa0\025\uffa0\027" +
    "\uffa0\033\uffa0\037\uffa0\050\327\001\002\000\012\007\314" +
    "\010\312\011\311\051\313\001\002\000\022\002\uffa1\016" +
    "\uffa1\020\uffa1\023\uffa1\025\uffa1\027\uffa1\033\uffa1\037\uffa1" +
    "\001\002\000\004\012\322\001\002\000\012\022\212\024" +
    "\206\040\211\100\207\001\002\000\012\022\212\024\206" +
    "\040\211\100\207\001\002\000\050\004\054\005\027\006" +
    "\055\013\053\014\052\015\051\017\031\026\061\030\056" +
    "\031\057\034\032\035\041\036\037\040\040\052\062\062" +
    "\050\071\034\100\035\101\060\001\002\000\074\002\uff9c" +
    "\016\uff9c\020\uff9c\023\uff9c\025\uff9c\027\uff9c\033\uff9c\037" +
    "\uff9c\044\073\050\uff9c\053\102\054\106\055\107\056\103" +
    "\057\074\060\064\061\067\062\100\063\076\064\072\065" +
    "\110\067\066\070\070\072\075\073\101\074\071\075\065" +
    "\076\077\077\104\001\002\000\004\007\317\001\002\000" +
    "\050\004\054\005\027\006\055\013\053\014\052\015\051" +
    "\017\031\026\061\030\056\031\057\034\032\035\041\036" +
    "\037\040\040\052\062\062\050\071\034\100\035\101\060" +
    "\001\002\000\074\002\uff9d\016\uff9d\020\uff9d\023\uff9d\025" +
    "\uff9d\027\uff9d\033\uff9d\037\uff9d\044\073\050\uff9d\053\102" +
    "\054\106\055\107\056\103\057\074\060\064\061\067\062" +
    "\100\063\076\064\072\065\110\067\066\070\070\072\075" +
    "\073\101\074\071\075\065\076\077\077\104\001\002\000" +
    "\024\002\uff9e\016\uff9e\020\uff9e\023\uff9e\025\uff9e\027\uff9e" +
    "\033\uff9e\037\uff9e\050\uff9e\001\002\000\004\042\324\001" +
    "\002\000\024\002\uff9b\016\uff9b\020\uff9b\023\uff9b\025\uff9b" +
    "\027\uff9b\033\uff9b\037\uff9b\050\uff9b\001\002\000\004\100" +
    "\202\001\002\000\004\043\326\001\002\000\024\002\uff9a" +
    "\016\uff9a\020\uff9a\023\uff9a\025\uff9a\027\uff9a\033\uff9a\037" +
    "\uff9a\050\uff9a\001\002\000\004\100\202\001\002\000\022" +
    "\002\uff9f\016\uff9f\020\uff9f\023\uff9f\025\uff9f\027\uff9f\033" +
    "\uff9f\037\uff9f\001\002\000\024\002\uff98\016\uff98\020\uff98" +
    "\023\uff98\025\uff98\027\uff98\033\uff98\037\uff98\050\336\001" +
    "\002\000\004\051\334\001\002\000\022\002\uff99\016\uff99" +
    "\020\uff99\023\uff99\025\uff99\027\uff99\033\uff99\037\uff99\001" +
    "\002\000\012\022\212\024\206\040\211\100\207\001\002" +
    "\000\024\002\uffeb\016\uffeb\020\uffeb\023\uffeb\025\uffeb\027" +
    "\uffeb\033\uffeb\037\uffeb\050\uffeb\001\002\000\004\100\202" +
    "\001\002\000\022\002\uff97\016\uff97\020\uff97\023\uff97\025" +
    "\uff97\027\uff97\033\uff97\037\uff97\001\002\000\012\002\ufffb" +
    "\025\ufffb\027\ufffb\033\ufffb\001\002\000\022\002\uffa2\016" +
    "\uffa2\020\uffa2\023\uffa2\025\uffa2\027\uffa2\033\uffa2\037\uffa2" +
    "\001\002\000\024\002\ufff3\016\ufff3\020\ufff3\023\ufff3\025" +
    "\ufff3\027\ufff3\033\ufff3\037\ufff3\050\ufff3\001\002\000\004" +
    "\051\357\001\002\000\010\012\351\050\203\051\uffea\001" +
    "\002\000\024\002\ufff6\016\ufff6\020\ufff6\023\ufff6\025\ufff6" +
    "\027\ufff6\033\ufff6\037\ufff6\050\347\001\002\000\024\002" +
    "\ufff5\016\ufff5\020\ufff5\023\ufff5\025\ufff5\027\ufff5\033\ufff5" +
    "\037\ufff5\050\ufff5\001\002\000\004\100\344\001\002\000" +
    "\024\002\ufff4\016\ufff4\020\ufff4\023\ufff4\025\ufff4\027\ufff4" +
    "\033\ufff4\037\ufff4\050\ufff4\001\002\000\004\040\352\001" +
    "\002\000\004\046\353\001\002\000\004\046\354\001\002" +
    "\000\004\046\355\001\002\000\004\041\356\001\002\000" +
    "\024\002\ufff2\016\ufff2\020\ufff2\023\ufff2\025\ufff2\027\ufff2" +
    "\033\ufff2\037\ufff2\050\ufff2\001\002\000\012\022\361\024" +
    "\206\040\211\100\207\001\002\000\024\002\ufff1\016\ufff1" +
    "\020\ufff1\023\ufff1\025\ufff1\027\ufff1\033\ufff1\037\ufff1\050" +
    "\ufff1\001\002\000\026\002\uffec\016\uffec\020\uffec\023\uffec" +
    "\025\uffec\027\uffec\033\uffec\037\uffec\040\362\050\uffec\001" +
    "\002\000\054\004\054\005\027\006\055\013\053\014\052" +
    "\015\051\017\031\026\061\030\056\031\057\034\032\035" +
    "\041\036\037\040\040\041\363\047\365\052\062\062\050" +
    "\071\034\100\035\101\060\001\002\000\024\002\uffee\016" +
    "\uffee\020\uffee\023\uffee\025\uffee\027\uffee\033\uffee\037\uffee" +
    "\050\uffee\001\002\000\060\041\uffe0\044\073\047\371\050" +
    "\uffe0\053\102\054\106\055\107\056\103\057\074\060\064" +
    "\061\067\062\100\063\076\064\072\065\110\067\066\070" +
    "\070\072\075\073\101\074\071\075\065\076\077\077\104" +
    "\001\002\000\052\004\054\005\027\006\055\013\053\014" +
    "\052\015\051\017\031\026\061\030\056\031\057\034\032" +
    "\035\041\036\037\040\040\041\366\052\062\062\050\071" +
    "\034\100\035\101\060\001\002\000\024\002\uffed\016\uffed" +
    "\020\uffed\023\uffed\025\uffed\027\uffed\033\uffed\037\uffed\050" +
    "\uffed\001\002\000\054\041\370\044\073\053\102\054\106" +
    "\055\107\056\103\057\074\060\064\061\067\062\100\063" +
    "\076\064\072\065\110\067\066\070\070\072\075\073\101" +
    "\074\071\075\065\076\077\077\104\001\002\000\024\002" +
    "\uffef\016\uffef\020\uffef\023\uffef\025\uffef\027\uffef\033\uffef" +
    "\037\uffef\050\uffef\001\002\000\052\004\054\005\027\006" +
    "\055\013\053\014\052\015\051\017\031\026\061\030\056" +
    "\031\057\034\032\035\041\036\037\040\040\041\372\052" +
    "\062\062\050\071\034\100\035\101\060\001\002\000\024" +
    "\002\ufff0\016\ufff0\020\ufff0\023\ufff0\025\ufff0\027\ufff0\033" +
    "\ufff0\037\ufff0\050\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\002\004\001\001\000\022\003\014\004" +
    "\021\005\017\006\011\011\012\012\007\013\016\014\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\344\016\345\020\341\021\342\001\001\000\002\001\001" +
    "\000\030\026\124\027\340\030\025\031\041\033\027\034" +
    "\043\035\045\036\044\037\035\040\046\042\032\001\001" +
    "\000\016\005\337\006\011\011\012\012\007\013\016\014" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\330\021\331\052\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\306\047\307" +
    "\050\305\001\001\000\004\007\022\001\001\000\004\010" +
    "\302\001\001\000\026\026\301\030\025\031\041\033\027" +
    "\034\043\035\045\036\044\037\035\040\046\042\032\001" +
    "\001\000\026\026\042\030\025\031\041\033\027\034\043" +
    "\035\045\036\044\037\035\040\046\042\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\026" +
    "\271\030\025\031\041\033\027\034\043\035\045\036\044" +
    "\037\035\040\046\042\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\026\267\030\025" +
    "\031\041\033\027\034\043\035\045\036\044\037\035\040" +
    "\046\042\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\200\041\177\001\001\000\026" +
    "\026\176\030\025\031\041\033\027\034\043\035\045\036" +
    "\044\037\035\040\046\042\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\026\062\030\025\031" +
    "\041\033\027\034\043\035\045\036\044\037\035\040\046" +
    "\042\032\001\001\000\002\001\001\000\026\026\137\030" +
    "\025\031\041\033\027\034\043\035\045\036\044\037\035" +
    "\040\046\042\032\001\001\000\026\026\136\030\025\031" +
    "\041\033\027\034\043\035\045\036\044\037\035\040\046" +
    "\042\032\001\001\000\026\026\135\030\025\031\041\033" +
    "\027\034\043\035\045\036\044\037\035\040\046\042\032" +
    "\001\001\000\026\026\134\030\025\031\041\033\027\034" +
    "\043\035\045\036\044\037\035\040\046\042\032\001\001" +
    "\000\026\026\133\030\025\031\041\033\027\034\043\035" +
    "\045\036\044\037\035\040\046\042\032\001\001\000\026" +
    "\026\132\030\025\031\041\033\027\034\043\035\045\036" +
    "\044\037\035\040\046\042\032\001\001\000\026\026\131" +
    "\030\025\031\041\033\027\034\043\035\045\036\044\037" +
    "\035\040\046\042\032\001\001\000\030\026\124\027\125" +
    "\030\025\031\041\033\027\034\043\035\045\036\044\037" +
    "\035\040\046\042\032\001\001\000\026\026\123\030\025" +
    "\031\041\033\027\034\043\035\045\036\044\037\035\040" +
    "\046\042\032\001\001\000\026\026\122\030\025\031\041" +
    "\033\027\034\043\035\045\036\044\037\035\040\046\042" +
    "\032\001\001\000\026\026\121\030\025\031\041\033\027" +
    "\034\043\035\045\036\044\037\035\040\046\042\032\001" +
    "\001\000\026\026\120\030\025\031\041\033\027\034\043" +
    "\035\045\036\044\037\035\040\046\042\032\001\001\000" +
    "\026\026\117\030\025\031\041\033\027\034\043\035\045" +
    "\036\044\037\035\040\046\042\032\001\001\000\026\026" +
    "\116\030\025\031\041\033\027\034\043\035\045\036\044" +
    "\037\035\040\046\042\032\001\001\000\026\026\115\030" +
    "\025\031\041\033\027\034\043\035\045\036\044\037\035" +
    "\040\046\042\032\001\001\000\026\026\114\030\025\031" +
    "\041\033\027\034\043\035\045\036\044\037\035\040\046" +
    "\042\032\001\001\000\026\026\113\030\025\031\041\033" +
    "\027\034\043\035\045\036\044\037\035\040\046\042\032" +
    "\001\001\000\002\001\001\000\026\026\112\030\025\031" +
    "\041\033\027\034\043\035\045\036\044\037\035\040\046" +
    "\042\032\001\001\000\026\026\111\030\025\031\041\033" +
    "\027\034\043\035\045\036\044\037\035\040\046\042\032" +
    "\001\001\000\026\026\110\030\025\031\041\033\027\034" +
    "\043\035\045\036\044\037\035\040\046\042\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\026\124\027" +
    "\130\030\025\031\041\033\027\034\043\035\045\036\044" +
    "\037\035\040\046\042\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\026\141\030\025\031\041\033\027\034\043" +
    "\035\045\036\044\037\035\040\046\042\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\026\144\030\025" +
    "\031\041\033\027\034\043\035\045\036\044\037\035\040" +
    "\046\042\032\001\001\000\002\001\001\000\026\026\146" +
    "\030\025\031\041\033\027\034\043\035\045\036\044\037" +
    "\035\040\046\042\032\001\001\000\002\001\001\000\026" +
    "\026\150\030\025\031\041\033\027\034\043\035\045\036" +
    "\044\037\035\040\046\042\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\026\153\030\025\031\041\033" +
    "\027\034\043\035\045\036\044\037\035\040\046\042\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\026" +
    "\156\030\025\031\041\033\027\034\043\035\045\036\044" +
    "\037\035\040\046\042\032\001\001\000\002\001\001\000" +
    "\026\026\160\030\025\031\041\033\027\034\043\035\045" +
    "\036\044\037\035\040\046\042\032\001\001\000\002\001" +
    "\001\000\026\026\162\030\025\031\041\033\027\034\043" +
    "\035\045\036\044\037\035\040\046\042\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\026\165\030\025" +
    "\031\041\033\027\034\043\035\045\036\044\037\035\040" +
    "\046\042\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\026\170\030\025\031\041\033\027\034\043\035" +
    "\045\036\044\037\035\040\046\042\032\001\001\000\002" +
    "\001\001\000\026\026\172\030\025\031\041\033\027\034" +
    "\043\035\045\036\044\037\035\040\046\042\032\001\001" +
    "\000\002\001\001\000\026\026\174\030\025\031\041\033" +
    "\027\034\043\035\045\036\044\037\035\040\046\042\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\203\001\001\000\002\001\001\000\004\022" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\223\001\001\000\002\001\001\000" +
    "\032\024\215\025\213\026\214\030\025\031\041\033\027" +
    "\034\043\035\045\036\044\037\035\040\046\042\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\026\220\030\025\031\041\033" +
    "\027\034\043\035\045\036\044\037\035\040\046\042\032" +
    "\001\001\000\002\001\001\000\032\024\222\025\213\026" +
    "\214\030\025\031\041\033\027\034\043\035\045\036\044" +
    "\037\035\040\046\042\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\227\023\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\234\001\001\000\002\001\001\000\004\022\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\026\236\030" +
    "\025\031\041\033\027\034\043\035\045\036\044\037\035" +
    "\040\046\042\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\026\243\030\025\031\242\032\244\033\027" +
    "\034\043\035\045\036\044\037\035\040\046\042\032\043" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\251\045\253\001\001" +
    "\000\002\001\001\000\004\046\257\001\001\000\002\001" +
    "\001\000\006\044\255\045\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\026\243\030\025\031\242\032" +
    "\244\033\027\034\043\035\045\036\044\037\035\040\046" +
    "\042\032\043\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\026\273" +
    "\030\025\031\041\033\027\034\043\035\045\036\044\037" +
    "\035\040\046\042\032\001\001\000\002\001\001\000\026" +
    "\026\275\030\025\031\041\033\027\034\043\035\045\036" +
    "\044\037\035\040\046\042\032\001\001\000\002\001\001" +
    "\000\026\026\277\030\025\031\041\033\027\034\043\035" +
    "\045\036\044\037\035\040\046\042\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\026\124\027\304\030\025\031\041\033\027" +
    "\034\043\035\045\036\044\037\035\040\046\042\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\322\001\001\000\004\022" +
    "\320\001\001\000\004\022\315\001\001\000\026\026\314" +
    "\030\025\031\041\033\027\034\043\035\045\036\044\037" +
    "\035\040\046\042\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\026\317\030\025\031\041\033\027\034" +
    "\043\035\045\036\044\037\035\040\046\042\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\306\047\327\050\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\334\001\001\000\002\001" +
    "\001\000\010\020\330\021\331\052\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\347\020\341\021\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\357\022\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\024\215\025\213\026" +
    "\363\030\025\031\041\033\027\034\043\035\045\036\044" +
    "\037\035\040\046\042\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\026\366\030\025\031\041\033\027" +
    "\034\043\035\045\036\044\037\035\040\046\042\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\026\220\030\025\031\041\033\027\034\043\035" +
    "\045\036\044\037\035\040\046\042\032\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EssencePrimeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EssencePrimeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EssencePrimeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




     public StringBuffer errorMessage = new StringBuffer("");

    /* The reason for the error is passed into the method in the
       String 'message'. */

    public void report_error(String message, Object info)  {

        StringBuffer m = new StringBuffer("Parse error");


        if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                                m.append(" in line "+(s.left));
                if (s.right >= 0)
                        m.append(", column "+(s.right));
            }
        }
        m.append(" : "+message);
        //throw new Exception(m);
        errorMessage = m;
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)  {
        report_error(message, info);
        //System.exit(1);
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EssencePrimeParser$actions {



        public int errors_found = 0;
       


  private final EssencePrimeParser parser;

  /** Constructor */
  CUP$EssencePrimeParser$actions(EssencePrimeParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EssencePrimeParser$do_action(
    int                        CUP$EssencePrimeParser$act_num,
    java_cup.runtime.lr_parser CUP$EssencePrimeParser$parser,
    java.util.Stack            CUP$EssencePrimeParser$stack,
    int                        CUP$EssencePrimeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EssencePrimeParser$result;

      /* select the action based on the action number */
      switch (CUP$EssencePrimeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // constraint_block ::= 
            {
              Object RESULT =null;
		
		            RESULT = new LinkedList(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // constraint_block ::= SUCH_THAT expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (LinkedList) e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // objective ::= 
            {
              Object RESULT =null;
		    
			  RESULT = new Objective(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // objective ::= MINIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Objective(true, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // objective ::= MAXIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Objective(false, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variable_list ::= domain_identifiers COMMA variable_list 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int di_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int di_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) di_list).addFirst((DomainIdentifiers) di);  
			 RESULT = di_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_list",40, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variable_list ::= domain_identifiers 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
			list.addFirst((DomainIdentifiers) di); 
			RESULT = list;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_list",40, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // find_block ::= FIND variable_list 
            {
              Object RESULT =null;
		int v_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int v_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object v_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) v_list).toArray();	
	        	    DomainIdentifiers[] v_array = new DomainIdentifiers[tmp.length];
			    for(int i=v_array.length; i>0; i--) {
 			   	          v_array[i-1] = (DomainIdentifiers) tmp[v_array.length-i];
	            }
			    RESULT = new Declaration(v_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("find_block",10, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // user_def_type ::= ENUM LBRACE identifier_list RBRACE 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) id_list).toArray();	
	        	    Identifier[] id_array = new Identifier[tmp.length];
			    for(int i=0;i<id_array.length;i++)
 			   	 id_array[i] = (Identifier) tmp[i];

			    RESULT = new Type(new Enumeration(id_array)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("user_def_type",39, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // constant ::= identifier_list BE_NEW_TYPE user_def_type 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];
                              constantList.add(new Constant(new NewTypeConstant(id, (Type) t))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",38, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // constant ::= identifier_list BE expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",38, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // constant ::= identifier_list COLON domain BE expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Domain) d,(Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",38, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // constant ::= identifier_list BE_DOMAIN domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident = (String) identifier_list[i];
                              constantList.add(new Constant(new DomainConstant(ident, (Domain) d))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",38, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // constant_list ::= constant COMMA constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int constant_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int constant_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object constant_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 for(int i=0; i<((LinkedList) c_list).size(); i++) {
		            ((LinkedList) constant_list).add( ((LinkedList) c_list).get(i)) ; 
                           }
			    RESULT = c_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_list",37, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // constant_list ::= constant 
            {
              Object RESULT =null;
		int clistleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object clist = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		   
			   RESULT = clist; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_list",37, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // letting_block ::= LETTING constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) c_list).toArray();	
	        	    Constant[] c_array = new Constant[tmp.length];
			    for(int i=0;i<c_array.length;i++)
 			   	 c_array[i] = (Constant) tmp[i];

			    RESULT = new Declaration(c_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // where_block ::= WHERE expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) e_list).toArray();	
	        	    Expression[] e_array = new Expression[tmp.length];
			    for(int i=0;i<e_array.length;i++)
 			   	 e_array[i] = (Expression) tmp[i];

			    RESULT = new Declaration (e_array);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("where_block",8, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // integer_list ::= INTEGER COMMA integer_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) int_list).addFirst((Integer) i); 
				    RESULT = int_list; 
				 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",36, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // integer_list ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				    list.addFirst((Integer) i);
				    RESULT = list;
                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",36, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // constant_tuple ::= LESS integer_list GREATER 
            {
              Object RESULT =null;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		
                   	Object[] tmp = ((LinkedList) int_list).toArray();
			        int[] int_array = new int[tmp.length];
			        for(int i=0;i<int_array.length;i++)
 				          int_array[i] = (Integer) tmp[i];
 				          
 				    RESULT = new ConstantTuple(int_array);     
                   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_tuple",35, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // constant_tuple_list ::= constant_tuple COMMA constant_tuple_list 
            {
              Object RESULT =null;
		int c_tupleleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int c_tupleright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object c_tuple = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object t_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) t_list).addFirst((ConstantTuple) c_tuple); 
				            RESULT = t_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_tuple_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // constant_tuple_list ::= constant_tuple 
            {
              Object RESULT =null;
		int c_tupleleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int c_tupleright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object c_tuple = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				            list.addFirst((ConstantTuple) c_tuple);
				            RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_tuple_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // atom_list ::= atom_expression COMMA atom_list 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int a_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int a_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object a_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) a_list).addFirst((AtomExpression) atom); 
				  RESULT = a_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // atom_list ::= atom_expression 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				  list.addFirst((AtomExpression) atom);
				  RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // table_constraint ::= TABLE LPAREN LBRACK atom_list RBRACK COMMA LBRACK constant_tuple_list RBRACK RPAREN 
            {
              Object RESULT =null;
		int a_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int a_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		Object a_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object t_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		  
                  	Object[] tmp = ((LinkedList) a_list).toArray();
			        AtomExpression[] id_array = new AtomExpression[tmp.length];
			        for(int i=0;i<id_array.length;i++)
 				          id_array[i] =  (AtomExpression) tmp[i];                   
                   
                    Object[] tmp2 = ((LinkedList) t_list).toArray();
			        ConstantTuple[] t_array = new ConstantTuple[tmp2.length];
			        for(int i=0;i<t_array.length;i++)
 				          t_array[i] =  (ConstantTuple) tmp2[i];        
                   
                   RESULT = new TableConstraint(id_array,
                                                t_array);
                   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("table_constraint",32, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binding_expression ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) id_list).toArray();	
	        	    String[] id_array = new String[tmp.length];
			    for(int i=0;i<id_array.length;i++)
 			   	 id_array[i] = (String) tmp[i];
				 
			    RESULT = new BindingExpression(new DomainIdentifiers(id_array,(Domain) d )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binding_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // quantifier ::= SUM 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.SUM); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // quantifier ::= FORALL 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.FORALL); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // quantifier ::= EXISTS 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.EXISTS); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // quantifierop_expression ::= quantifier binding_expression DOT expression 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int bind_eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int bind_eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object bind_e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new QuantificationExpression((Quantifier) q, 
								       (BindingExpression) bind_e, 
								        (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifierop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lex_expression ::= expression LEXGEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_GEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lex_expression ::= expression LEXLEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_LEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lex_expression ::= expression LEXGREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_GREATER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lex_expression ::= expression LEXLESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_LESS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // functionop_expression ::= ELEMENT LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ELEMENT,
	                									(Expression) e1,
	                									(Expression) e2,
	                									(Expression) e3);   
	              
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // functionop_expression ::= OCCURRENCE LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.OCCURRENCE,
	                                                   (Expression) e1,
	                                                   (Expression) e2,
	                                                   (Expression) e3);   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // functionop_expression ::= ATMOST LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ATMOST,
									(Expression) e1,
									(Expression) e2,
									(Expression) e3); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // functionop_expression ::= ATLEAST LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ATLEAST,
									(Expression) e1,
									(Expression) e2,
									(Expression) e3); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // functionop_expression ::= MAX LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.MAX, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // functionop_expression ::= MIN LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.MIN, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // functionop_expression ::= ALLDIFF LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ALLDIFF, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binaryop_expression ::= expression IFF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.IFF), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binaryop_expression ::= expression IF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.IF), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binaryop_expression ::= expression OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.OR), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binaryop_expression ::= expression AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.AND), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binaryop_expression ::= expression POWER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.POWER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binaryop_expression ::= expression DIVISION expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.DIVIDE), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binaryop_expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.MULT), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binaryop_expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.MINUS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // binaryop_expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(	
			(Expression) e1, new BinaryOperator (EssenceGlobals.PLUS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // binaryop_expression ::= expression GEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.GEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binaryop_expression ::= expression GREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.GREATER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binaryop_expression ::= expression LEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.LEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // binaryop_expression ::= expression LESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.LESS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // binaryop_expression ::= expression NEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.NEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // binaryop_expression ::= expression EQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.EQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unitop_expression ::= NOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryExpression(EssenceGlobals.NOT, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unitop_expression ::= BAR expression BAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new UnaryExpression(EssenceGlobals.ABS, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unitop_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryExpression(EssenceGlobals.NEGATION, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atom_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomExpression(new AtomicExpression(new String(id))); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atom_expression ::= deref_expression 
            {
              Object RESULT =null;
		int derefleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int derefright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object deref = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomExpression((NonAtomicExpression) deref); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // deref_expression ::= expression LBRACK expression_list RBRACK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) e_list).toArray();	
	        	    Expression[] e_array = new Expression[tmp.length];
			    for(int i=0;i<e_array.length;i++)
 			   	 e_array[i] = (Expression) tmp[i];
	
			  RESULT = new NonAtomicExpression(EssenceGlobals.NONATOMIC_EXPR_BRACKET, 
								(Expression)  e,
								 e_array ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("deref_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atomic_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomicExpression(new String(id)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atomic_expression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new AtomicExpression(false); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atomic_expression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new AtomicExpression(true); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atomic_expression ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				  RESULT = new AtomicExpression(i); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= table_constraint 
            {
              Object RESULT =null;
		int tab_constraintleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int tab_constraintright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object tab_constraint = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression((TableConstraint) tab_constraint);
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= lex_expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression((LexExpression) le);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= quantifierop_expression 
            {
              Object RESULT =null;
		int qeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int qeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object qe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (QuantificationExpression) qe); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= functionop_expression 
            {
              Object RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object fe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (FunctionExpression) fe); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= binaryop_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (BinaryExpression) be); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= unitop_expression 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (UnaryExpression) ue); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= deref_expression 
            {
              Object RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (NonAtomicExpression) de); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= atomic_expression 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (AtomicExpression) ae); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new Expression((Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression_list ::= expression COMMA expression_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) e_list).addFirst(e); 
				   RESULT = e_list;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList e_list = new LinkedList();	
				   e_list.addFirst(e); 
				   RESULT = e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // range_atom ::= expression DOTDOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new RangeAtom((Expression) e1, (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // range_atom ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
				RESULT = new RangeAtom(EssenceGlobals.RANGE_EXPR, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // range_atom_list ::= range_atom COMMA range_atom_list 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int ra_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ra_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ra_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) ra_list).addFirst(  ra); 
				   RESULT = ra_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom_list",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // range_atom_list ::= range_atom 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				   list.addFirst(  ra);
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom_list",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // domain_list ::= domain_list COMMA domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) d_list).add(  d); 
		       RESULT = d_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // domain_list ::= domain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
		      list.add(  d); 
		      RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // domain ::= MATRIX_INDEXED_BY LBRACK domain_list RBRACK OF domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) d_list).toArray();	
	        	    Domain[] d_array = new Domain[tmp.length];
			    for(int i=0;i<d_array.length;i++)
 			   	 d_array[i] = (Domain) tmp[i];

	                   
			    RESULT = new Domain(new MatrixDomain(d_array, (Domain) d) ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // domain ::= INT LPAREN range_atom_list RPAREN 
            {
              Object RESULT =null;
		int ra_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int ra_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object ra_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) ra_list).toArray();	
	        	    RangeAtom[] ra_array = new RangeAtom[tmp.length];
			    for(int i=0;i<ra_array.length;i++)
 			   	 ra_array[i] = (RangeAtom) tmp[i];			  
	  
			   RESULT = new Domain(new IntegerDomain(ra_array)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // domain ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 if(id.equals("bool")) 
			     RESULT = new Domain();
	                   else 
			     RESULT = new Domain(new IdentifierDomain(new String(id) )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // domain ::= LPAREN domain RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = (Domain) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) id_list).addFirst(new String(id)); 
				    RESULT = id_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 	
			           LinkedList list = new LinkedList();
				   list.addFirst(new String(id));
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // domain_identifiers ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			  Object[] tmp = ((LinkedList) id_list).toArray();
			  String[] id_array = new String[tmp.length];
			  for(int i=0;i<id_array.length;i++)
 				id_array[i] = (String) tmp[i];

			 RESULT = new DomainIdentifiers(id_array, (Domain) d); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_identifiers",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // infinite_parameter_domain ::= INT 
            {
              Object RESULT =null;
		 RESULT = new Domain(new IntegerDomain()); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // infinite_parameter_domain ::= INT LPAREN DOTDOT RPAREN 
            {
              Object RESULT =null;
		 RESULT = new Domain(new IntegerDomain()); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // infinite_parameter_domain ::= INT LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = new Domain(new IntegerDomain()); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // infinite_parameter_domain ::= INT LPAREN DOTDOT expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
                      RESULT = new Domain(new IntegerDomain(new RangeAtom[] {new RangeAtom(EssenceGlobals.RANGE_DOTS_EXPR ,(Expression) e) } )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // infinite_parameter_domain ::= INT LPAREN expression DOTDOT RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
                        RESULT = new Domain(
                                     new IntegerDomain(
                                           new RangeAtom[] {new RangeAtom(EssenceGlobals.RANGE_EXPR_DOTS ,(Expression) e) } 
                                 )); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameter ::= identifier_list COLON infinite_parameter_domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		
		      Object[] tmp = ((LinkedList) id_list).toArray();
			  String[] id_array = new String[tmp.length];
			  for(int i=0;i<id_array.length;i++)
 				id_array[i] = (String) tmp[i];
		    
		    RESULT = new Parameter(new DomainIdentifiers(id_array, (Domain) d)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameter ::= IDENTIFIER ENUM LPAREN DOT DOT DOT RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		 RESULT = new Parameter(id); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter ::= domain_identifiers 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Parameter((DomainIdentifiers) di); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object p_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) p_list).addFirst(p); 
		            RESULT = p_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameter_list ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			   LinkedList list = new LinkedList();
			   list.addFirst(p); 
			   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // given_block ::= GIVEN parameter_list 
            {
              Object RESULT =null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) p_list).toArray();	
	            Parameter[] p_array = new Parameter[tmp.length];
		    for(int i=0;i<p_array.length;i++)
 				p_array[i] = (Parameter) tmp[i];

 		    RESULT = new Declaration(p_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("given_block",7, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= find_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =(Declaration)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= letting_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= where_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= given_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_list ::= declaration declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) d_list).addFirst((Declaration) d);
				  RESULT = d_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				   list.addFirst((Declaration) d); 
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Object RESULT =null;
			  RESULT = new LinkedList(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declarations objective constraint_block 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object expr_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp1 = ((LinkedList) d_list).toArray();
	            Declaration[] d_array = new Declaration[tmp1.length];
		    for(int i=0;i<d_array.length;i++)
 				d_array[i] = (Declaration) tmp1[i];

                    Object[] tmp2 = ((LinkedList) expr_list).toArray();	
	            Expression[] expr_array = new Expression[tmp2.length];
		    for(int i=0;i<expr_array.length;i++)
 				expr_array[i] = (Expression) tmp2[i];

		 RESULT = new EssenceSpecification(d_array,
						   (Objective)  obj,
						   expr_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= essencemodel EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		RESULT = start_val;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EssencePrimeParser$parser.done_parsing();
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // essencemodel ::= HEADER body 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (EssenceSpecification) b; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("essencemodel",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

