
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 13 19:47:09 GMT 2007
//----------------------------------------------------

package translator.essencePrimeParser;

import translator.conjureEssenceSpecification.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 13 19:47:09 GMT 2007
  */
public class EssencePrimeParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EssencePrimeParser() {super();}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\011\004\000\002\016\003\000\002\016\005\000\002\017" +
    "\003\000\002\017\011\000\002\017\005\000\002\020\007" +
    "\000\002\020\007\000\002\020\005\000\002\020\006\000" +
    "\002\020\003\000\002\021\005\000\002\022\003\000\002" +
    "\022\005\000\002\023\005\000\002\023\003\000\002\023" +
    "\006\000\002\023\010\000\002\024\003\000\002\024\005" +
    "\000\002\025\003\000\002\025\005\000\002\026\003\000" +
    "\002\026\005\000\002\030\003\000\002\030\005\000\002" +
    "\027\005\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\016\000" +
    "\002\027\016\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\006\000\002\034" +
    "\003\000\002\034\004\000\002\034\004\000\002\034\005" +
    "\000\002\034\003\000\002\034\005\000\002\035\003\000" +
    "\002\035\005\000\002\033\003\000\002\033\003\000\002" +
    "\036\004\000\002\036\005\000\002\036\004\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\041\006\000\002\041\006" +
    "\000\002\041\006\000\002\041\012\000\002\041\012\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\042\006\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\044\005\000\002\045\014" +
    "\000\002\046\003\000\002\046\005\000\002\047\003\000" +
    "\002\047\005\000\002\050\005\000\002\051\003\000\002" +
    "\051\004\000\002\051\005\000\002\012\004\000\002\013" +
    "\004\000\002\014\004\000\002\052\003\000\002\052\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\007\000" +
    "\002\054\007\000\002\054\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\055\005\000\002\053\003" +
    "\000\002\053\005\000\002\056\005\000\002\057\006\000" +
    "\002\015\004\000\002\060\003\000\002\060\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\002\000\002\010" +
    "\004\000\002\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\004\021\004\001\002\000\024\002\ufffd\016" +
    "\016\020\007\023\022\027\ufffd\031\ufffd\033\023\036\ufffd" +
    "\042\011\001\002\000\004\002\006\001\002\000\004\002" +
    "\000\001\002\000\004\103\u010f\001\002\000\024\002\ufff9" +
    "\016\ufff9\020\ufff9\023\ufff9\027\ufff9\031\ufff9\033\ufff9\036" +
    "\ufff9\042\ufff9\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\052\015\053\017\033\030\063\032\061\034" +
    "\060\037\034\040\043\041\041\043\042\055\064\065\054" +
    "\074\035\103\040\104\062\001\002\000\024\002\ufffa\016" +
    "\ufffa\020\ufffa\023\ufffa\027\ufffa\031\ufffa\033\ufffa\036\ufffa" +
    "\042\ufffa\001\002\000\024\002\ufffc\016\016\020\007\023" +
    "\022\027\ufffc\031\ufffc\033\023\036\ufffc\042\011\001\002" +
    "\000\024\002\ufff6\016\ufff6\020\ufff6\023\ufff6\027\ufff6\031" +
    "\ufff6\033\ufff6\036\ufff6\042\ufff6\001\002\000\004\002\001" +
    "\001\002\000\004\103\207\001\002\000\024\002\ufff7\016" +
    "\ufff7\020\ufff7\023\ufff7\027\ufff7\031\ufff7\033\ufff7\036\ufff7" +
    "\042\ufff7\001\002\000\012\002\ufffe\027\ufffe\031\ufffe\036" +
    "\ufffe\001\002\000\024\002\ufff8\016\ufff8\020\ufff8\023\ufff8" +
    "\027\ufff8\031\ufff8\033\ufff8\036\ufff8\042\ufff8\001\002\000" +
    "\004\103\207\001\002\000\004\103\207\001\002\000\012" +
    "\002\uff7e\027\027\031\026\036\uff7e\001\002\000\006\002" +
    "\uff7c\036\333\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\052\015\053\017\033\030\063\032\061\034" +
    "\060\037\034\040\043\041\041\043\042\055\064\065\054" +
    "\074\035\103\040\104\062\001\002\000\050\004\056\005" +
    "\031\006\057\013\055\014\052\015\053\017\033\030\063" +
    "\032\061\034\060\037\034\040\043\041\041\043\042\055" +
    "\064\065\054\074\035\103\040\104\062\001\002\000\104" +
    "\002\uffda\016\uffda\020\uffda\023\uffda\027\uffda\031\uffda\033" +
    "\uffda\036\uffda\042\uffda\044\uffda\050\uffda\052\uffda\053\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\072\uffda" +
    "\073\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102" +
    "\uffda\001\002\000\004\043\316\001\002\000\104\002\uffd8" +
    "\016\uffd8\020\uffd8\023\uffd8\027\uffd8\031\uffd8\033\uffd8\036" +
    "\uffd8\042\uffd8\044\uffd8\050\uffd8\052\uffd8\053\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\072\uffd8\073\uffd8" +
    "\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\001" +
    "\002\000\004\103\uffa4\001\002\000\004\103\uffa3\001\002" +
    "\000\050\004\056\005\031\006\057\013\055\014\052\015" +
    "\053\017\033\030\063\032\061\034\060\037\034\040\043" +
    "\041\041\043\042\055\064\065\054\074\035\103\040\104" +
    "\062\001\002\000\104\002\uffd3\016\uffd3\020\uffd3\023\uffd3" +
    "\027\uffd3\031\uffd3\033\uffd3\036\uffd3\042\uffd3\044\uffd3\050" +
    "\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\070\uffd3\072\uffd3\073\uffd3\075\uffd3\076\uffd3\077\uffd3" +
    "\100\uffd3\101\uffd3\102\uffd3\001\002\000\104\002\uffd5\016" +
    "\uffd5\020\uffd5\023\uffd5\027\uffd5\031\uffd5\033\uffd5\036\uffd5" +
    "\042\uffd5\044\uffd5\050\uffd5\052\uffd5\053\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\070\uffd5\072\uffd5\073\uffd5\075" +
    "\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\001\002" +
    "\000\106\002\uffcd\016\uffcd\020\uffcd\023\uffcd\027\uffcd\031" +
    "\uffcd\033\uffcd\036\uffcd\042\uffcd\044\uffcd\047\253\050\uffcd" +
    "\052\uffcd\053\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\070\uffcd\072\uffcd\073\uffcd\075\uffcd\076\uffcd\077\uffcd\100" +
    "\uffcd\101\uffcd\102\uffcd\001\002\000\104\002\uffcf\016\uffcf" +
    "\020\uffcf\023\uffcf\027\uffcf\031\uffcf\033\uffcf\036\uffcf\042" +
    "\uffcf\044\uffcf\050\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\072\uffcf\073\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\001\002\000" +
    "\050\004\056\005\031\006\057\013\055\014\052\015\053" +
    "\017\033\030\063\032\061\034\060\037\034\040\043\041" +
    "\041\043\042\055\064\065\054\074\035\103\040\104\062" +
    "\001\002\000\004\043\245\001\002\000\104\002\uffd9\016" +
    "\uffd9\020\uffd9\023\uffd9\027\uffd9\031\uffd9\033\uffd9\036\uffd9" +
    "\042\uffd9\044\uffd9\050\uffd9\052\uffd9\053\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\070\uffd9\072\uffd9\073\uffd9\075" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002" +
    "\000\054\002\uff80\036\uff80\056\103\057\107\060\110\061" +
    "\104\062\075\063\066\064\071\065\101\066\077\067\074" +
    "\070\111\072\070\073\072\075\076\076\102\077\073\100" +
    "\067\101\100\102\105\001\002\000\104\002\uffd7\016\uffd7" +
    "\020\uffd7\023\uffd7\027\uffd7\031\uffd7\033\uffd7\036\uffd7\042" +
    "\uffd7\044\uffd7\050\uffd7\052\uffd7\053\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\072\uffd7\073\uffd7\075\uffd7" +
    "\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\001\002\000" +
    "\104\002\uffd6\016\uffd6\020\uffd6\023\uffd6\027\uffd6\031\uffd6" +
    "\033\uffd6\036\uffd6\042\uffd6\044\uffd6\050\uffd6\052\uffd6\053" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\072" +
    "\uffd6\073\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\001\002\000\104\002\uffd4\016\uffd4\020\uffd4\023" +
    "\uffd4\027\uffd4\031\uffd4\033\uffd4\036\uffd4\042\uffd4\044\uffd4" +
    "\050\uffd4\052\uffd4\053\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\067\uffd4\070\uffd4\072\uffd4\073\uffd4\075\uffd4\076\uffd4\077" +
    "\uffd4\100\uffd4\101\uffd4\102\uffd4\001\002\000\004\103\207" +
    "\001\002\000\004\043\176\001\002\000\104\002\uffce\016" +
    "\uffce\020\uffce\023\uffce\027\uffce\031\uffce\033\uffce\036\uffce" +
    "\042\uffce\044\uffce\050\uffce\052\uffce\053\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\070\uffce\072\uffce\073\uffce\075" +
    "\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102\uffce\001\002" +
    "\000\050\004\056\005\031\006\057\013\055\014\052\015" +
    "\053\017\033\030\063\032\061\034\060\037\034\040\043" +
    "\041\041\043\042\055\064\065\054\074\035\103\040\104" +
    "\062\001\002\000\004\103\uffa5\001\002\000\004\043\172" +
    "\001\002\000\004\043\152\001\002\000\004\043\143\001" +
    "\002\000\004\043\140\001\002\000\104\002\uffd0\016\uffd0" +
    "\020\uffd0\023\uffd0\027\uffd0\031\uffd0\033\uffd0\036\uffd0\042" +
    "\uffd0\044\uffd0\050\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\072\uffd0\073\uffd0\075\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\001\002\000" +
    "\004\043\135\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\052\015\053\017\033\030\063\032\061\034" +
    "\060\037\034\040\043\041\041\043\042\055\064\065\054" +
    "\074\035\103\040\104\062\001\002\000\052\055\106\056" +
    "\103\057\107\060\110\061\104\062\075\063\066\064\071" +
    "\065\101\066\077\067\074\070\111\072\070\073\072\075" +
    "\076\076\102\077\073\100\067\101\100\102\105\001\002" +
    "\000\050\004\056\005\031\006\057\013\055\014\052\015" +
    "\053\017\033\030\063\032\061\034\060\037\034\040\043" +
    "\041\041\043\042\055\064\065\054\074\035\103\040\104" +
    "\062\001\002\000\050\004\056\005\031\006\057\013\055" +
    "\014\052\015\053\017\033\030\063\032\061\034\060\037" +
    "\034\040\043\041\041\043\042\055\064\065\054\074\035" +
    "\103\040\104\062\001\002\000\050\004\056\005\031\006" +
    "\057\013\055\014\052\015\053\017\033\030\063\032\061" +
    "\034\060\037\034\040\043\041\041\043\042\055\064\065" +
    "\054\074\035\103\040\104\062\001\002\000\050\004\056" +
    "\005\031\006\057\013\055\014\052\015\053\017\033\030" +
    "\063\032\061\034\060\037\034\040\043\041\041\043\042" +
    "\055\064\065\054\074\035\103\040\104\062\001\002\000" +
    "\050\004\056\005\031\006\057\013\055\014\052\015\053" +
    "\017\033\030\063\032\061\034\060\037\034\040\043\041" +
    "\041\043\042\055\064\065\054\074\035\103\040\104\062" +
    "\001\002\000\050\004\056\005\031\006\057\013\055\014" +
    "\052\015\053\017\033\030\063\032\061\034\060\037\034" +
    "\040\043\041\041\043\042\055\064\065\054\074\035\103" +
    "\040\104\062\001\002\000\050\004\056\005\031\006\057" +
    "\013\055\014\052\015\053\017\033\030\063\032\061\034" +
    "\060\037\034\040\043\041\041\043\042\055\064\065\054" +
    "\074\035\103\040\104\062\001\002\000\050\004\056\005" +
    "\031\006\057\013\055\014\052\015\053\017\033\030\063" +
    "\032\061\034\060\037\034\040\043\041\041\043\042\055" +
    "\064\065\054\074\035\103\040\104\062\001\002\000\050" +
    "\004\056\005\031\006\057\013\055\014\052\015\053\017" +
    "\033\030\063\032\061\034\060\037\034\040\043\041\041" +
    "\043\042\055\064\065\054\074\035\103\040\104\062\001" +
    "\002\000\050\004\056\005\031\006\057\013\055\014\052" +
    "\015\053\017\033\030\063\032\061\034\060\037\034\040" +
    "\043\041\041\043\042\055\064\065\054\074\035\103\040" +
    "\104\062\001\002\000\050\004\056\005\031\006\057\013" +
    "\055\014\052\015\053\017\033\030\063\032\061\034\060" +
    "\037\034\040\043\041\041\043\042\055\064\065\054\074" +
    "\035\103\040\104\062\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\052\015\053\017\033\030\063\032" +
    "\061\034\060\037\034\040\043\041\041\043\042\055\064" +
    "\065\054\074\035\103\040\104\062\001\002\000\050\004" +
    "\056\005\031\006\057\013\055\014\052\015\053\017\033" +
    "\030\063\032\061\034\060\037\034\040\043\041\041\043" +
    "\042\055\064\065\054\074\035\103\040\104\062\001\002" +
    "\000\050\004\056\005\031\006\057\013\055\014\052\015" +
    "\053\017\033\030\063\032\061\034\060\037\034\040\043" +
    "\041\041\043\042\055\064\065\054\074\035\103\040\104" +
    "\062\001\002\000\050\004\056\005\031\006\057\013\055" +
    "\014\052\015\053\017\033\030\063\032\061\034\060\037" +
    "\034\040\043\041\041\043\042\055\064\065\054\074\035" +
    "\103\040\104\062\001\002\000\050\004\056\005\031\006" +
    "\057\013\055\014\052\015\053\017\033\030\063\032\061" +
    "\034\060\037\034\040\043\041\041\043\042\055\064\065" +
    "\054\074\035\103\040\104\062\001\002\000\104\002\uffc0" +
    "\016\uffc0\020\uffc0\023\uffc0\027\uffc0\031\uffc0\033\uffc0\036" +
    "\uffc0\042\uffc0\044\uffc0\050\uffc0\052\uffc0\053\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\072\uffc0\073\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\001" +
    "\002\000\050\004\056\005\031\006\057\013\055\014\052" +
    "\015\053\017\033\030\063\032\061\034\060\037\034\040" +
    "\043\041\041\043\042\055\064\065\054\074\035\103\040" +
    "\104\062\001\002\000\050\004\056\005\031\006\057\013" +
    "\055\014\052\015\053\017\033\030\063\032\061\034\060" +
    "\037\034\040\043\041\041\043\042\055\064\065\054\074" +
    "\035\103\040\104\062\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\052\015\053\017\033\030\063\032" +
    "\061\034\060\037\034\040\043\041\041\043\042\055\064" +
    "\065\054\074\035\103\040\104\062\001\002\000\104\002" +
    "\uffb4\016\uffb4\020\uffb4\023\uffb4\027\uffb4\031\uffb4\033\uffb4" +
    "\036\uffb4\042\uffb4\044\uffb4\050\uffb4\052\uffb4\053\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\072\070\073" +
    "\072\075\076\076\102\077\uffb4\100\uffb4\101\uffb4\102\uffb4" +
    "\001\002\000\064\002\uffbc\016\uffbc\020\uffbc\023\uffbc\027" +
    "\uffbc\031\uffbc\033\uffbc\036\uffbc\042\uffbc\044\uffbc\050\uffbc" +
    "\052\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\064\071\065" +
    "\101\066\077\067\074\070\111\072\070\073\072\075\076" +
    "\076\102\001\002\000\100\002\uffbd\016\uffbd\020\uffbd\023" +
    "\uffbd\027\uffbd\031\uffbd\033\uffbd\036\uffbd\042\uffbd\044\uffbd" +
    "\050\uffbd\052\uffbd\053\uffbd\055\uffbd\060\110\061\104\062" +
    "\075\063\066\064\071\065\101\066\077\067\074\070\111" +
    "\072\070\073\072\075\076\076\102\077\073\100\067\101" +
    "\100\102\105\001\002\000\064\002\uffa7\016\uffa7\020\uffa7" +
    "\023\uffa7\027\uffa7\031\uffa7\033\uffa7\036\uffa7\042\uffa7\044" +
    "\uffa7\050\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\064\071\065\101\066\077\067\074\070\111\072\070\073" +
    "\072\075\076\076\102\001\002\000\064\002\uffbb\016\uffbb" +
    "\020\uffbb\023\uffbb\027\uffbb\031\uffbb\033\uffbb\036\uffbb\042" +
    "\uffbb\044\uffbb\050\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\064\071\065\101\066\077\067\074\070\111\072" +
    "\070\073\072\075\076\076\102\001\002\000\100\002\uffbe" +
    "\016\uffbe\020\uffbe\023\uffbe\027\uffbe\031\uffbe\033\uffbe\036" +
    "\uffbe\042\uffbe\044\uffbe\050\uffbe\052\uffbe\053\uffbe\055\uffbe" +
    "\060\110\061\104\062\075\063\066\064\071\065\101\066" +
    "\077\067\074\070\111\072\070\073\072\075\076\076\102" +
    "\077\073\100\067\101\100\102\105\001\002\000\104\002" +
    "\uffb0\016\uffb0\020\uffb0\023\uffb0\027\uffb0\031\uffb0\033\uffb0" +
    "\036\uffb0\042\uffb0\044\uffb0\050\uffb0\052\uffb0\053\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\072\070\073" +
    "\072\075\076\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\001\002\000\104\002\uffb7\016\uffb7\020\uffb7\023\uffb7\027" +
    "\uffb7\031\uffb7\033\uffb7\036\uffb7\042\uffb7\044\uffb7\050\uffb7" +
    "\052\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\077\067\074" +
    "\070\111\072\070\073\072\075\076\076\102\077\uffb7\100" +
    "\uffb7\101\uffb7\102\uffb7\001\002\000\064\002\uffa8\016\uffa8" +
    "\020\uffa8\023\uffa8\027\uffa8\031\uffa8\033\uffa8\036\uffa8\042" +
    "\uffa8\044\uffa8\050\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\064\071\065\101\066\077\067\074\070\111\072" +
    "\070\073\072\075\076\076\102\001\002\000\104\002\uffb6" +
    "\016\uffb6\020\uffb6\023\uffb6\027\uffb6\031\uffb6\033\uffb6\036" +
    "\uffb6\042\uffb6\044\uffb6\050\uffb6\052\uffb6\053\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\067\uffb6\070\111\072\070\073\072" +
    "\075\076\076\102\077\uffb6\100\uffb6\101\uffb6\102\uffb6\001" +
    "\002\000\104\002\uffb1\016\uffb1\020\uffb1\023\uffb1\027\uffb1" +
    "\031\uffb1\033\uffb1\036\uffb1\042\uffb1\044\uffb1\050\uffb1\052" +
    "\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\072\070\073\072\075\uffb1\076\uffb1\077\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\001\002\000\064\002\uffba\016\uffba\020" +
    "\uffba\023\uffba\027\uffba\031\uffba\033\uffba\036\uffba\042\uffba" +
    "\044\uffba\050\uffba\052\uffba\053\uffba\055\uffba\056\uffba\057" +
    "\uffba\064\071\065\101\066\077\067\074\070\111\072\070" +
    "\073\072\075\076\076\102\001\002\000\104\002\uffb5\016" +
    "\uffb5\020\uffb5\023\uffb5\027\uffb5\031\uffb5\033\uffb5\036\uffb5" +
    "\042\uffb5\044\uffb5\050\uffb5\052\uffb5\053\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\070\111\072\070\073\072\075" +
    "\076\076\102\077\uffb5\100\uffb5\101\uffb5\102\uffb5\001\002" +
    "\000\064\002\uffaa\016\uffaa\020\uffaa\023\uffaa\027\uffaa\031" +
    "\uffaa\033\uffaa\036\uffaa\042\uffaa\044\uffaa\050\uffaa\052\uffaa" +
    "\053\uffaa\055\uffaa\056\uffaa\057\uffaa\064\071\065\101\066" +
    "\077\067\074\070\111\072\070\073\072\075\076\076\102" +
    "\001\002\000\104\002\uffb2\016\uffb2\020\uffb2\023\uffb2\027" +
    "\uffb2\031\uffb2\033\uffb2\036\uffb2\042\uffb2\044\uffb2\050\uffb2" +
    "\052\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2" +
    "\070\uffb2\072\070\073\uffb2\075\uffb2\076\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\001\002\000\104\002\uffb8\016\uffb8" +
    "\020\uffb8\023\uffb8\027\uffb8\031\uffb8\033\uffb8\036\uffb8\042" +
    "\uffb8\044\uffb8\050\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\077\067\074\070\111\072\070\073\072\075\076" +
    "\076\102\077\uffb8\100\uffb8\101\uffb8\102\uffb8\001\002\000" +
    "\104\002\uffb3\016\uffb3\020\uffb3\023\uffb3\027\uffb3\031\uffb3" +
    "\033\uffb3\036\uffb3\042\uffb3\044\uffb3\050\uffb3\052\uffb3\053" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\072" +
    "\uffb3\073\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3" +
    "\102\uffb3\001\002\000\064\002\uffa9\016\uffa9\020\uffa9\023" +
    "\uffa9\027\uffa9\031\uffa9\033\uffa9\036\uffa9\042\uffa9\044\uffa9" +
    "\050\uffa9\052\uffa9\053\uffa9\055\uffa9\056\uffa9\057\uffa9\064" +
    "\071\065\101\066\077\067\074\070\111\072\070\073\072" +
    "\075\076\076\102\001\002\000\064\002\uffb9\016\uffb9\020" +
    "\uffb9\023\uffb9\027\uffb9\031\uffb9\033\uffb9\036\uffb9\042\uffb9" +
    "\044\uffb9\050\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\064\071\065\101\066\077\067\074\070\111\072\070" +
    "\073\072\075\076\076\102\001\002\000\050\004\056\005" +
    "\031\006\057\013\055\014\052\015\053\017\033\030\063" +
    "\032\061\034\060\037\034\040\043\041\041\043\042\055" +
    "\064\065\054\074\035\103\040\104\062\001\002\000\052" +
    "\044\137\056\103\057\107\060\110\061\104\062\075\063" +
    "\066\064\071\065\101\066\077\067\074\070\111\072\070" +
    "\073\072\075\076\076\102\077\073\100\067\101\100\102" +
    "\105\001\002\000\104\002\uffad\016\uffad\020\uffad\023\uffad" +
    "\027\uffad\031\uffad\033\uffad\036\uffad\042\uffad\044\uffad\050" +
    "\uffad\052\uffad\053\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\070\uffad\072\uffad\073\uffad\075\uffad\076\uffad\077\uffad" +
    "\100\uffad\101\uffad\102\uffad\001\002\000\050\004\056\005" +
    "\031\006\057\013\055\014\052\015\053\017\033\030\063" +
    "\032\061\034\060\037\034\040\043\041\041\043\042\055" +
    "\064\065\054\074\035\103\040\104\062\001\002\000\052" +
    "\044\142\056\103\057\107\060\110\061\104\062\075\063" +
    "\066\064\071\065\101\066\077\067\074\070\111\072\070" +
    "\073\072\075\076\076\102\077\073\100\067\101\100\102" +
    "\105\001\002\000\104\002\uffae\016\uffae\020\uffae\023\uffae" +
    "\027\uffae\031\uffae\033\uffae\036\uffae\042\uffae\044\uffae\050" +
    "\uffae\052\uffae\053\uffae\055\uffae\056\uffae\057\uffae\060\uffae" +
    "\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067" +
    "\uffae\070\uffae\072\uffae\073\uffae\075\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\102\uffae\001\002\000\050\004\056\005" +
    "\031\006\057\013\055\014\052\015\053\017\033\030\063" +
    "\032\061\034\060\037\034\040\043\041\041\043\042\055" +
    "\064\065\054\074\035\103\040\104\062\001\002\000\052" +
    "\053\145\056\103\057\107\060\110\061\104\062\075\063" +
    "\066\064\071\065\101\066\077\067\074\070\111\072\070" +
    "\073\072\075\076\076\102\077\073\100\067\101\100\102" +
    "\105\001\002\000\050\004\056\005\031\006\057\013\055" +
    "\014\052\015\053\017\033\030\063\032\061\034\060\037" +
    "\034\040\043\041\041\043\042\055\064\065\054\074\035" +
    "\103\040\104\062\001\002\000\052\053\147\056\103\057" +
    "\107\060\110\061\104\062\075\063\066\064\071\065\101" +
    "\066\077\067\074\070\111\072\070\073\072\075\076\076" +
    "\102\077\073\100\067\101\100\102\105\001\002\000\050" +
    "\004\056\005\031\006\057\013\055\014\052\015\053\017" +
    "\033\030\063\032\061\034\060\037\034\040\043\041\041" +
    "\043\042\055\064\065\054\074\035\103\040\104\062\001" +
    "\002\000\052\044\151\056\103\057\107\060\110\061\104" +
    "\062\075\063\066\064\071\065\101\066\077\067\074\070" +
    "\111\072\070\073\072\075\076\076\102\077\073\100\067" +
    "\101\100\102\105\001\002\000\104\002\uffac\016\uffac\020" +
    "\uffac\023\uffac\027\uffac\031\uffac\033\uffac\036\uffac\042\uffac" +
    "\044\uffac\050\uffac\052\uffac\053\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\070\uffac\072\uffac\073\uffac\075\uffac\076" +
    "\uffac\077\uffac\100\uffac\101\uffac\102\uffac\001\002\000\050" +
    "\004\056\005\031\006\057\013\055\014\052\015\053\017" +
    "\033\030\063\032\061\034\060\037\034\040\043\041\041" +
    "\043\042\055\064\065\054\074\035\103\040\104\062\001" +
    "\002\000\052\053\154\056\103\057\107\060\110\061\104" +
    "\062\075\063\066\064\071\065\101\066\077\067\074\070" +
    "\111\072\070\073\072\075\076\076\102\077\073\100\067" +
    "\101\100\102\105\001\002\000\004\047\155\001\002\000" +
    "\006\065\157\104\156\001\002\000\010\050\uff9b\053\170" +
    "\062\uff9b\001\002\000\004\104\167\001\002\000\004\050" +
    "\161\001\002\000\004\053\162\001\002\000\004\047\163" +
    "\001\002\000\006\065\157\104\156\001\002\000\004\050" +
    "\165\001\002\000\004\044\166\001\002\000\104\002\uffd1" +
    "\016\uffd1\020\uffd1\023\uffd1\027\uffd1\031\uffd1\033\uffd1\036" +
    "\uffd1\042\uffd1\044\uffd1\050\uffd1\052\uffd1\053\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\072\uffd1\073\uffd1" +
    "\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\001" +
    "\002\000\006\050\uff9a\062\uff9a\001\002\000\006\065\157" +
    "\104\156\001\002\000\006\050\uff99\062\uff99\001\002\000" +
    "\050\004\056\005\031\006\057\013\055\014\052\015\053" +
    "\017\033\030\063\032\061\034\060\037\034\040\043\041" +
    "\041\043\042\055\064\065\054\074\035\103\040\104\062" +
    "\001\002\000\052\044\174\056\103\057\107\060\110\061" +
    "\104\062\075\063\066\064\071\065\101\066\077\067\074" +
    "\070\111\072\070\073\072\075\076\076\102\077\073\100" +
    "\067\101\100\102\105\001\002\000\104\002\uffaf\016\uffaf" +
    "\020\uffaf\023\uffaf\027\uffaf\031\uffaf\033\uffaf\036\uffaf\042" +
    "\uffaf\044\uffaf\050\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\066\uffaf\067\uffaf\070\uffaf\072\uffaf\073\uffaf\075\uffaf" +
    "\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\001\002\000" +
    "\104\002\uffc1\016\uffc1\020\uffc1\023\uffc1\027\uffc1\031\uffc1" +
    "\033\uffc1\036\uffc1\042\uffc1\044\uffc1\050\uffc1\052\uffc1\053" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\072" +
    "\070\073\072\075\076\076\102\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\001\002\000\050\004\056\005\031\006\057\013" +
    "\055\014\052\015\053\017\033\030\063\032\061\034\060" +
    "\037\034\040\043\041\041\043\042\055\064\065\054\074" +
    "\035\103\040\104\062\001\002\000\052\053\200\056\103" +
    "\057\107\060\110\061\104\062\075\063\066\064\071\065" +
    "\101\066\077\067\074\070\111\072\070\073\072\075\076" +
    "\076\102\077\073\100\067\101\100\102\105\001\002\000" +
    "\050\004\056\005\031\006\057\013\055\014\052\015\053" +
    "\017\033\030\063\032\061\034\060\037\034\040\043\041" +
    "\041\043\042\055\064\065\054\074\035\103\040\104\062" +
    "\001\002\000\052\053\202\056\103\057\107\060\110\061" +
    "\104\062\075\063\066\064\071\065\101\066\077\067\074" +
    "\070\111\072\070\073\072\075\076\076\102\077\073\100" +
    "\067\101\100\102\105\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\052\015\053\017\033\030\063\032" +
    "\061\034\060\037\034\040\043\041\041\043\042\055\064" +
    "\065\054\074\035\103\040\104\062\001\002\000\052\044" +
    "\204\056\103\057\107\060\110\061\104\062\075\063\066" +
    "\064\071\065\101\066\077\067\074\070\111\072\070\073" +
    "\072\075\076\076\102\077\073\100\067\101\100\102\105" +
    "\001\002\000\104\002\uffab\016\uffab\020\uffab\023\uffab\027" +
    "\uffab\031\uffab\033\uffab\036\uffab\042\uffab\044\uffab\050\uffab" +
    "\052\uffab\053\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab" +
    "\070\uffab\072\uffab\073\uffab\075\uffab\076\uffab\077\uffab\100" +
    "\uffab\101\uffab\102\uffab\001\002\000\004\051\243\001\002" +
    "\000\004\054\212\001\002\000\022\007\uffe9\010\uffe9\011" +
    "\uffe9\025\uffe9\026\uffe9\046\uffe9\053\210\054\uffe9\001\002" +
    "\000\004\103\207\001\002\000\020\007\uffe8\010\uffe8\011" +
    "\uffe8\025\uffe8\026\uffe8\046\uffe8\054\uffe8\001\002\000\012" +
    "\022\217\024\213\043\216\103\214\001\002\000\004\047" +
    "\233\001\002\000\040\002\uffe6\007\uffe6\016\uffe6\020\uffe6" +
    "\023\uffe6\025\uffe6\027\uffe6\031\uffe6\033\uffe6\036\uffe6\042" +
    "\uffe6\044\uffe6\050\uffe6\051\uffe6\053\uffe6\001\002\000\004" +
    "\051\uffa2\001\002\000\012\022\217\024\213\043\216\103" +
    "\214\001\002\000\004\043\220\001\002\000\050\004\056" +
    "\005\031\006\057\013\055\014\052\015\053\017\033\030" +
    "\063\032\061\034\060\037\034\040\043\041\041\043\042" +
    "\055\064\065\054\074\035\103\040\104\062\001\002\000" +
    "\006\044\uffe1\053\227\001\002\000\056\044\uffdf\052\225" +
    "\053\uffdf\056\103\057\107\060\110\061\104\062\075\063" +
    "\066\064\071\065\101\066\077\067\074\070\111\072\070" +
    "\073\072\075\076\076\102\077\073\100\067\101\100\102" +
    "\105\001\002\000\004\044\224\001\002\000\040\002\uffe5" +
    "\007\uffe5\016\uffe5\020\uffe5\023\uffe5\025\uffe5\027\uffe5\031" +
    "\uffe5\033\uffe5\036\uffe5\042\uffe5\044\uffe5\050\uffe5\051\uffe5" +
    "\053\uffe5\001\002\000\050\004\056\005\031\006\057\013" +
    "\055\014\052\015\053\017\033\030\063\032\061\034\060" +
    "\037\034\040\043\041\041\043\042\055\064\065\054\074" +
    "\035\103\040\104\062\001\002\000\054\044\uffde\053\uffde" +
    "\056\103\057\107\060\110\061\104\062\075\063\066\064" +
    "\071\065\101\066\077\067\074\070\111\072\070\073\072" +
    "\075\076\076\102\077\073\100\067\101\100\102\105\001" +
    "\002\000\050\004\056\005\031\006\057\013\055\014\052" +
    "\015\053\017\033\030\063\032\061\034\060\037\034\040" +
    "\043\041\041\043\042\055\064\065\054\074\035\103\040" +
    "\104\062\001\002\000\004\044\uffe0\001\002\000\004\044" +
    "\232\001\002\000\040\002\uffe7\007\uffe7\016\uffe7\020\uffe7" +
    "\023\uffe7\025\uffe7\027\uffe7\031\uffe7\033\uffe7\036\uffe7\042" +
    "\uffe7\044\uffe7\050\uffe7\051\uffe7\053\uffe7\001\002\000\012" +
    "\022\217\024\213\043\216\103\214\001\002\000\006\050" +
    "\237\053\236\001\002\000\006\050\uffe3\053\uffe3\001\002" +
    "\000\012\022\217\024\213\043\216\103\214\001\002\000" +
    "\004\035\240\001\002\000\012\022\217\024\213\043\216" +
    "\103\214\001\002\000\040\002\uffe4\007\uffe4\016\uffe4\020" +
    "\uffe4\023\uffe4\025\uffe4\027\uffe4\031\uffe4\033\uffe4\036\uffe4" +
    "\042\uffe4\044\uffe4\050\uffe4\051\uffe4\053\uffe4\001\002\000" +
    "\006\050\uffe2\053\uffe2\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\052\015\053\017\033\030\063\032" +
    "\061\034\060\037\034\040\043\041\041\043\042\055\064" +
    "\065\054\074\035\103\040\104\062\001\002\000\104\002" +
    "\uffa6\016\uffa6\020\uffa6\023\uffa6\027\uffa6\031\uffa6\033\uffa6" +
    "\036\uffa6\042\uffa6\044\uffa6\050\uffa6\052\uffa6\053\uffa6\055" +
    "\uffa6\056\103\057\107\060\110\061\104\062\075\063\066" +
    "\064\071\065\101\066\077\067\074\070\111\072\070\073" +
    "\072\075\076\076\102\077\073\100\067\101\100\102\105" +
    "\001\002\000\004\047\246\001\002\000\004\103\252\001" +
    "\002\000\004\050\300\001\002\000\006\050\uffc3\053\uffc3" +
    "\001\002\000\006\050\uffa0\053\276\001\002\000\010\047" +
    "\253\050\uffc2\053\uffc2\001\002\000\052\004\056\005\031" +
    "\006\057\013\055\014\052\015\053\017\033\030\063\032" +
    "\061\034\060\037\034\040\043\041\041\043\255\052\257" +
    "\055\064\065\054\074\035\103\040\104\062\001\002\000" +
    "\006\050\uffc5\053\274\001\002\000\050\004\056\005\031" +
    "\006\057\013\055\014\052\015\053\017\033\030\063\032" +
    "\061\034\060\037\034\040\043\041\041\043\042\055\064" +
    "\065\054\074\035\103\040\104\062\001\002\000\056\050" +
    "\uffc7\052\263\053\uffc7\056\103\057\107\060\110\061\104" +
    "\062\075\063\066\064\071\065\101\066\077\067\074\070" +
    "\111\072\070\073\072\075\076\076\102\077\073\100\067" +
    "\101\100\102\105\001\002\000\054\004\056\005\031\006" +
    "\057\013\055\014\052\015\053\017\033\030\063\032\061" +
    "\034\060\037\034\040\043\041\041\043\042\050\uffcb\053" +
    "\uffcb\055\064\065\054\074\035\103\040\104\062\001\002" +
    "\000\004\050\261\001\002\000\104\002\uffcc\016\uffcc\020" +
    "\uffcc\023\uffcc\027\uffcc\031\uffcc\033\uffcc\036\uffcc\042\uffcc" +
    "\044\uffcc\050\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\072\uffcc\073\uffcc\075\uffcc\076" +
    "\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\001\002\000\054" +
    "\050\uffca\053\uffca\056\103\057\107\060\110\061\104\062" +
    "\075\063\066\064\071\065\101\066\077\067\074\070\111" +
    "\072\070\073\072\075\076\076\102\077\073\100\067\101" +
    "\100\102\105\001\002\000\054\004\056\005\031\006\057" +
    "\013\055\014\052\015\053\017\033\030\063\032\061\034" +
    "\060\037\034\040\043\041\041\043\042\050\uffc9\053\uffc9" +
    "\055\064\065\054\074\035\103\040\104\062\001\002\000" +
    "\054\050\uffc8\053\uffc8\056\103\057\107\060\110\061\104" +
    "\062\075\063\066\064\071\065\101\066\077\067\074\070" +
    "\111\072\070\073\072\075\076\076\102\077\073\100\067" +
    "\101\100\102\105\001\002\000\054\044\270\053\271\056" +
    "\103\057\107\060\110\061\104\062\075\063\066\064\071" +
    "\065\101\066\077\067\074\070\111\072\070\073\072\075" +
    "\076\076\102\077\073\100\067\101\100\102\105\001\002" +
    "\000\004\044\267\001\002\000\006\050\uffc6\053\uffc6\001" +
    "\002\000\104\002\uffdb\016\uffdb\020\uffdb\023\uffdb\027\uffdb" +
    "\031\uffdb\033\uffdb\036\uffdb\042\uffdb\044\uffdb\050\uffdb\052" +
    "\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\072\uffdb\073\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb" +
    "\101\uffdb\102\uffdb\001\002\000\050\004\056\005\031\006" +
    "\057\013\055\014\052\015\053\017\033\030\063\032\061" +
    "\034\060\037\034\040\043\041\041\043\042\055\064\065" +
    "\054\074\035\103\040\104\062\001\002\000\076\002\uffdd" +
    "\016\uffdd\020\uffdd\023\uffdd\027\uffdd\031\uffdd\033\uffdd\036" +
    "\uffdd\042\uffdd\044\uffdd\053\271\056\103\057\107\060\110" +
    "\061\104\062\075\063\066\064\071\065\101\066\077\067" +
    "\074\070\111\072\070\073\072\075\076\076\102\077\073" +
    "\100\067\101\100\102\105\001\002\000\026\002\uffdc\016" +
    "\uffdc\020\uffdc\023\uffdc\027\uffdc\031\uffdc\033\uffdc\036\uffdc" +
    "\042\uffdc\044\uffdc\001\002\000\052\004\056\005\031\006" +
    "\057\013\055\014\052\015\053\017\033\030\063\032\061" +
    "\034\060\037\034\040\043\041\041\043\255\052\257\055" +
    "\064\065\054\074\035\103\040\104\062\001\002\000\004" +
    "\050\uffc4\001\002\000\004\103\252\001\002\000\004\050" +
    "\uff9f\001\002\000\004\053\301\001\002\000\004\047\302" +
    "\001\002\000\004\060\304\001\002\000\004\050\312\001" +
    "\002\000\006\065\157\104\156\001\002\000\006\050\uff9e" +
    "\053\306\001\002\000\004\060\304\001\002\000\004\050" +
    "\uff9d\001\002\000\004\062\311\001\002\000\006\050\uff9c" +
    "\053\uff9c\001\002\000\004\044\313\001\002\000\104\002" +
    "\uffa1\016\uffa1\020\uffa1\023\uffa1\027\uffa1\031\uffa1\033\uffa1" +
    "\036\uffa1\042\uffa1\044\uffa1\050\uffa1\052\uffa1\053\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\072\uffa1\073" +
    "\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1" +
    "\001\002\000\052\044\270\056\103\057\107\060\110\061" +
    "\104\062\075\063\066\064\071\065\101\066\077\067\074" +
    "\070\111\072\070\073\072\075\076\076\102\077\073\100" +
    "\067\101\100\102\105\001\002\000\104\002\uffbf\016\uffbf" +
    "\020\uffbf\023\uffbf\027\uffbf\031\uffbf\033\uffbf\036\uffbf\042" +
    "\uffbf\044\uffbf\050\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\070\uffbf\072\uffbf\073\uffbf\075\uffbf" +
    "\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\001\002\000" +
    "\050\004\056\005\031\006\057\013\055\014\052\015\053" +
    "\017\033\030\063\032\061\034\060\037\034\040\043\041" +
    "\041\043\042\055\064\065\054\074\035\103\040\104\062" +
    "\001\002\000\052\053\320\056\103\057\107\060\110\061" +
    "\104\062\075\063\066\064\071\065\101\066\077\067\074" +
    "\070\111\072\070\073\072\075\076\076\102\077\073\100" +
    "\067\101\100\102\105\001\002\000\004\047\321\001\002" +
    "\000\006\065\157\104\156\001\002\000\004\050\323\001" +
    "\002\000\004\053\324\001\002\000\004\047\325\001\002" +
    "\000\006\065\157\104\156\001\002\000\004\050\327\001" +
    "\002\000\004\044\330\001\002\000\104\002\uffd2\016\uffd2" +
    "\020\uffd2\023\uffd2\027\uffd2\031\uffd2\033\uffd2\036\uffd2\042" +
    "\uffd2\044\uffd2\050\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\067\uffd2\070\uffd2\072\uffd2\073\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\001\002\000" +
    "\054\002\uff7f\036\uff7f\056\103\057\107\060\110\061\104" +
    "\062\075\063\066\064\071\065\101\066\077\067\074\070" +
    "\111\072\070\073\072\075\076\076\102\077\073\100\067" +
    "\101\100\102\105\001\002\000\004\002\uffff\001\002\000" +
    "\050\004\056\005\031\006\057\013\055\014\052\015\053" +
    "\017\033\030\063\032\061\034\060\037\034\040\043\041" +
    "\041\043\042\055\064\065\054\074\035\103\040\104\062" +
    "\001\002\000\004\002\uff7d\001\002\000\026\002\uff95\016" +
    "\uff95\020\uff95\023\uff95\027\uff95\031\uff95\033\uff95\036\uff95" +
    "\042\uff95\053\u0101\001\002\000\016\007\344\010\341\011" +
    "\340\025\345\026\343\054\342\001\002\000\024\002\uff97" +
    "\016\uff97\020\uff97\023\uff97\027\uff97\031\uff97\033\uff97\036" +
    "\uff97\042\uff97\001\002\000\004\012\374\001\002\000\012" +
    "\022\217\024\213\043\216\103\214\001\002\000\012\022" +
    "\217\024\213\043\216\103\214\001\002\000\012\022\217" +
    "\024\213\043\216\103\214\001\002\000\052\004\056\005" +
    "\031\006\057\013\055\014\052\015\053\017\033\030\063" +
    "\032\061\034\060\037\034\040\043\041\041\043\042\047" +
    "\347\055\064\065\054\074\035\103\040\104\062\001\002" +
    "\000\052\004\056\005\031\006\057\013\055\014\052\015" +
    "\053\017\033\030\063\032\061\034\060\037\034\040\043" +
    "\041\041\043\042\047\347\055\064\065\054\074\035\103" +
    "\040\104\062\001\002\000\026\002\uff89\016\uff89\020\uff89" +
    "\023\uff89\027\uff89\031\uff89\033\uff89\036\uff89\042\uff89\053" +
    "\uff89\001\002\000\010\047\353\065\157\104\156\001\002" +
    "\000\026\002\uff8b\016\uff8b\020\uff8b\023\uff8b\027\uff8b\031" +
    "\uff8b\033\uff8b\036\uff8b\042\uff8b\053\uff8b\001\002\000\074" +
    "\002\uff8e\016\uff8e\020\uff8e\023\uff8e\027\uff8e\031\uff8e\033" +
    "\uff8e\036\uff8e\042\uff8e\053\uff8e\056\103\057\107\060\110" +
    "\061\104\062\075\063\066\064\071\065\101\066\077\067" +
    "\074\070\111\072\070\073\072\075\076\076\102\077\073" +
    "\100\067\101\100\102\105\001\002\000\006\050\uff87\053" +
    "\360\001\002\000\006\065\157\104\156\001\002\000\004" +
    "\050\357\001\002\000\004\050\356\001\002\000\026\002" +
    "\uff85\016\uff85\020\uff85\023\uff85\027\uff85\031\uff85\033\uff85" +
    "\036\uff85\042\uff85\053\uff85\001\002\000\030\002\uff88\016" +
    "\uff88\020\uff88\023\uff88\027\uff88\031\uff88\033\uff88\036\uff88" +
    "\042\uff88\050\uff88\053\uff88\001\002\000\004\047\353\001" +
    "\002\000\004\050\uff86\001\002\000\026\002\uff8a\016\uff8a" +
    "\020\uff8a\023\uff8a\027\uff8a\031\uff8a\033\uff8a\036\uff8a\042" +
    "\uff8a\053\uff8a\001\002\000\026\002\uff8c\016\uff8c\020\uff8c" +
    "\023\uff8c\027\uff8c\031\uff8c\033\uff8c\036\uff8c\042\uff8c\053" +
    "\uff8c\001\002\000\074\002\uff8f\016\uff8f\020\uff8f\023\uff8f" +
    "\027\uff8f\031\uff8f\033\uff8f\036\uff8f\042\uff8f\053\uff8f\056" +
    "\103\057\107\060\110\061\104\062\075\063\066\064\071" +
    "\065\101\066\077\067\074\070\111\072\070\073\072\075" +
    "\076\076\102\077\073\100\067\101\100\102\105\001\002" +
    "\000\026\002\uff92\016\uff92\020\uff92\023\uff92\027\uff92\031" +
    "\uff92\033\uff92\036\uff92\042\uff92\053\uff92\001\002\000\006" +
    "\007\367\025\370\001\002\000\050\004\056\005\031\006" +
    "\057\013\055\014\052\015\053\017\033\030\063\032\061" +
    "\034\060\037\034\040\043\041\041\043\042\055\064\065" +
    "\054\074\035\103\040\104\062\001\002\000\050\004\056" +
    "\005\031\006\057\013\055\014\052\015\053\017\033\030" +
    "\063\032\061\034\060\037\034\040\043\041\041\043\042" +
    "\055\064\065\054\074\035\103\040\104\062\001\002\000" +
    "\074\002\uff90\016\uff90\020\uff90\023\uff90\027\uff90\031\uff90" +
    "\033\uff90\036\uff90\042\uff90\053\uff90\056\103\057\107\060" +
    "\110\061\104\062\075\063\066\064\071\065\101\066\077" +
    "\067\074\070\111\072\070\073\072\075\076\076\102\077" +
    "\073\100\067\101\100\102\105\001\002\000\074\002\uff91" +
    "\016\uff91\020\uff91\023\uff91\027\uff91\031\uff91\033\uff91\036" +
    "\uff91\042\uff91\053\uff91\056\103\057\107\060\110\061\104" +
    "\062\075\063\066\064\071\065\101\066\077\067\074\070" +
    "\111\072\070\073\072\075\076\076\102\077\073\100\067" +
    "\101\100\102\105\001\002\000\026\002\uff93\016\uff93\020" +
    "\uff93\023\uff93\027\uff93\031\uff93\033\uff93\036\uff93\042\uff93" +
    "\053\uff93\001\002\000\004\045\376\001\002\000\026\002" +
    "\uff8d\016\uff8d\020\uff8d\023\uff8d\027\uff8d\031\uff8d\033\uff8d" +
    "\036\uff8d\042\uff8d\053\uff8d\001\002\000\004\103\207\001" +
    "\002\000\004\046\u0100\001\002\000\026\002\uff84\016\uff84" +
    "\020\uff84\023\uff84\027\uff84\031\uff84\033\uff84\036\uff84\042" +
    "\uff84\053\uff84\001\002\000\004\103\207\001\002\000\024" +
    "\002\uff94\016\uff94\020\uff94\023\uff94\027\uff94\031\uff94\033" +
    "\uff94\036\uff94\042\uff94\001\002\000\024\002\uff96\016\uff96" +
    "\020\uff96\023\uff96\027\uff96\031\uff96\033\uff96\036\uff96\042" +
    "\uff96\001\002\000\026\002\uff82\016\uff82\020\uff82\023\uff82" +
    "\027\uff82\031\uff82\033\uff82\036\uff82\042\uff82\053\u0109\001" +
    "\002\000\004\054\u0107\001\002\000\024\002\uff83\016\uff83" +
    "\020\uff83\023\uff83\027\uff83\031\uff83\033\uff83\036\uff83\042" +
    "\uff83\001\002\000\012\022\217\024\213\043\216\103\214" +
    "\001\002\000\026\002\uffea\016\uffea\020\uffea\023\uffea\027" +
    "\uffea\031\uffea\033\uffea\036\uffea\042\uffea\053\uffea\001\002" +
    "\000\004\103\207\001\002\000\024\002\uff81\016\uff81\020" +
    "\uff81\023\uff81\027\uff81\031\uff81\033\uff81\036\uff81\042\uff81" +
    "\001\002\000\012\002\ufffb\027\ufffb\031\ufffb\036\ufffb\001" +
    "\002\000\024\002\uff98\016\uff98\020\uff98\023\uff98\027\uff98" +
    "\031\uff98\033\uff98\036\uff98\042\uff98\001\002\000\026\002" +
    "\ufff2\016\ufff2\020\ufff2\023\ufff2\027\ufff2\031\ufff2\033\ufff2" +
    "\036\ufff2\042\ufff2\053\ufff2\001\002\000\004\054\u011a\001" +
    "\002\000\010\012\u0114\053\210\054\uffe9\001\002\000\026" +
    "\002\ufff5\016\ufff5\020\ufff5\023\ufff5\027\ufff5\031\ufff5\033" +
    "\ufff5\036\ufff5\042\ufff5\053\u0112\001\002\000\026\002\ufff4" +
    "\016\ufff4\020\ufff4\023\ufff4\027\ufff4\031\ufff4\033\ufff4\036" +
    "\ufff4\042\ufff4\053\ufff4\001\002\000\004\103\u010f\001\002" +
    "\000\026\002\ufff3\016\ufff3\020\ufff3\023\ufff3\027\ufff3\031" +
    "\ufff3\033\ufff3\036\ufff3\042\ufff3\053\ufff3\001\002\000\004" +
    "\043\u0115\001\002\000\004\051\u0116\001\002\000\004\051" +
    "\u0117\001\002\000\004\051\u0118\001\002\000\004\044\u0119" +
    "\001\002\000\026\002\ufff1\016\ufff1\020\ufff1\023\ufff1\027" +
    "\ufff1\031\ufff1\033\ufff1\036\ufff1\042\ufff1\053\ufff1\001\002" +
    "\000\012\022\u011c\024\213\043\216\103\214\001\002\000" +
    "\026\002\ufff0\016\ufff0\020\ufff0\023\ufff0\027\ufff0\031\ufff0" +
    "\033\ufff0\036\ufff0\042\ufff0\053\ufff0\001\002\000\030\002" +
    "\uffeb\016\uffeb\020\uffeb\023\uffeb\027\uffeb\031\uffeb\033\uffeb" +
    "\036\uffeb\042\uffeb\043\u011d\053\uffeb\001\002\000\054\004" +
    "\056\005\031\006\057\013\055\014\052\015\053\017\033" +
    "\030\063\032\061\034\060\037\034\040\043\041\041\043" +
    "\042\044\u011e\052\u0120\055\064\065\054\074\035\103\040" +
    "\104\062\001\002\000\026\002\uffed\016\uffed\020\uffed\023" +
    "\uffed\027\uffed\031\uffed\033\uffed\036\uffed\042\uffed\053\uffed" +
    "\001\002\000\056\044\uffdf\052\u0124\053\uffdf\056\103\057" +
    "\107\060\110\061\104\062\075\063\066\064\071\065\101" +
    "\066\077\067\074\070\111\072\070\073\072\075\076\076" +
    "\102\077\073\100\067\101\100\102\105\001\002\000\052" +
    "\004\056\005\031\006\057\013\055\014\052\015\053\017" +
    "\033\030\063\032\061\034\060\037\034\040\043\041\041" +
    "\043\042\044\u0121\055\064\065\054\074\035\103\040\104" +
    "\062\001\002\000\026\002\uffec\016\uffec\020\uffec\023\uffec" +
    "\027\uffec\031\uffec\033\uffec\036\uffec\042\uffec\053\uffec\001" +
    "\002\000\052\044\u0123\056\103\057\107\060\110\061\104" +
    "\062\075\063\066\064\071\065\101\066\077\067\074\070" +
    "\111\072\070\073\072\075\076\076\102\077\073\100\067" +
    "\101\100\102\105\001\002\000\026\002\uffee\016\uffee\020" +
    "\uffee\023\uffee\027\uffee\031\uffee\033\uffee\036\uffee\042\uffee" +
    "\053\uffee\001\002\000\052\004\056\005\031\006\057\013" +
    "\055\014\052\015\053\017\033\030\063\032\061\034\060" +
    "\037\034\040\043\041\041\043\042\044\u0125\055\064\065" +
    "\054\074\035\103\040\104\062\001\002\000\026\002\uffef" +
    "\016\uffef\020\uffef\023\uffef\027\uffef\031\uffef\033\uffef\036" +
    "\uffef\042\uffef\053\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\004\002\004\001\001\000\024\003\014\004" +
    "\023\005\017\006\012\011\011\012\007\013\020\014\016" +
    "\015\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\u010f\017\u0110\021\u010c\022\u010d\001\001\000\002" +
    "\001\001\000\030\027\271\030\u010b\031\027\032\043\036" +
    "\031\037\045\040\047\041\046\042\036\043\050\045\035" +
    "\001\001\000\002\001\001\000\020\005\u010a\006\012\011" +
    "\011\012\007\013\020\014\016\015\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\u0103\022\u0104\060" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\335\052\u0102\054\334\001\001\000" +
    "\010\022\335\052\336\054\334\001\001\000\004\007\024" +
    "\001\001\000\004\010\331\001\001\000\026\027\330\031" +
    "\027\032\043\036\031\037\045\040\047\041\046\042\036" +
    "\043\050\045\035\001\001\000\026\027\044\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\027\314\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\313\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\205\044" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\027\174\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\027\064\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\035\001\001\000\002\001\001" +
    "\000\026\027\133\031\027\032\043\036\031\037\045\040" +
    "\047\041\046\042\036\043\050\045\035\001\001\000\026" +
    "\027\132\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\035\001\001\000\026\027\131" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\035\001\001\000\026\027\130\031\027" +
    "\032\043\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\035\001\001\000\026\027\127\031\027\032\043" +
    "\036\031\037\045\040\047\041\046\042\036\043\050\045" +
    "\035\001\001\000\026\027\126\031\027\032\043\036\031" +
    "\037\045\040\047\041\046\042\036\043\050\045\035\001" +
    "\001\000\026\027\125\031\027\032\043\036\031\037\045" +
    "\040\047\041\046\042\036\043\050\045\035\001\001\000" +
    "\026\027\124\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\035\001\001\000\026\027" +
    "\123\031\027\032\043\036\031\037\045\040\047\041\046" +
    "\042\036\043\050\045\035\001\001\000\026\027\122\031" +
    "\027\032\043\036\031\037\045\040\047\041\046\042\036" +
    "\043\050\045\035\001\001\000\026\027\121\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\035\001\001\000\026\027\120\031\027\032\043\036" +
    "\031\037\045\040\047\041\046\042\036\043\050\045\035" +
    "\001\001\000\026\027\117\031\027\032\043\036\031\037" +
    "\045\040\047\041\046\042\036\043\050\045\035\001\001" +
    "\000\026\027\116\031\027\032\043\036\031\037\045\040" +
    "\047\041\046\042\036\043\050\045\035\001\001\000\026" +
    "\027\115\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\035\001\001\000\026\027\114" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\035\001\001\000\002\001\001\000\026" +
    "\027\113\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\035\001\001\000\026\027\112" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\035\001\001\000\026\027\111\031\027" +
    "\032\043\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\027\135\031\027\032\043\036\031" +
    "\037\045\040\047\041\046\042\036\043\050\045\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\027\140" +
    "\031\027\032\043\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\027\143\031\027\032\043\036\031\037" +
    "\045\040\047\041\046\042\036\043\050\045\035\001\001" +
    "\000\002\001\001\000\026\027\145\031\027\032\043\036" +
    "\031\037\045\040\047\041\046\042\036\043\050\045\035" +
    "\001\001\000\002\001\001\000\026\027\147\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\152\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\170\001\001\000\002\001\001\000\026" +
    "\027\172\031\027\032\043\036\031\037\045\040\047\041" +
    "\046\042\036\043\050\045\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\027\176\031" +
    "\027\032\043\036\031\037\045\040\047\041\046\042\036" +
    "\043\050\045\035\001\001\000\002\001\001\000\026\027" +
    "\200\031\027\032\043\036\031\037\045\040\047\041\046" +
    "\042\036\043\050\045\035\001\001\000\002\001\001\000" +
    "\026\027\202\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\210\001\001\000\002\001" +
    "\001\000\004\023\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\230\001\001\000" +
    "\002\001\001\000\032\025\222\026\220\027\221\031\027" +
    "\032\043\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\027\225\031" +
    "\027\032\043\036\031\037\045\040\047\041\046\042\036" +
    "\043\050\045\035\001\001\000\002\001\001\000\032\025" +
    "\227\026\220\027\221\031\027\032\043\036\031\037\045" +
    "\040\047\041\046\042\036\043\050\045\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\234\024\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\241\001\001\000\002\001\001\000\004" +
    "\023\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\243\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\247\033\250\046\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\027\255\031\027\032\043" +
    "\034\253\035\257\036\031\037\045\040\047\041\046\042" +
    "\036\043\050\045\035\001\001\000\002\001\001\000\030" +
    "\027\264\030\265\031\027\032\043\036\031\037\045\040" +
    "\047\041\046\042\036\043\050\045\035\001\001\000\002" +
    "\001\001\000\026\027\261\031\027\032\043\036\031\037" +
    "\045\040\047\041\046\042\036\043\050\045\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\263\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\027\271\030\272\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\027\255\031\027\032\043\034\253\035\274\036\031" +
    "\037\045\040\047\041\046\042\036\043\050\045\035\001" +
    "\001\000\002\001\001\000\010\032\247\033\250\046\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\302\050\304\001\001\000\002\001\001" +
    "\000\004\051\307\001\001\000\002\001\001\000\006\047" +
    "\306\050\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\027\316\031\027" +
    "\032\043\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\027\271\030\333\031\027" +
    "\032\043\036\031\037\045\040\047\041\046\042\036\043" +
    "\050\045\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\374\001" +
    "\001\000\004\023\372\001\001\000\004\023\365\001\001" +
    "\000\004\023\364\001\001\000\032\027\363\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\035\055\362\056\361\001\001\000\032\027\350\031" +
    "\027\032\043\036\031\037\045\040\047\041\046\042\036" +
    "\043\050\045\035\055\347\056\345\001\001\000\002\001" +
    "\001\000\010\051\353\053\354\055\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\360\055\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\371\031\027\032\043\036\031\037\045\040\047" +
    "\041\046\042\036\043\050\045\035\001\001\000\026\027" +
    "\370\031\027\032\043\036\031\037\045\040\047\041\046" +
    "\042\036\043\050\045\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\335\052\u0101\054\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0107\001\001" +
    "\000\002\001\001\000\010\021\u0103\022\u0104\060\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\u0112\021\u010c" +
    "\022\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\u011a\023\u0107\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\025\222" +
    "\026\220\027\u011e\031\027\032\043\036\031\037\045\040" +
    "\047\041\046\042\036\043\050\045\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\027\u0121\031\027\032" +
    "\043\036\031\037\045\040\047\041\046\042\036\043\050" +
    "\045\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\027\225\031\027\032\043\036\031" +
    "\037\045\040\047\041\046\042\036\043\050\045\035\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EssencePrimeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EssencePrimeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EssencePrimeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




     public StringBuffer errorMessage = new StringBuffer("");

    /* The reason for the error is passed into the method in the
       String 'message'. */

    public void report_error(String message, Object info)  {

        StringBuffer m = new StringBuffer("Parse error:");


        if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                                m.append(" in line "+(s.left));
                if (s.right >= 0)
                        m.append(", column "+(s.right));
            }
        }
        m.append(" : "+message);
        //throw new Exception(m);
        errorMessage = m;
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)  {
        report_error(message, info);
        //System.exit(1);
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EssencePrimeParser$actions {



        public int errors_found = 0;
       


  private final EssencePrimeParser parser;

  /** Constructor */
  CUP$EssencePrimeParser$actions(EssencePrimeParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EssencePrimeParser$do_action(
    int                        CUP$EssencePrimeParser$act_num,
    java_cup.runtime.lr_parser CUP$EssencePrimeParser$parser,
    java.util.Stack            CUP$EssencePrimeParser$stack,
    int                        CUP$EssencePrimeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EssencePrimeParser$result;

      /* select the action based on the action number */
      switch (CUP$EssencePrimeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // constraint_block ::= 
            {
              Object RESULT =null;
		
		            RESULT = new LinkedList(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // constraint_block ::= SUCH_THAT expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (LinkedList) e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // objective ::= 
            {
              Object RESULT =null;
		    
			  RESULT = new Objective(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // objective ::= MINIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Objective(true, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // objective ::= MAXIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Objective(false, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // variable_list ::= domain_identifiers COMMA variable_list 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int di_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int di_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) di_list).addFirst((DomainIdentifiers) di);  
			 RESULT = di_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_list",46, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // variable_list ::= domain_identifiers 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
			list.addFirst((DomainIdentifiers) di); 
			RESULT = list;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_list",46, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // find_block ::= FIND variable_list 
            {
              Object RESULT =null;
		int v_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int v_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object v_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) v_list).toArray();	
	        	    DomainIdentifiers[] v_array = new DomainIdentifiers[tmp.length];
			    for(int i=v_array.length; i>0; i--) {
 			   	          v_array[i-1] = (DomainIdentifiers) tmp[v_array.length-i];
	            }
			    RESULT = new Declaration(v_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("find_block",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // user_def_type ::= ENUM LBRACE identifier_list RBRACE 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) id_list).toArray();	
	        	    Identifier[] id_array = new Identifier[tmp.length];
			    for(int i=0;i<id_array.length;i++)
 			   	 id_array[i] = (Identifier) tmp[i];

			    RESULT = new Type(new Enumeration(id_array)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("user_def_type",45, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // constant_matrix ::= LBRACK constant_vector_list RBRACK 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 Object[] tmp = ((LinkedList) list  ).toArray();	
               
                                       
                     LinkedList vector0 = (LinkedList) tmp[0];
                     //System.out.println("first part hinter mir");
                     int[][] matrix = new int[tmp.length][vector0.size()];
                   
                     for(int i=0; i<tmp.length; i++) {
                     
                        LinkedList vector = (LinkedList) tmp[i];
                        
                        if(vector.size() != vector0.size()) 
                           throw new Exception("Illegal constant array: every vector/row has to have the same amount of elements!");
                        
                        for(int j=0; j<vector.size(); j++)
                           matrix[i][j] = (Integer) vector.get(j);
                     
                     }
                     
                      RESULT = matrix;
                    
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_matrix",44, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // constant_vector_list ::= constant_vector COMMA constant_vector_list 
            {
              Object RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object vector = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
                             LinkedList vectorList = (LinkedList) list;
                             vectorList.addFirst(vector);
                             RESULT = vectorList;
                          
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector_list",41, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // constant_vector_list ::= constant_vector 
            {
              Object RESULT =null;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                             LinkedList vectorList = new LinkedList();
                             vectorList.addFirst(int_list);
                             RESULT = vectorList; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector_list",41, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // constant_vector ::= LBRACK integer_list RBRACK 
            {
              Object RESULT =null;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object i_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		   
					   RESULT = i_list;
					
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector",43, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // constant ::= identifier_list IS constant_matrix 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int matrixEleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int matrixEright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object matrixE = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
  
                       Object[] tmp = (Object[]) matrixE;
                      //System.out.println("Object[] erstellt aus da linked list...");
                                       
                     int[] vector0 = (int[]) tmp[0];
                     //System.out.println("first part hinter mir");
                     int[][] matrix = new int[tmp.length][vector0.length];
                   
                     for(int i=0; i<tmp.length; i++) {
                     
                        int[] vector = (int[]) tmp[i];
                        
                        if(vector.length != vector0.length) 
                           throw new Exception("Illegal constant array: every vector/row has to have the same amount of elements!");
                        
                        for(int j=0; j<vector.length; j++)
                           matrix[i][j] = (Integer) vector[j];
                     
                     }
                     
                     
		   
    		   Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];    
                  constantList.add(new Constant(new ConstantMatrix(new String(id), matrix))); 
			   }   
			   
			   RESULT = constantList;
		   
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // constant ::= identifier_list BE constant_matrix 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int matrixEleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int matrixEright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object matrixE = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
  
                       Object[] tmp = (Object[]) matrixE;
                      //System.out.println("Object[] erstellt aus da linked list...");
                                       
                     int[] vector0 = (int[]) tmp[0];
                     //System.out.println("first part hinter mir");
                     int[][] matrix = new int[tmp.length][vector0.length];
                   
                     for(int i=0; i<tmp.length; i++) {
                     
                        int[] vector = (int[]) tmp[i];
                        
                        if(vector.length != vector0.length) 
                           throw new Exception("Illegal constant array: every vector/row has to have the same amount of elements!");
                        
                        for(int j=0; j<vector.length; j++)
                           matrix[i][j] = (Integer) vector[j];
                     
                     }
                     
                     
		   
    		   Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];    
                  constantList.add(new Constant(new ConstantMatrix(new String(id), matrix))); 
			   }   
			   
			   RESULT = constantList;
		   
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // constant ::= identifier_list IS constant_vector 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object vector = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
		        Object[] tmp = ((LinkedList) vector).toArray();
			    int[] intVector = new int[tmp.length];
			    for(int j=0; j<intVector.length; j++) {
			           intVector[j] = (Integer) tmp[j];
			    }      
		    //System.out.println("starting to generate eh constant objects");
    		   Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];    
                  constantList.add(new Constant(new ConstantVector(new String(id), intVector))); 
			   }   
			   
			   RESULT = constantList;
		   
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // constant ::= identifier_list BE constant_vector 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object vector = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
		        Object[] tmp = ((LinkedList) vector).toArray();
			    int[] intVector = new int[tmp.length];
			    for(int j=0; j<intVector.length; j++) {
			           intVector[j] = (Integer) tmp[j];
			    }      
		    //System.out.println("starting to generate eh constant objects");
    		   Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];    
                  constantList.add(new Constant(new ConstantVector(new String(id), intVector))); 
			   }   
			   
			   RESULT = constantList;
		   
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // constant ::= identifier_list BE_NEW_TYPE user_def_type 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String id = (String) identifier_list[i];
                              constantList.add(new Constant(new NewTypeConstant(id, (Type) t))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // constant ::= identifier_list IS expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // constant ::= identifier_list BE expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // constant ::= identifier_list COLON domain IS expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Domain) d,(Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // constant ::= identifier_list COLON domain BE expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident= (String) identifier_list[i];
                              constantList.add(new Constant(new ExpressionConstant(ident, (Domain) d,(Expression) e))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // constant ::= identifier_list IS_DOMAIN domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident = (String) identifier_list[i];
                              constantList.add(new Constant(new DomainConstant(ident, (Domain) d))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // constant ::= identifier_list BE_DOMAIN domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 Object[] identifier_list = ((LinkedList) id_list).toArray();
			   LinkedList constantList = new LinkedList();
			   for(int i=0; i<identifier_list.length; i++) {
			      String ident = (String) identifier_list[i];
                              constantList.add(new Constant(new DomainConstant(ident, (Domain) d))); 
			   }   
			   RESULT = constantList;    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant",42, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // constant_list ::= constant COMMA constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int constant_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int constant_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object constant_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 for(int i=0; i<((LinkedList) c_list).size(); i++) {
		            ((LinkedList) constant_list).add( ((LinkedList) c_list).get(i)) ; 
                           }
			    RESULT = c_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_list",40, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // constant_list ::= constant 
            {
              Object RESULT =null;
		int clistleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object clist = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		   
			   RESULT = clist; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_list",40, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // letting_block ::= LETTING constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) c_list).toArray();	
	        	    Constant[] c_array = new Constant[tmp.length];
			    for(int i=0;i<c_array.length;i++)
 			   	 c_array[i] = (Constant) tmp[i];

			    RESULT = new Declaration(c_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",10, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parameter_block ::= PARAM constant_list 
            {
              Object RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object c_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) c_list).toArray();	
	        	    Constant[] c_array = new Constant[tmp.length];
			    for(int i=0;i<c_array.length;i++)
 			   	 c_array[i] = (Constant) tmp[i];

			    RESULT = new Declaration(c_array, true);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // where_block ::= WHERE expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) e_list).toArray();	
	        	    Expression[] e_array = new Expression[tmp.length];
			    for(int i=0;i<e_array.length;i++)
 			   	 e_array[i] = (Expression) tmp[i];

			    RESULT = new Declaration (e_array);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("where_block",8, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // integer_list ::= INTEGER COMMA integer_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) int_list).addFirst((Integer) i); 
				    RESULT = int_list; 
				 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",39, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // integer_list ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
                    list.addFirst((Integer) (i-2*i));
                    RESULT = list;
                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",39, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // integer_list ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				    list.addFirst((Integer) i);
				    RESULT = list;
                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",39, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // constant_tuple ::= LESS integer_list GREATER 
            {
              Object RESULT =null;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		
                   	Object[] tmp = ((LinkedList) int_list).toArray();
			        int[] int_array = new int[tmp.length];
			        for(int i=0;i<int_array.length;i++)
 				          int_array[i] = (Integer) tmp[i];
 				          
 				    RESULT = new ConstantTuple(int_array);     
                   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_tuple",38, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // constant_tuple_list ::= constant_tuple COMMA constant_tuple_list 
            {
              Object RESULT =null;
		int c_tupleleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int c_tupleright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object c_tuple = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object t_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) t_list).addFirst((ConstantTuple) c_tuple); 
				            RESULT = t_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_tuple_list",37, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // constant_tuple_list ::= constant_tuple 
            {
              Object RESULT =null;
		int c_tupleleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int c_tupleright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object c_tuple = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				            list.addFirst((ConstantTuple) c_tuple);
				            RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_tuple_list",37, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // atom_list ::= atom_expression COMMA atom_list 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int a_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int a_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object a_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) a_list).addFirst((AtomExpression) atom); 
				  RESULT = a_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",36, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // atom_list ::= atom_expression 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				  list.addFirst((AtomExpression) atom);
				  RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",36, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // table_constraint ::= TABLE LPAREN LBRACK atom_list RBRACK COMMA LBRACK constant_tuple_list RBRACK RPAREN 
            {
              Object RESULT =null;
		int a_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int a_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		Object a_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object t_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		  
                  	Object[] tmp = ((LinkedList) a_list).toArray();
			        AtomExpression[] id_array = new AtomExpression[tmp.length];
			        for(int i=0;i<id_array.length;i++)
 				          id_array[i] =  (AtomExpression) tmp[i];                   
                   
                    Object[] tmp2 = ((LinkedList) t_list).toArray();
			        ConstantTuple[] t_array = new ConstantTuple[tmp2.length];
			        for(int i=0;i<t_array.length;i++)
 				          t_array[i] =  (ConstantTuple) tmp2[i];        
                   
                   RESULT = new TableConstraint(id_array,
                                                t_array);
                   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("table_constraint",35, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binding_expression ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) id_list).toArray();	
	        	    String[] id_array = new String[tmp.length];
			    for(int i=0;i<id_array.length;i++)
 			   	 id_array[i] = (String) tmp[i];
				 
			    RESULT = new BindingExpression(new DomainIdentifiers(id_array,(Domain) d )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binding_expression",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // quantifier ::= SUM 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.SUM); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // quantifier ::= FORALL 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.FORALL); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // quantifier ::= EXISTS 
            {
              Object RESULT =null;
		 RESULT = new Quantifier(EssenceGlobals.EXISTS); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifier",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // quantifierop_expression ::= quantifier binding_expression DOT expression 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int bind_eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int bind_eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object bind_e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new QuantificationExpression((Quantifier) q, 
								       (BindingExpression) bind_e, 
								        (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantifierop_expression",32, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lex_expression ::= expression LEXGEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_GEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lex_expression ::= expression LEXLEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_LEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lex_expression ::= expression LEXGREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_GREATER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lex_expression ::= expression LEXLESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new LexExpression( (Expression) e1, new LexOperator(EssenceGlobals.LEX_LESS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // functionop_expression ::= ELEMENT LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ELEMENT,
	                									(Expression) e1,
	                									(Expression) e2,
	                									(Expression) e3);   
	              
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // functionop_expression ::= OCCURRENCE LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.OCCURRENCE,
	                                                   (Expression) e1,
	                                                   (Expression) e2,
	                                                   (Expression) e3);   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // functionop_expression ::= MAX LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.MAX, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // functionop_expression ::= MIN LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.MIN, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // functionop_expression ::= ALLDIFF LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new FunctionExpression(EssenceGlobals.ALLDIFF, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("functionop_expression",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binaryop_expression ::= expression IFF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.IFF), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binaryop_expression ::= expression IF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.IF), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binaryop_expression ::= expression OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.OR), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binaryop_expression ::= expression AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.AND), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binaryop_expression ::= expression POWER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.POWER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binaryop_expression ::= expression DIVISION expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.DIVIDE), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binaryop_expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.MULT), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binaryop_expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.MINUS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binaryop_expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(	
			(Expression) e1, new BinaryOperator (EssenceGlobals.PLUS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binaryop_expression ::= expression GEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.GEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binaryop_expression ::= expression GREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.GREATER), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binaryop_expression ::= expression LEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.LEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binaryop_expression ::= expression LESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.LESS), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binaryop_expression ::= expression NEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.NEQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binaryop_expression ::= expression EQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BinaryExpression(
			(Expression) e1, new BinaryOperator (EssenceGlobals.EQ), (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binaryop_expression",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unitop_expression ::= NOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryExpression(EssenceGlobals.NOT, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unitop_expression ::= BAR expression BAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new UnaryExpression(EssenceGlobals.ABS, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unitop_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryExpression(EssenceGlobals.NEGATION, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unitop_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atom_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomExpression(new AtomicExpression(new String(id))); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atom_expression ::= deref_expression 
            {
              Object RESULT =null;
		int derefleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int derefright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object deref = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomExpression((NonAtomicExpression) deref); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // index_list ::= index COMMA index_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object i_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) i_list).addFirst(i); 
				   RESULT = i_list;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index_list",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // index_list ::= index 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList e_list = new LinkedList();	
				   e_list.addFirst(i); 
				   RESULT = e_list;   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index_list",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // index ::= LPAREN expression_list RPAREN 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 Object[] tmp = ((LinkedList) e_list).toArray();
			      Expression[] e_array = new Expression[tmp.length];
			      for(int i=0;i<e_array.length;i++)
 				      e_array[i] = (Expression) tmp[i];
                  RESULT = new SparseIndex(e_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // index ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new ExpressionIndex( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // index ::= expression DOTDOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BoundedIndex( (Expression) e1, (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // index ::= expression DOTDOT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new BoundedIndex( (Expression) e, true); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // index ::= DOTDOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BoundedIndex( (Expression) e, false); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // index ::= DOTDOT 
            {
              Object RESULT =null;
		 RESULT = new BoundedIndex(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // deref_expression ::= IDENTIFIER LBRACK index_list RBRACK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) e_list).toArray();	
	        	            Index[] e_array = new Index[tmp.length];
			                for(int i=0;i<e_array.length;i++)
 			   	               e_array[i] = (Index) tmp[i];
	
			              RESULT = new NonAtomicExpression(new String(id),
								                           e_array ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("deref_expression",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atomic_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new AtomicExpression(new String(id)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atomic_expression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new AtomicExpression(false); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atomic_expression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new AtomicExpression(true); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atomic_expression ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				  RESULT = new AtomicExpression(i); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= ATMOST LPAREN expression COMMA LBRACK integer_list RBRACK COMMA LBRACK integer_list RBRACK RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).value;
		int int_list1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int int_list1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		Object int_list1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int int_list2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int int_list2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object int_list2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
		   Object[] tmp1 = ((LinkedList) int_list1).toArray();
		   int[] int_array1 = new int[tmp1.length];
		   for(int i=0;i<int_array1.length;i++)
 				int_array1[i] = (Integer) tmp1[i];
 				          
 	       Object[] tmp2 = ((LinkedList) int_list2).toArray();
		   int[] int_array2 = new int[tmp2.length];
		   for(int i=0;i<int_array2.length;i++)
 				int_array2[i] = (Integer) tmp2[i];
 				
		   RESULT = new Expression( new AtmostConstraint((Expression) e1,
									                     int_array1,
									                     int_array2,
									                     true)); //isAtmost =true 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-11)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= ATLEAST LPAREN expression COMMA LBRACK integer_list RBRACK COMMA LBRACK integer_list RBRACK RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).value;
		int int_list1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int int_list1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		Object int_list1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int int_list2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int int_list2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object int_list2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
		   Object[] tmp1 = ((LinkedList) int_list1).toArray();
		   int[] int_array1 = new int[tmp1.length];
		   for(int i=0;i<int_array1.length;i++)
 				int_array1[i] = (Integer) tmp1[i];
 				          
 	       Object[] tmp2 = ((LinkedList) int_list2).toArray();
		   int[] int_array2 = new int[tmp2.length];
		   for(int i=0;i<int_array2.length;i++)
 				int_array2[i] = (Integer) tmp2[i];
 				
		   RESULT = new Expression( new AtmostConstraint((Expression) e1,
									                     int_array1,
									                     int_array2,
									                     false)); //isAtmost =false 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-11)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= table_constraint 
            {
              Object RESULT =null;
		int tab_constraintleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int tab_constraintright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object tab_constraint = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression((TableConstraint) tab_constraint);
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= lex_expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression((LexExpression) le);  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= quantifierop_expression 
            {
              Object RESULT =null;
		int qeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int qeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object qe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (QuantificationExpression) qe); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= functionop_expression 
            {
              Object RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object fe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (FunctionExpression) fe); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= binaryop_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (BinaryExpression) be); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= unitop_expression 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (UnaryExpression) ue); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= deref_expression 
            {
              Object RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (NonAtomicExpression) de); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= atomic_expression 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Expression( (AtomicExpression) ae); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new Expression((Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression_list ::= expression COMMA expression_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) e_list).addFirst(e); 
				   RESULT = e_list;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList e_list = new LinkedList();	
				   e_list.addFirst(e); 
				   RESULT = e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // range_atom ::= expression DOTDOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new RangeAtom((Expression) e1, (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // range_atom ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
				RESULT = new RangeAtom(EssenceGlobals.RANGE_EXPR, (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // range_atom_list ::= range_atom COMMA range_atom_list 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int ra_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ra_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ra_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) ra_list).addFirst(  ra); 
				   RESULT = ra_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom_list",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // range_atom_list ::= range_atom 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				   list.addFirst(  ra);
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("range_atom_list",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // domain_list ::= domain_list COMMA domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) d_list).add(  d); 
		       RESULT = d_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // domain_list ::= domain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
		      list.add(  d); 
		      RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // domain ::= MATRIX_INDEXED_BY LBRACK domain_list RBRACK OF domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) d_list).toArray();	
	        	    Domain[] d_array = new Domain[tmp.length];
			    for(int i=0;i<d_array.length;i++)
 			   	 d_array[i] = (Domain) tmp[i];

	                   
			    RESULT = new Domain(new MatrixDomain(d_array, (Domain) d) ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // domain ::= INT LPAREN range_atom_list RPAREN 
            {
              Object RESULT =null;
		int ra_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int ra_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object ra_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  Object[] tmp = ((LinkedList) ra_list).toArray();	
	        	    RangeAtom[] ra_array = new RangeAtom[tmp.length];
			    for(int i=0;i<ra_array.length;i++)
 			   	 ra_array[i] = (RangeAtom) tmp[i];			  
	  
			   RESULT = new Domain(new IntegerDomain(ra_array)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // domain ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 if(id.equals("bool")) 
			     RESULT = new Domain();
	                   else 
			     RESULT = new Domain(new IdentifierDomain(new String(id) )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // domain ::= LPAREN domain RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = (Domain) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) id_list).addFirst(new String(id)); 
				    RESULT = id_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 	
			           LinkedList list = new LinkedList();
				   list.addFirst(new String(id));
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // domain_identifiers ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			  Object[] tmp = ((LinkedList) id_list).toArray();
			  String[] id_array = new String[tmp.length];
			  for(int i=0;i<id_array.length;i++)
 				id_array[i] = (String) tmp[i];

			 RESULT = new DomainIdentifiers(id_array, (Domain) d); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_identifiers",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // infinite_parameter_domain ::= INT 
            {
              Object RESULT =null;
		 RESULT = new Domain(new IntegerDomain()); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // infinite_parameter_domain ::= INT LPAREN DOTDOT RPAREN 
            {
              Object RESULT =null;
		 RESULT = new Domain(new IntegerDomain()); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // infinite_parameter_domain ::= INT LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = new Domain(new IntegerDomain()); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // infinite_parameter_domain ::= INT LPAREN DOTDOT expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
                      RESULT = new Domain(new IntegerDomain(new RangeAtom[] {new RangeAtom(EssenceGlobals.RANGE_DOTS_EXPR ,(Expression) e) } )); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // infinite_parameter_domain ::= INT LPAREN expression DOTDOT RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
                        RESULT = new Domain(
                                     new IntegerDomain(
                                           new RangeAtom[] {new RangeAtom(EssenceGlobals.RANGE_EXPR_DOTS ,(Expression) e) } 
                                 )); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_parameter_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameter ::= identifier_list COLON infinite_parameter_domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		
		      Object[] tmp = ((LinkedList) id_list).toArray();
			  String[] id_array = new String[tmp.length];
			  for(int i=0;i<id_array.length;i++)
 				id_array[i] = (String) tmp[i];
		    
		    RESULT = new Parameter(new DomainIdentifiers(id_array, (Domain) d)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameter ::= IDENTIFIER ENUM LPAREN DOT DOT DOT RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		 RESULT = new Parameter(id); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameter ::= domain_identifiers 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Parameter((DomainIdentifiers) di); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object p_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) p_list).addFirst(p); 
		            RESULT = p_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_list",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter_list ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			   LinkedList list = new LinkedList();
			   list.addFirst(p); 
			   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("parameter_list",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // given_block ::= GIVEN parameter_list 
            {
              Object RESULT =null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object p_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp = ((LinkedList) p_list).toArray();	
	            Parameter[] p_array = new Parameter[tmp.length];
		    for(int i=0;i<p_array.length;i++)
 				p_array[i] = (Parameter) tmp[i];

 		    RESULT = new Declaration(p_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("given_block",7, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= find_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =(Declaration)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= letting_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= parameter_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= where_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= given_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (Declaration) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_list ::= declaration declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((LinkedList) d_list).addFirst((Declaration) d);
				  RESULT = d_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 LinkedList list = new LinkedList();
				   list.addFirst((Declaration) d); 
				   RESULT = list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Object RESULT =null;
			  RESULT = new LinkedList(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declarations objective constraint_block 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object expr_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  Object[] tmp1 = ((LinkedList) d_list).toArray();
	            Declaration[] d_array = new Declaration[tmp1.length];
		    for(int i=0;i<d_array.length;i++)
 				d_array[i] = (Declaration) tmp1[i];

                    Object[] tmp2 = ((LinkedList) expr_list).toArray();	
	            Expression[] expr_array = new Expression[tmp2.length];
		    for(int i=0;i<expr_array.length;i++)
 				expr_array[i] = (Expression) tmp2[i];

		 RESULT = new EssenceSpecification(d_array,
						   (Objective)  obj,
						   expr_array); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= essencemodel EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		RESULT = start_val;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EssencePrimeParser$parser.done_parsing();
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // essencemodel ::= HEADER body 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (EssenceSpecification) b; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("essencemodel",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

