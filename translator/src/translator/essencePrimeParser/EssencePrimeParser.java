
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 28 14:25:56 BST 2008
//----------------------------------------------------

package translator.essencePrimeParser;

import translator.expression.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 28 14:25:56 BST 2008
  */
public class EssencePrimeParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EssencePrimeParser() {super();}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EssencePrimeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\011\004\000\002" +
    "\011\004\000\002\012\004\000\002\013\006\000\002\013" +
    "\010\000\002\013\006\000\002\013\006\000\002\013\010" +
    "\000\002\013\006\000\002\013\010\000\002\014\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\010\004\000\002\010\002\000\002\015\003\000\002\015" +
    "\005\000\002\016\003\000\002\016\005\000\002\017\005" +
    "\000\002\020\005\000\002\024\007\000\002\024\007\000" +
    "\002\024\005\000\002\024\006\000\002\024\003\000\002" +
    "\021\003\000\002\021\005\000\002\022\005\000\002\022" +
    "\003\000\002\022\010\000\002\022\006\000\002\022\010" +
    "\000\002\023\003\000\002\023\005\000\002\026\003\000" +
    "\002\026\005\000\002\026\005\000\002\025\005\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\006\000\002\030\011\000\002" +
    "\032\003\000\002\032\004\000\002\032\004\000\002\032" +
    "\005\000\002\032\003\000\002\032\005\000\002\033\003" +
    "\000\002\033\005\000\002\031\003\000\002\031\003\000" +
    "\002\034\004\000\002\034\005\000\002\034\004\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\037" +
    "\006\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\037\006\000\002\037\012\000" +
    "\002\037\012\000\002\037\012\000\002\037\016\000\002" +
    "\037\016\000\002\041\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\040\010" +
    "\000\002\040\010\000\002\040\010\000\002\043\003\000" +
    "\002\043\005\000\002\044\003\000\002\044\004\000\002" +
    "\044\005\000\002\044\006\000\002\046\005\000\002\045" +
    "\003\000\002\045\005\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\004\021\004\001\002\000\022\002\ufffd\016" +
    "\016\020\007\023\021\025\ufffd\027\ufffd\034\ufffd\040\011" +
    "\001\002\000\004\002\006\001\002\000\004\002\000\001" +
    "\002\000\004\077\230\001\002\000\022\002\ufff9\016\ufff9" +
    "\020\ufff9\023\ufff9\025\ufff9\027\ufff9\034\ufff9\040\ufff9\001" +
    "\002\000\044\004\051\005\027\006\052\013\050\014\045" +
    "\015\046\017\030\026\055\030\053\035\031\037\036\041" +
    "\037\051\056\061\047\070\032\077\033\100\054\001\002" +
    "\000\022\002\ufffa\016\ufffa\020\ufffa\023\ufffa\025\ufffa\027" +
    "\ufffa\034\ufffa\040\ufffa\001\002\000\022\002\ufffc\016\016" +
    "\020\007\023\021\025\ufffc\027\ufffc\034\ufffc\040\011\001" +
    "\002\000\022\002\ufff7\016\ufff7\020\ufff7\023\ufff7\025\ufff7" +
    "\027\ufff7\034\ufff7\040\ufff7\001\002\000\004\002\001\001" +
    "\002\000\004\077\230\001\002\000\022\002\ufff8\016\ufff8" +
    "\020\ufff8\023\ufff8\025\ufff8\027\ufff8\034\ufff8\040\ufff8\001" +
    "\002\000\012\002\ufffe\025\ufffe\027\ufffe\034\ufffe\001\002" +
    "\000\004\077\333\001\002\000\012\002\uffe9\025\024\027" +
    "\025\034\uffe9\001\002\000\006\002\uffe7\034\331\001\002" +
    "\000\044\004\051\005\027\006\052\013\050\014\045\015" +
    "\046\017\030\026\055\030\053\035\031\037\036\041\037" +
    "\051\056\061\047\070\032\077\033\100\054\001\002\000" +
    "\044\004\051\005\027\006\052\013\050\014\045\015\046" +
    "\017\030\026\055\030\053\035\031\037\036\041\037\051" +
    "\056\061\047\070\032\077\033\100\054\001\002\000\106" +
    "\002\uffce\003\uffce\016\uffce\020\uffce\023\uffce\025\uffce\027" +
    "\uffce\031\uffce\034\uffce\040\uffce\042\uffce\044\uffce\046\uffce" +
    "\047\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\066\uffce\067\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075" +
    "\uffce\076\uffce\001\002\000\004\041\310\001\002\000\004" +
    "\077\230\001\002\000\004\077\230\001\002\000\044\004" +
    "\051\005\027\006\052\013\050\014\045\015\046\017\030" +
    "\026\055\030\053\035\031\037\036\041\037\051\056\061" +
    "\047\070\032\077\033\100\054\001\002\000\110\002\uffc4" +
    "\003\uffc4\016\uffc4\020\uffc4\023\uffc4\025\uffc4\027\uffc4\031" +
    "\uffc4\034\uffc4\040\uffc4\042\uffc4\043\137\044\uffc4\046\uffc4" +
    "\047\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\066\uffc4\067\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\001\002\000\106\002\uffca\003\uffca\016\uffca" +
    "\020\uffca\023\uffca\025\uffca\027\uffca\031\uffca\034\uffca\040" +
    "\uffca\042\uffca\044\uffca\046\uffca\047\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\066\uffca\067\uffca\071\uffca" +
    "\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca\001\002\000" +
    "\106\002\uffcc\003\uffcc\016\uffcc\020\uffcc\023\uffcc\025\uffcc" +
    "\027\uffcc\031\uffcc\034\uffcc\040\uffcc\042\uffcc\044\uffcc\046" +
    "\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\066\uffcc\067\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc" +
    "\075\uffcc\076\uffcc\001\002\000\106\002\uffc6\003\uffc6\016" +
    "\uffc6\020\uffc6\023\uffc6\025\uffc6\027\uffc6\031\uffc6\034\uffc6" +
    "\040\uffc6\042\uffc6\044\uffc6\046\uffc6\047\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\064\uffc6\066\uffc6\067\uffc6\071" +
    "\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\001\002" +
    "\000\044\004\051\005\027\006\052\013\050\014\045\015" +
    "\046\017\030\026\055\030\053\035\031\037\036\041\037" +
    "\051\056\061\047\070\032\077\033\100\054\001\002\000" +
    "\106\002\uffcb\003\uffcb\016\uffcb\020\uffcb\023\uffcb\025\uffcb" +
    "\027\uffcb\031\uffcb\034\uffcb\040\uffcb\042\uffcb\044\uffcb\046" +
    "\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\066\uffcb\067\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\001\002\000\106\002\uffcd\003\uffcd\016" +
    "\uffcd\020\uffcd\023\uffcd\025\uffcd\027\uffcd\031\uffcd\034\uffcd" +
    "\040\uffcd\042\uffcd\044\uffcd\046\uffcd\047\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\064\uffcd\066\uffcd\067\uffcd\071" +
    "\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\001\002" +
    "\000\056\002\uffea\031\070\034\uffea\052\076\053\102\054" +
    "\103\055\077\056\067\057\060\060\063\061\074\062\072" +
    "\063\066\064\104\066\061\067\064\071\071\072\075\073" +
    "\065\074\062\075\073\076\100\001\002\000\106\002\uffc9" +
    "\003\uffc9\016\uffc9\020\uffc9\023\uffc9\025\uffc9\027\uffc9\031" +
    "\uffc9\034\uffc9\040\uffc9\042\uffc9\044\uffc9\046\uffc9\047\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\066\uffc9" +
    "\067\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\001\002\000\106\002\uffc8\003\uffc8\016\uffc8\020\uffc8" +
    "\023\uffc8\025\uffc8\027\uffc8\031\uffc8\034\uffc8\040\uffc8\042" +
    "\uffc8\044\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062" +
    "\uffc8\063\uffc8\064\uffc8\066\uffc8\067\uffc8\071\uffc8\072\uffc8" +
    "\073\uffc8\074\uffc8\075\uffc8\076\uffc8\001\002\000\004\041" +
    "\265\001\002\000\106\002\uffc5\003\uffc5\016\uffc5\020\uffc5" +
    "\023\uffc5\025\uffc5\027\uffc5\031\uffc5\034\uffc5\040\uffc5\042" +
    "\uffc5\044\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\066\uffc5\067\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\076\uffc5\001\002\000\044\004" +
    "\051\005\027\006\052\013\050\014\045\015\046\017\030" +
    "\026\055\030\053\035\031\037\036\041\037\051\056\061" +
    "\047\070\032\077\033\100\054\001\002\000\004\077\230" +
    "\001\002\000\004\041\222\001\002\000\004\041\203\001" +
    "\002\000\004\041\176\001\002\000\106\002\uffc7\003\uffc7" +
    "\016\uffc7\020\uffc7\023\uffc7\025\uffc7\027\uffc7\031\uffc7\034" +
    "\uffc7\040\uffc7\042\uffc7\044\uffc7\046\uffc7\047\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\066\uffc7\067\uffc7" +
    "\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\001" +
    "\002\000\004\041\131\001\002\000\044\004\051\005\027" +
    "\006\052\013\050\014\045\015\046\017\030\026\055\030" +
    "\053\035\031\037\036\041\037\051\056\061\047\070\032" +
    "\077\033\100\054\001\002\000\054\031\070\051\101\052" +
    "\076\053\102\054\103\055\077\056\067\057\060\060\063" +
    "\061\074\062\072\063\066\064\104\066\061\067\064\071" +
    "\071\072\075\073\065\074\062\075\073\076\100\001\002" +
    "\000\044\004\051\005\027\006\052\013\050\014\045\015" +
    "\046\017\030\026\055\030\053\035\031\037\036\041\037" +
    "\051\056\061\047\070\032\077\033\100\054\001\002\000" +
    "\044\004\051\005\027\006\052\013\050\014\045\015\046" +
    "\017\030\026\055\030\053\035\031\037\036\041\037\051" +
    "\056\061\047\070\032\077\033\100\054\001\002\000\044" +
    "\004\051\005\027\006\052\013\050\014\045\015\046\017" +
    "\030\026\055\030\053\035\031\037\036\041\037\051\056" +
    "\061\047\070\032\077\033\100\054\001\002\000\044\004" +
    "\051\005\027\006\052\013\050\014\045\015\046\017\030" +
    "\026\055\030\053\035\031\037\036\041\037\051\056\061" +
    "\047\070\032\077\033\100\054\001\002\000\044\004\051" +
    "\005\027\006\052\013\050\014\045\015\046\017\030\026" +
    "\055\030\053\035\031\037\036\041\037\051\056\061\047" +
    "\070\032\077\033\100\054\001\002\000\044\004\051\005" +
    "\027\006\052\013\050\014\045\015\046\017\030\026\055" +
    "\030\053\035\031\037\036\041\037\051\056\061\047\070" +
    "\032\077\033\100\054\001\002\000\044\004\051\005\027" +
    "\006\052\013\050\014\045\015\046\017\030\026\055\030" +
    "\053\035\031\037\036\041\037\051\056\061\047\070\032" +
    "\077\033\100\054\001\002\000\044\004\051\005\027\006" +
    "\052\013\050\014\045\015\046\017\030\026\055\030\053" +
    "\035\031\037\036\041\037\051\056\061\047\070\032\077" +
    "\033\100\054\001\002\000\044\004\051\005\027\006\052" +
    "\013\050\014\045\015\046\017\030\026\055\030\053\035" +
    "\031\037\036\041\037\051\056\061\047\070\032\077\033" +
    "\100\054\001\002\000\044\004\051\005\027\006\052\013" +
    "\050\014\045\015\046\017\030\026\055\030\053\035\031" +
    "\037\036\041\037\051\056\061\047\070\032\077\033\100" +
    "\054\001\002\000\044\004\051\005\027\006\052\013\050" +
    "\014\045\015\046\017\030\026\055\030\053\035\031\037" +
    "\036\041\037\051\056\061\047\070\032\077\033\100\054" +
    "\001\002\000\044\004\051\005\027\006\052\013\050\014" +
    "\045\015\046\017\030\026\055\030\053\035\031\037\036" +
    "\041\037\051\056\061\047\070\032\077\033\100\054\001" +
    "\002\000\044\004\051\005\027\006\052\013\050\014\045" +
    "\015\046\017\030\026\055\030\053\035\031\037\036\041" +
    "\037\051\056\061\047\070\032\077\033\100\054\001\002" +
    "\000\044\004\051\005\027\006\052\013\050\014\045\015" +
    "\046\017\030\026\055\030\053\035\031\037\036\041\037" +
    "\051\056\061\047\070\032\077\033\100\054\001\002\000" +
    "\044\004\051\005\027\006\052\013\050\014\045\015\046" +
    "\017\030\026\055\030\053\035\031\037\036\041\037\051" +
    "\056\061\047\070\032\077\033\100\054\001\002\000\044" +
    "\004\051\005\027\006\052\013\050\014\045\015\046\017" +
    "\030\026\055\030\053\035\031\037\036\041\037\051\056" +
    "\061\047\070\032\077\033\100\054\001\002\000\044\004" +
    "\051\005\027\006\052\013\050\014\045\015\046\017\030" +
    "\026\055\030\053\035\031\037\036\041\037\051\056\061" +
    "\047\070\032\077\033\100\054\001\002\000\106\002\uffb6" +
    "\003\uffb6\016\uffb6\020\uffb6\023\uffb6\025\uffb6\027\uffb6\031" +
    "\uffb6\034\uffb6\040\uffb6\042\uffb6\044\uffb6\046\uffb6\047\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\066\uffb6" +
    "\067\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\001\002\000\044\004\051\005\027\006\052\013\050" +
    "\014\045\015\046\017\030\026\055\030\053\035\031\037" +
    "\036\041\037\051\056\061\047\070\032\077\033\100\054" +
    "\001\002\000\044\004\051\005\027\006\052\013\050\014" +
    "\045\015\046\017\030\026\055\030\053\035\031\037\036" +
    "\041\037\051\056\061\047\070\032\077\033\100\054\001" +
    "\002\000\044\004\051\005\027\006\052\013\050\014\045" +
    "\015\046\017\030\026\055\030\053\035\031\037\036\041" +
    "\037\051\056\061\047\070\032\077\033\100\054\001\002" +
    "\000\106\002\uffaa\003\uffaa\016\uffaa\020\uffaa\023\uffaa\025" +
    "\uffaa\027\uffaa\031\uffaa\034\uffaa\040\uffaa\042\uffaa\044\uffaa" +
    "\046\uffaa\047\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\066\061\067\064\071\071\072\075\073\uffaa\074" +
    "\uffaa\075\uffaa\076\uffaa\001\002\000\066\002\uffb2\003\uffb2" +
    "\016\uffb2\020\uffb2\023\uffb2\025\uffb2\027\uffb2\031\070\034" +
    "\uffb2\040\uffb2\042\uffb2\044\uffb2\046\uffb2\047\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\060\063\061\074\062\072\063\066\064" +
    "\104\066\061\067\064\071\071\072\075\001\002\000\102" +
    "\002\uffb3\003\uffb3\016\uffb3\020\uffb3\023\uffb3\025\uffb3\027" +
    "\uffb3\031\070\034\uffb3\040\uffb3\042\uffb3\044\uffb3\046\uffb3" +
    "\047\uffb3\051\uffb3\054\103\055\077\056\067\057\060\060" +
    "\063\061\074\062\072\063\066\064\104\066\061\067\064" +
    "\071\071\072\075\073\065\074\062\075\073\076\100\001" +
    "\002\000\066\002\uff95\003\uff95\016\uff95\020\uff95\023\uff95" +
    "\025\uff95\027\uff95\031\070\034\uff95\040\uff95\042\uff95\044" +
    "\uff95\046\uff95\047\uff95\051\uff95\052\uff95\053\uff95\060\063" +
    "\061\074\062\072\063\066\064\104\066\061\067\064\071" +
    "\071\072\075\001\002\000\066\002\uffb1\003\uffb1\016\uffb1" +
    "\020\uffb1\023\uffb1\025\uffb1\027\uffb1\031\070\034\uffb1\040" +
    "\uffb1\042\uffb1\044\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\060\063\061\074\062\072\063\066\064\104\066" +
    "\061\067\064\071\071\072\075\001\002\000\102\002\uffb4" +
    "\003\uffb4\016\uffb4\020\uffb4\023\uffb4\025\uffb4\027\uffb4\031" +
    "\070\034\uffb4\040\uffb4\042\uffb4\044\uffb4\046\uffb4\047\uffb4" +
    "\051\uffb4\054\103\055\077\056\067\057\060\060\063\061" +
    "\074\062\072\063\066\064\104\066\061\067\064\071\071" +
    "\072\075\073\065\074\062\075\073\076\100\001\002\000" +
    "\106\002\uffa5\003\uffa5\016\uffa5\020\uffa5\023\uffa5\025\uffa5" +
    "\027\uffa5\031\uffa5\034\uffa5\040\uffa5\042\uffa5\044\uffa5\046" +
    "\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\066\061\067\064\071\071\072\uffa5\073\uffa5\074\uffa5" +
    "\075\uffa5\076\uffa5\001\002\000\106\002\uffad\003\uffad\016" +
    "\uffad\020\uffad\023\uffad\025\uffad\027\uffad\031\070\034\uffad" +
    "\040\uffad\042\uffad\044\uffad\046\uffad\047\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\072\063\066\064\104\066\061\067\064\071" +
    "\071\072\075\073\uffad\074\uffad\075\uffad\076\uffad\001\002" +
    "\000\066\002\uff96\003\uff96\016\uff96\020\uff96\023\uff96\025" +
    "\uff96\027\uff96\031\070\034\uff96\040\uff96\042\uff96\044\uff96" +
    "\046\uff96\047\uff96\051\uff96\052\uff96\053\uff96\060\063\061" +
    "\074\062\072\063\066\064\104\066\061\067\064\071\071" +
    "\072\075\001\002\000\106\002\uffac\003\uffac\016\uffac\020" +
    "\uffac\023\uffac\025\uffac\027\uffac\031\uffac\034\uffac\040\uffac" +
    "\042\uffac\044\uffac\046\uffac\047\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\063\uffac\064\104\066\061\067\064\071\071\072" +
    "\075\073\uffac\074\uffac\075\uffac\076\uffac\001\002\000\106" +
    "\002\uffa6\003\uffa6\016\uffa6\020\uffa6\023\uffa6\025\uffa6\027" +
    "\uffa6\031\uffa6\034\uffa6\040\uffa6\042\uffa6\044\uffa6\046\uffa6" +
    "\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6" +
    "\066\061\067\064\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\001\002\000\106\002\uffa9\003\uffa9\016\uffa9" +
    "\020\uffa9\023\uffa9\025\uffa9\027\uffa9\031\uffa9\034\uffa9\040" +
    "\uffa9\042\uffa9\044\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\064\104\066\061\067\064\071\071" +
    "\072\075\073\uffa9\074\uffa9\075\uffa9\076\uffa9\001\002\000" +
    "\066\002\uffb0\003\uffb0\016\uffb0\020\uffb0\023\uffb0\025\uffb0" +
    "\027\uffb0\031\070\034\uffb0\040\uffb0\042\uffb0\044\uffb0\046" +
    "\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0\060\063\061\074" +
    "\062\072\063\066\064\104\066\061\067\064\071\071\072" +
    "\075\001\002\000\106\002\uffab\003\uffab\016\uffab\020\uffab" +
    "\023\uffab\025\uffab\027\uffab\031\uffab\034\uffab\040\uffab\042" +
    "\uffab\044\uffab\046\uffab\047\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\064\104\066\061\067\064\071\071\072\075" +
    "\073\uffab\074\uffab\075\uffab\076\uffab\001\002\000\066\002" +
    "\uff98\003\uff98\016\uff98\020\uff98\023\uff98\025\uff98\027\uff98" +
    "\031\070\034\uff98\040\uff98\042\uff98\044\uff98\046\uff98\047" +
    "\uff98\051\uff98\052\uff98\053\uff98\060\063\061\074\062\072" +
    "\063\066\064\104\066\061\067\064\071\071\072\075\001" +
    "\002\000\106\002\uffa7\003\uffa7\016\uffa7\020\uffa7\023\uffa7" +
    "\025\uffa7\027\uffa7\031\uffa7\034\uffa7\040\uffa7\042\uffa7\044" +
    "\uffa7\046\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\066\061\067\uffa7\071\uffa7\072\uffa7\073\uffa7" +
    "\074\uffa7\075\uffa7\076\uffa7\001\002\000\106\002\uffae\003" +
    "\uffae\016\uffae\020\uffae\023\uffae\025\uffae\027\uffae\031\070" +
    "\034\uffae\040\uffae\042\uffae\044\uffae\046\uffae\047\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\072\063\066\064\104\066\061\067" +
    "\064\071\071\072\075\073\uffae\074\uffae\075\uffae\076\uffae" +
    "\001\002\000\066\002\uff97\003\uff97\016\uff97\020\uff97\023" +
    "\uff97\025\uff97\027\uff97\031\070\034\uff97\040\uff97\042\uff97" +
    "\044\uff97\046\uff97\047\uff97\051\uff97\052\uff97\053\uff97\060" +
    "\063\061\074\062\072\063\066\064\104\066\061\067\064" +
    "\071\071\072\075\001\002\000\106\002\uffa8\003\uffa8\016" +
    "\uffa8\020\uffa8\023\uffa8\025\uffa8\027\uffa8\031\uffa8\034\uffa8" +
    "\040\uffa8\042\uffa8\044\uffa8\046\uffa8\047\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\064\uffa8\066\uffa8\067\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\001\002" +
    "\000\066\002\uffaf\003\uffaf\016\uffaf\020\uffaf\023\uffaf\025" +
    "\uffaf\027\uffaf\031\070\034\uffaf\040\uffaf\042\uffaf\044\uffaf" +
    "\046\uffaf\047\uffaf\051\uffaf\052\uffaf\053\uffaf\060\063\061" +
    "\074\062\072\063\066\064\104\066\061\067\064\071\071" +
    "\072\075\001\002\000\006\043\135\077\136\001\002\000" +
    "\010\042\uffb9\044\uffb9\047\uffb9\001\002\000\004\042\175" +
    "\001\002\000\004\042\174\001\002\000\004\077\136\001" +
    "\002\000\012\042\uffb8\043\137\044\uffb8\047\uffb8\001\002" +
    "\000\046\004\051\005\027\006\052\013\050\014\045\015" +
    "\046\017\030\026\055\030\053\035\031\037\036\041\141" +
    "\046\143\051\056\061\047\070\032\077\033\100\054\001" +
    "\002\000\006\044\uffbb\047\165\001\002\000\044\004\051" +
    "\005\027\006\052\013\050\014\045\015\046\017\030\026" +
    "\055\030\053\035\031\037\036\041\037\051\056\061\047" +
    "\070\032\077\033\100\054\001\002\000\060\031\070\044" +
    "\uffbd\046\152\047\uffbd\052\076\053\102\054\103\055\077" +
    "\056\067\057\060\060\063\061\074\062\072\063\066\064" +
    "\104\066\061\067\064\071\071\072\075\073\065\074\062" +
    "\075\073\076\100\001\002\000\050\004\051\005\027\006" +
    "\052\013\050\014\045\015\046\017\030\026\055\030\053" +
    "\035\031\037\036\041\037\044\uffc1\047\uffc1\051\056\061" +
    "\047\070\032\077\033\100\054\001\002\000\004\044\145" +
    "\001\002\000\110\002\uffc3\003\uffc3\016\uffc3\020\uffc3\023" +
    "\uffc3\025\uffc3\027\uffc3\031\uffc3\034\uffc3\040\uffc3\042\uffc3" +
    "\043\146\044\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\066\uffc3\067\uffc3\071\uffc3\072" +
    "\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\001\002\000\046" +
    "\004\051\005\027\006\052\013\050\014\045\015\046\017" +
    "\030\026\055\030\053\035\031\037\036\041\141\046\143" +
    "\051\056\061\047\070\032\077\033\100\054\001\002\000" +
    "\004\044\150\001\002\000\106\002\uffc2\003\uffc2\016\uffc2" +
    "\020\uffc2\023\uffc2\025\uffc2\027\uffc2\031\uffc2\034\uffc2\040" +
    "\uffc2\042\uffc2\044\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2\067\uffc2\071\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\001\002\000" +
    "\056\031\070\044\uffc0\047\uffc0\052\076\053\102\054\103" +
    "\055\077\056\067\057\060\060\063\061\074\062\072\063" +
    "\066\064\104\066\061\067\064\071\071\072\075\073\065" +
    "\074\062\075\073\076\100\001\002\000\050\004\051\005" +
    "\027\006\052\013\050\014\045\015\046\017\030\026\055" +
    "\030\053\035\031\037\036\041\037\044\uffbf\047\uffbf\051" +
    "\056\061\047\070\032\077\033\100\054\001\002\000\056" +
    "\031\070\044\uffbe\047\uffbe\052\076\053\102\054\103\055" +
    "\077\056\067\057\060\060\063\061\074\062\072\063\066" +
    "\064\104\066\061\067\064\071\071\072\075\073\065\074" +
    "\062\075\073\076\100\001\002\000\060\003\161\031\070" +
    "\042\157\047\160\052\076\053\102\054\103\055\077\056" +
    "\067\057\060\060\063\061\074\062\072\063\066\064\104" +
    "\066\061\067\064\071\071\072\075\073\065\074\062\075" +
    "\073\076\100\001\002\000\004\042\156\001\002\000\006" +
    "\044\uffbc\047\uffbc\001\002\000\106\002\uffcf\003\uffcf\016" +
    "\uffcf\020\uffcf\023\uffcf\025\uffcf\027\uffcf\031\uffcf\034\uffcf" +
    "\040\uffcf\042\uffcf\044\uffcf\046\uffcf\047\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\063\uffcf\064\uffcf\066\uffcf\067\uffcf\071" +
    "\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\001\002" +
    "\000\044\004\051\005\027\006\052\013\050\014\045\015" +
    "\046\017\030\026\055\030\053\035\031\037\036\041\037" +
    "\051\056\061\047\070\032\077\033\100\054\001\002\000" +
    "\044\004\051\005\027\006\052\013\050\014\045\015\046" +
    "\017\030\026\055\030\053\035\031\037\036\041\037\051" +
    "\056\061\047\070\032\077\033\100\054\001\002\000\102" +
    "\002\uffd2\003\161\016\uffd2\020\uffd2\023\uffd2\025\uffd2\027" +
    "\uffd2\031\070\034\uffd2\040\uffd2\042\uffd2\044\uffd2\047\160" +
    "\052\076\053\102\054\103\055\077\056\067\057\060\060" +
    "\063\061\074\062\072\063\066\064\104\066\061\067\064" +
    "\071\071\072\075\073\065\074\062\075\073\076\100\001" +
    "\002\000\026\002\uffd0\016\uffd0\020\uffd0\023\uffd0\025\uffd0" +
    "\027\uffd0\034\uffd0\040\uffd0\042\uffd0\044\uffd0\001\002\000" +
    "\026\002\uffd1\016\uffd1\020\uffd1\023\uffd1\025\uffd1\027\uffd1" +
    "\034\uffd1\040\uffd1\042\uffd1\044\uffd1\001\002\000\046\004" +
    "\051\005\027\006\052\013\050\014\045\015\046\017\030" +
    "\026\055\030\053\035\031\037\036\041\141\046\143\051" +
    "\056\061\047\070\032\077\033\100\054\001\002\000\004" +
    "\044\uffba\001\002\000\004\044\173\001\002\000\006\044" +
    "\uff91\047\171\001\002\000\004\077\136\001\002\000\004" +
    "\044\uff90\001\002\000\004\042\uff99\001\002\000\106\002" +
    "\uffa0\003\uffa0\016\uffa0\020\uffa0\023\uffa0\025\uffa0\027\uffa0" +
    "\031\uffa0\034\uffa0\040\uffa0\042\uffa0\044\uffa0\046\uffa0\047" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\066" +
    "\uffa0\067\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0" +
    "\076\uffa0\001\002\000\106\002\uff9f\003\uff9f\016\uff9f\020" +
    "\uff9f\023\uff9f\025\uff9f\027\uff9f\031\uff9f\034\uff9f\040\uff9f" +
    "\042\uff9f\044\uff9f\046\uff9f\047\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\066\uff9f\067\uff9f\071\uff9f\072" +
    "\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\001\002\000\006" +
    "\043\135\077\136\001\002\000\004\042\202\001\002\000" +
    "\004\042\201\001\002\000\106\002\uffa2\003\uffa2\016\uffa2" +
    "\020\uffa2\023\uffa2\025\uffa2\027\uffa2\031\uffa2\034\uffa2\040" +
    "\uffa2\042\uffa2\044\uffa2\046\uffa2\047\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\062\uffa2\063\uffa2\064\uffa2\066\uffa2\067\uffa2\071\uffa2" +
    "\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\001\002\000" +
    "\106\002\uffa1\003\uffa1\016\uffa1\020\uffa1\023\uffa1\025\uffa1" +
    "\027\uffa1\031\uffa1\034\uffa1\040\uffa1\042\uffa1\044\uffa1\046" +
    "\uffa1\047\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064" +
    "\uffa1\066\uffa1\067\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\076\uffa1\001\002\000\044\004\051\005\027\006" +
    "\052\013\050\014\045\015\046\017\030\026\055\030\053" +
    "\035\031\037\036\041\037\051\056\061\047\070\032\077" +
    "\033\100\054\001\002\000\054\031\070\047\205\052\076" +
    "\053\102\054\103\055\077\056\067\057\060\060\063\061" +
    "\074\062\072\063\066\064\104\066\061\067\064\071\071" +
    "\072\075\073\065\074\062\075\073\076\100\001\002\000" +
    "\006\043\206\077\207\001\002\000\044\004\051\005\027" +
    "\006\052\013\050\014\045\015\046\017\030\026\055\030" +
    "\053\035\031\037\036\041\037\051\056\061\047\070\032" +
    "\077\033\100\054\001\002\000\004\047\210\001\002\000" +
    "\004\077\211\001\002\000\004\042\212\001\002\000\106" +
    "\002\uff9d\003\uff9d\016\uff9d\020\uff9d\023\uff9d\025\uff9d\027" +
    "\uff9d\031\uff9d\034\uff9d\040\uff9d\042\uff9d\044\uff9d\046\uff9d" +
    "\047\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\066\uff9d\067\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075" +
    "\uff9d\076\uff9d\001\002\000\004\044\214\001\002\000\004" +
    "\047\215\001\002\000\004\043\216\001\002\000\044\004" +
    "\051\005\027\006\052\013\050\014\045\015\046\017\030" +
    "\026\055\030\053\035\031\037\036\041\037\051\056\061" +
    "\047\070\032\077\033\100\054\001\002\000\004\044\220" +
    "\001\002\000\004\042\221\001\002\000\106\002\uff9b\003" +
    "\uff9b\016\uff9b\020\uff9b\023\uff9b\025\uff9b\027\uff9b\031\uff9b" +
    "\034\uff9b\040\uff9b\042\uff9b\044\uff9b\046\uff9b\047\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\066\uff9b\067" +
    "\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b" +
    "\001\002\000\006\043\135\077\136\001\002\000\004\042" +
    "\226\001\002\000\004\042\225\001\002\000\106\002\uffa3" +
    "\003\uffa3\016\uffa3\020\uffa3\023\uffa3\025\uffa3\027\uffa3\031" +
    "\uffa3\034\uffa3\040\uffa3\042\uffa3\044\uffa3\046\uffa3\047\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\066\uffa3" +
    "\067\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\001\002\000\106\002\uffa4\003\uffa4\016\uffa4\020\uffa4" +
    "\023\uffa4\025\uffa4\027\uffa4\031\uffa4\034\uffa4\040\uffa4\042" +
    "\uffa4\044\uffa4\046\uffa4\047\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\066\uffa4\067\uffa4\071\uffa4\072\uffa4" +
    "\073\uffa4\074\uffa4\075\uffa4\076\uffa4\001\002\000\004\050" +
    "\233\001\002\000\006\047\231\050\uffdb\001\002\000\004" +
    "\077\230\001\002\000\004\050\uffda\001\002\000\012\022" +
    "\240\024\234\041\237\077\235\001\002\000\004\043\254" +
    "\001\002\000\034\002\uffd8\007\uffd8\016\uffd8\020\uffd8\023" +
    "\uffd8\025\uffd8\027\uffd8\034\uffd8\040\uffd8\042\uffd8\044\uffd8" +
    "\045\uffd8\047\uffd8\001\002\000\004\045\252\001\002\000" +
    "\012\022\240\024\234\041\237\077\235\001\002\000\004" +
    "\041\241\001\002\000\044\004\051\005\027\006\052\013" +
    "\050\014\045\015\046\017\030\026\055\030\053\035\031" +
    "\037\036\041\037\051\056\061\047\070\032\077\033\100" +
    "\054\001\002\000\062\003\161\031\070\042\uffd2\046\245" +
    "\047\160\052\076\053\102\054\103\055\077\056\067\057" +
    "\060\060\063\061\074\062\072\063\066\064\104\066\061" +
    "\067\064\071\071\072\075\073\065\074\062\075\073\076" +
    "\100\001\002\000\004\042\244\001\002\000\034\002\uffd6" +
    "\007\uffd6\016\uffd6\020\uffd6\023\uffd6\025\uffd6\027\uffd6\034" +
    "\uffd6\040\uffd6\042\uffd6\044\uffd6\045\uffd6\047\uffd6\001\002" +
    "\000\044\004\051\005\027\006\052\013\050\014\045\015" +
    "\046\017\030\026\055\030\053\035\031\037\036\041\037" +
    "\051\056\061\047\070\032\077\033\100\054\001\002\000" +
    "\054\031\070\042\247\052\076\053\102\054\103\055\077" +
    "\056\067\057\060\060\063\061\074\062\072\063\066\064" +
    "\104\066\061\067\064\071\071\072\075\073\065\074\062" +
    "\075\073\076\100\001\002\000\034\002\uffd7\007\uffd7\016" +
    "\uffd7\020\uffd7\023\uffd7\025\uffd7\027\uffd7\034\uffd7\040\uffd7" +
    "\042\uffd7\044\uffd7\045\uffd7\047\uffd7\001\002\000\004\042" +
    "\251\001\002\000\034\002\uffd9\007\uffd9\016\uffd9\020\uffd9" +
    "\023\uffd9\025\uffd9\027\uffd9\034\uffd9\040\uffd9\042\uffd9\044" +
    "\uffd9\045\uffd9\047\uffd9\001\002\000\044\004\051\005\027" +
    "\006\052\013\050\014\045\015\046\017\030\026\055\030" +
    "\053\035\031\037\036\041\037\051\056\061\047\070\032" +
    "\077\033\100\054\001\002\000\106\002\uff94\003\uff94\016" +
    "\uff94\020\uff94\023\uff94\025\uff94\027\uff94\031\070\034\uff94" +
    "\040\uff94\042\uff94\044\uff94\046\uff94\047\uff94\051\uff94\052" +
    "\076\053\102\054\103\055\077\056\067\057\060\060\063" +
    "\061\074\062\072\063\066\064\104\066\061\067\064\071" +
    "\071\072\075\073\065\074\062\075\073\076\100\001\002" +
    "\000\012\022\240\024\234\041\237\077\235\001\002\000" +
    "\006\044\257\047\260\001\002\000\006\044\uffd4\047\uffd4" +
    "\001\002\000\004\033\262\001\002\000\012\022\240\024" +
    "\234\041\237\077\235\001\002\000\006\044\uffd3\047\uffd3" +
    "\001\002\000\012\022\240\024\234\041\237\077\235\001" +
    "\002\000\034\002\uffd5\007\uffd5\016\uffd5\020\uffd5\023\uffd5" +
    "\025\uffd5\027\uffd5\034\uffd5\040\uffd5\042\uffd5\044\uffd5\045" +
    "\uffd5\047\uffd5\001\002\000\106\002\uffb7\003\uffb7\016\uffb7" +
    "\020\uffb7\023\uffb7\025\uffb7\027\uffb7\031\uffb7\034\uffb7\040" +
    "\uffb7\042\uffb7\044\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\066\061\067\064\071\071" +
    "\072\075\073\uffb7\074\uffb7\075\uffb7\076\uffb7\001\002\000" +
    "\044\004\051\005\027\006\052\013\050\014\045\015\046" +
    "\017\030\026\055\030\053\035\031\037\036\041\037\051" +
    "\056\061\047\070\032\077\033\100\054\001\002\000\054" +
    "\031\070\047\267\052\076\053\102\054\103\055\077\056" +
    "\067\057\060\060\063\061\074\062\072\063\066\064\104" +
    "\066\061\067\064\071\071\072\075\073\065\074\062\075" +
    "\073\076\100\001\002\000\044\004\051\005\027\006\052" +
    "\013\050\014\045\015\046\017\030\026\055\030\053\035" +
    "\031\037\036\041\037\051\056\061\047\070\032\077\033" +
    "\100\054\001\002\000\054\031\070\047\271\052\076\053" +
    "\102\054\103\055\077\056\067\057\060\060\063\061\074" +
    "\062\072\063\066\064\104\066\061\067\064\071\071\072" +
    "\075\073\065\074\062\075\073\076\100\001\002\000\044" +
    "\004\051\005\027\006\052\013\050\014\045\015\046\017" +
    "\030\026\055\030\053\035\031\037\036\041\037\051\056" +
    "\061\047\070\032\077\033\100\054\001\002\000\054\031" +
    "\070\042\273\052\076\053\102\054\103\055\077\056\067" +
    "\057\060\060\063\061\074\062\072\063\066\064\104\066" +
    "\061\067\064\071\071\072\075\073\065\074\062\075\073" +
    "\076\100\001\002\000\106\002\uff9e\003\uff9e\016\uff9e\020" +
    "\uff9e\023\uff9e\025\uff9e\027\uff9e\031\uff9e\034\uff9e\040\uff9e" +
    "\042\uff9e\044\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\064\uff9e\066\uff9e\067\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\001\002\000\054" +
    "\031\070\042\157\052\076\053\102\054\103\055\077\056" +
    "\067\057\060\060\063\061\074\062\072\063\066\064\104" +
    "\066\061\067\064\071\071\072\075\073\065\074\062\075" +
    "\073\076\100\001\002\000\106\002\uffb5\003\uffb5\016\uffb5" +
    "\020\uffb5\023\uffb5\025\uffb5\027\uffb5\031\uffb5\034\uffb5\040" +
    "\uffb5\042\uffb5\044\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\066\uffb5\067\uffb5\071\uffb5" +
    "\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\001\002\000" +
    "\004\050\277\001\002\000\012\022\240\024\234\041\237" +
    "\077\235\001\002\000\004\045\301\001\002\000\044\004" +
    "\051\005\027\006\052\013\050\014\045\015\046\017\030" +
    "\026\055\030\053\035\031\037\036\041\037\051\056\061" +
    "\047\070\032\077\033\100\054\001\002\000\106\002\uff92" +
    "\003\uff92\016\uff92\020\uff92\023\uff92\025\uff92\027\uff92\031" +
    "\070\034\uff92\040\uff92\042\uff92\044\uff92\046\uff92\047\uff92" +
    "\051\uff92\052\076\053\102\054\103\055\077\056\067\057" +
    "\060\060\063\061\074\062\072\063\066\064\104\066\061" +
    "\067\064\071\071\072\075\073\065\074\062\075\073\076" +
    "\100\001\002\000\004\050\304\001\002\000\012\022\240" +
    "\024\234\041\237\077\235\001\002\000\004\045\306\001" +
    "\002\000\044\004\051\005\027\006\052\013\050\014\045" +
    "\015\046\017\030\026\055\030\053\035\031\037\036\041" +
    "\037\051\056\061\047\070\032\077\033\100\054\001\002" +
    "\000\106\002\uff93\003\uff93\016\uff93\020\uff93\023\uff93\025" +
    "\uff93\027\uff93\031\070\034\uff93\040\uff93\042\uff93\044\uff93" +
    "\046\uff93\047\uff93\051\uff93\052\076\053\102\054\103\055" +
    "\077\056\067\057\060\060\063\061\074\062\072\063\066" +
    "\064\104\066\061\067\064\071\071\072\075\073\065\074" +
    "\062\075\073\076\100\001\002\000\044\004\051\005\027" +
    "\006\052\013\050\014\045\015\046\017\030\026\055\030" +
    "\053\035\031\037\036\041\037\051\056\061\047\070\032" +
    "\077\033\100\054\001\002\000\054\031\070\047\312\052" +
    "\076\053\102\054\103\055\077\056\067\057\060\060\063" +
    "\061\074\062\072\063\066\064\104\066\061\067\064\071" +
    "\071\072\075\073\065\074\062\075\073\076\100\001\002" +
    "\000\006\043\314\077\313\001\002\000\004\047\324\001" +
    "\002\000\044\004\051\005\027\006\052\013\050\014\045" +
    "\015\046\017\030\026\055\030\053\035\031\037\036\041" +
    "\037\051\056\061\047\070\032\077\033\100\054\001\002" +
    "\000\004\044\316\001\002\000\004\047\317\001\002\000" +
    "\004\043\320\001\002\000\044\004\051\005\027\006\052" +
    "\013\050\014\045\015\046\017\030\026\055\030\053\035" +
    "\031\037\036\041\037\051\056\061\047\070\032\077\033" +
    "\100\054\001\002\000\004\044\322\001\002\000\004\042" +
    "\323\001\002\000\106\002\uff9a\003\uff9a\016\uff9a\020\uff9a" +
    "\023\uff9a\025\uff9a\027\uff9a\031\uff9a\034\uff9a\040\uff9a\042" +
    "\uff9a\044\uff9a\046\uff9a\047\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\063\uff9a\064\uff9a\066\uff9a\067\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\076\uff9a\001\002\000\004\077" +
    "\325\001\002\000\004\042\326\001\002\000\106\002\uff9c" +
    "\003\uff9c\016\uff9c\020\uff9c\023\uff9c\025\uff9c\027\uff9c\031" +
    "\uff9c\034\uff9c\040\uff9c\042\uff9c\044\uff9c\046\uff9c\047\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\066\uff9c" +
    "\067\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\001\002\000\056\002\uffeb\031\070\034\uffeb\052\076" +
    "\053\102\054\103\055\077\056\067\057\060\060\063\061" +
    "\074\062\072\063\066\064\104\066\061\067\064\071\071" +
    "\072\075\073\065\074\062\075\073\076\100\001\002\000" +
    "\004\002\uffff\001\002\000\044\004\051\005\027\006\052" +
    "\013\050\014\045\015\046\017\030\026\055\030\053\035" +
    "\031\037\036\041\037\051\056\061\047\070\032\077\033" +
    "\100\054\001\002\000\004\002\uffe8\001\002\000\010\007" +
    "\336\010\334\050\335\001\002\000\012\022\240\024\234" +
    "\041\237\077\235\001\002\000\012\022\240\024\234\041" +
    "\237\077\235\001\002\000\046\004\051\005\027\006\052" +
    "\013\050\014\045\015\046\017\030\026\055\030\053\035" +
    "\031\037\036\041\037\043\340\051\056\061\047\070\032" +
    "\077\033\100\054\001\002\000\022\002\uffee\016\uffee\020" +
    "\uffee\023\uffee\025\uffee\027\uffee\034\uffee\040\uffee\001\002" +
    "\000\010\043\345\061\346\100\343\001\002\000\022\002" +
    "\ufff0\016\ufff0\020\ufff0\023\ufff0\025\ufff0\027\ufff0\034\ufff0" +
    "\040\ufff0\001\002\000\072\002\ufff3\016\ufff3\020\ufff3\023" +
    "\ufff3\025\ufff3\027\ufff3\031\070\034\ufff3\040\ufff3\052\076" +
    "\053\102\054\103\055\077\056\067\057\060\060\063\061" +
    "\074\062\072\063\066\064\104\066\061\067\064\071\071" +
    "\072\075\073\065\074\062\075\073\076\100\001\002\000" +
    "\006\044\uff8f\047\360\001\002\000\006\044\uff8a\047\356" +
    "\001\002\000\006\061\346\100\343\001\002\000\004\100" +
    "\353\001\002\000\004\044\352\001\002\000\004\044\351" +
    "\001\002\000\022\002\uff88\016\uff88\020\uff88\023\uff88\025" +
    "\uff88\027\uff88\034\uff88\040\uff88\001\002\000\026\002\uff8b" +
    "\016\uff8b\020\uff8b\023\uff8b\025\uff8b\027\uff8b\034\uff8b\040" +
    "\uff8b\044\uff8b\047\uff8b\001\002\000\006\044\uff8e\047\354" +
    "\001\002\000\006\061\346\100\343\001\002\000\004\044" +
    "\uff8c\001\002\000\004\043\345\001\002\000\004\044\uff89" +
    "\001\002\000\006\061\346\100\343\001\002\000\004\044" +
    "\uff8d\001\002\000\004\007\363\001\002\000\046\004\051" +
    "\005\027\006\052\013\050\014\045\015\046\017\030\026" +
    "\055\030\053\035\031\037\036\041\037\043\340\051\056" +
    "\061\047\070\032\077\033\100\054\001\002\000\022\002" +
    "\uffed\016\uffed\020\uffed\023\uffed\025\uffed\027\uffed\034\uffed" +
    "\040\uffed\001\002\000\022\002\uffef\016\uffef\020\uffef\023" +
    "\uffef\025\uffef\027\uffef\034\uffef\040\uffef\001\002\000\072" +
    "\002\ufff2\016\ufff2\020\ufff2\023\ufff2\025\ufff2\027\ufff2\031" +
    "\070\034\ufff2\040\ufff2\052\076\053\102\054\103\055\077" +
    "\056\067\057\060\060\063\061\074\062\072\063\066\064" +
    "\104\066\061\067\064\071\071\072\075\073\065\074\062" +
    "\075\073\076\100\001\002\000\022\002\ufff1\016\ufff1\020" +
    "\ufff1\023\ufff1\025\ufff1\027\ufff1\034\ufff1\040\ufff1\001\002" +
    "\000\022\002\uffec\016\uffec\020\uffec\023\uffec\025\uffec\027" +
    "\uffec\034\uffec\040\uffec\001\002\000\004\050\375\001\002" +
    "\000\024\002\uffe6\016\uffe6\020\uffe6\023\uffe6\025\uffe6\027" +
    "\uffe6\034\uffe6\040\uffe6\047\373\001\002\000\004\077\230" +
    "\001\002\000\022\002\uffe5\016\uffe5\020\uffe5\023\uffe5\025" +
    "\uffe5\027\uffe5\034\uffe5\040\uffe5\001\002\000\012\022\240" +
    "\024\234\041\237\077\235\001\002\000\024\002\uffe2\016" +
    "\uffe2\020\uffe2\023\uffe2\025\uffe2\027\uffe2\034\uffe2\040\uffe2" +
    "\047\uffe2\001\002\000\012\002\ufffb\025\ufffb\027\ufffb\034" +
    "\ufffb\001\002\000\022\002\ufff4\016\ufff4\020\ufff4\023\ufff4" +
    "\025\ufff4\027\ufff4\034\ufff4\040\ufff4\001\002\000\022\002" +
    "\ufff6\016\ufff6\020\ufff6\023\ufff6\025\ufff6\027\ufff6\034\ufff6" +
    "\040\ufff6\001\002\000\024\002\uffe4\016\uffe4\020\uffe4\023" +
    "\uffe4\025\uffe4\027\uffe4\034\uffe4\040\uffe4\047\u0111\001\002" +
    "\000\004\050\u0105\001\002\000\022\002\ufff5\016\ufff5\020" +
    "\ufff5\023\ufff5\025\ufff5\027\ufff5\034\ufff5\040\ufff5\001\002" +
    "\000\012\022\u0107\024\234\041\237\077\235\001\002\000" +
    "\024\002\uffe1\016\uffe1\020\uffe1\023\uffe1\025\uffe1\027\uffe1" +
    "\034\uffe1\040\uffe1\047\uffe1\001\002\000\026\002\uffdc\016" +
    "\uffdc\020\uffdc\023\uffdc\025\uffdc\027\uffdc\034\uffdc\040\uffdc" +
    "\041\u0108\047\uffdc\001\002\000\050\004\051\005\027\006" +
    "\052\013\050\014\045\015\046\017\030\026\055\030\053" +
    "\035\031\037\036\041\037\042\u0109\046\u010b\051\056\061" +
    "\047\070\032\077\033\100\054\001\002\000\024\002\uffde" +
    "\016\uffde\020\uffde\023\uffde\025\uffde\027\uffde\034\uffde\040" +
    "\uffde\047\uffde\001\002\000\062\003\161\031\070\042\uffd2" +
    "\046\u010f\047\160\052\076\053\102\054\103\055\077\056" +
    "\067\057\060\060\063\061\074\062\072\063\066\064\104" +
    "\066\061\067\064\071\071\072\075\073\065\074\062\075" +
    "\073\076\100\001\002\000\046\004\051\005\027\006\052" +
    "\013\050\014\045\015\046\017\030\026\055\030\053\035" +
    "\031\037\036\041\037\042\u010c\051\056\061\047\070\032" +
    "\077\033\100\054\001\002\000\024\002\uffdd\016\uffdd\020" +
    "\uffdd\023\uffdd\025\uffdd\027\uffdd\034\uffdd\040\uffdd\047\uffdd" +
    "\001\002\000\054\031\070\042\u010e\052\076\053\102\054" +
    "\103\055\077\056\067\057\060\060\063\061\074\062\072" +
    "\063\066\064\104\066\061\067\064\071\071\072\075\073" +
    "\065\074\062\075\073\076\100\001\002\000\024\002\uffdf" +
    "\016\uffdf\020\uffdf\023\uffdf\025\uffdf\027\uffdf\034\uffdf\040" +
    "\uffdf\047\uffdf\001\002\000\046\004\051\005\027\006\052" +
    "\013\050\014\045\015\046\017\030\026\055\030\053\035" +
    "\031\037\036\041\037\042\u0110\051\056\061\047\070\032" +
    "\077\033\100\054\001\002\000\024\002\uffe0\016\uffe0\020" +
    "\uffe0\023\uffe0\025\uffe0\027\uffe0\034\uffe0\040\uffe0\047\uffe0" +
    "\001\002\000\004\077\230\001\002\000\022\002\uffe3\016" +
    "\uffe3\020\uffe3\023\uffe3\025\uffe3\027\uffe3\034\uffe3\040\uffe3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\004\002\004\001\001\000\022\003\014\004" +
    "\021\005\017\006\012\011\011\012\007\013\016\014\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\u0100\016\u0103\017\371\020\u0101\021\u0102\001\001\000\002" +
    "\001\001\000\024\025\161\026\377\027\025\030\040\034" +
    "\034\035\037\036\043\037\033\040\042\001\001\000\002" +
    "\001\001\000\016\005\376\006\012\011\011\012\007\013" +
    "\016\014\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\367\017\371\021\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\022" +
    "\001\001\000\004\010\327\001\001\000\022\025\326\027" +
    "\025\030\040\034\034\035\037\036\043\037\033\040\042" +
    "\001\001\000\022\025\041\027\025\030\040\034\034\035" +
    "\037\036\043\037\033\040\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\302\001\001\000\004\021" +
    "\275\001\001\000\022\025\274\027\025\030\040\034\034" +
    "\035\037\036\043\037\033\040\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\025\273\027\025\030\040\034\034\035\037\036" +
    "\043\037\033\040\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\025\263" +
    "\027\025\030\040\034\034\035\037\036\043\037\033\040" +
    "\042\001\001\000\004\021\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\025\056\027\025\030\040\034\034" +
    "\035\037\036\043\037\033\040\042\001\001\000\002\001" +
    "\001\000\022\025\127\027\025\030\040\034\034\035\037" +
    "\036\043\037\033\040\042\001\001\000\022\025\126\027" +
    "\025\030\040\034\034\035\037\036\043\037\033\040\042" +
    "\001\001\000\022\025\125\027\025\030\040\034\034\035" +
    "\037\036\043\037\033\040\042\001\001\000\022\025\124" +
    "\027\025\030\040\034\034\035\037\036\043\037\033\040" +
    "\042\001\001\000\022\025\123\027\025\030\040\034\034" +
    "\035\037\036\043\037\033\040\042\001\001\000\022\025" +
    "\122\027\025\030\040\034\034\035\037\036\043\037\033" +
    "\040\042\001\001\000\022\025\121\027\025\030\040\034" +
    "\034\035\037\036\043\037\033\040\042\001\001\000\022" +
    "\025\120\027\025\030\040\034\034\035\037\036\043\037" +
    "\033\040\042\001\001\000\022\025\117\027\025\030\040" +
    "\034\034\035\037\036\043\037\033\040\042\001\001\000" +
    "\022\025\116\027\025\030\040\034\034\035\037\036\043" +
    "\037\033\040\042\001\001\000\022\025\115\027\025\030" +
    "\040\034\034\035\037\036\043\037\033\040\042\001\001" +
    "\000\022\025\114\027\025\030\040\034\034\035\037\036" +
    "\043\037\033\040\042\001\001\000\022\025\113\027\025" +
    "\030\040\034\034\035\037\036\043\037\033\040\042\001" +
    "\001\000\022\025\112\027\025\030\040\034\034\035\037" +
    "\036\043\037\033\040\042\001\001\000\022\025\111\027" +
    "\025\030\040\034\034\035\037\036\043\037\033\040\042" +
    "\001\001\000\022\025\110\027\025\030\040\034\034\035" +
    "\037\036\043\037\033\040\042\001\001\000\022\025\107" +
    "\027\025\030\040\034\034\035\037\036\043\037\033\040" +
    "\042\001\001\000\002\001\001\000\022\025\106\027\025" +
    "\030\040\034\034\035\037\036\043\037\033\040\042\001" +
    "\001\000\022\025\105\027\025\030\040\034\034\035\037" +
    "\036\043\037\033\040\042\001\001\000\022\025\104\027" +
    "\025\030\040\034\034\035\037\036\043\037\033\040\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\131\031\132\041\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\131\031\167\043\166\001\001\000\002\001" +
    "\001\000\026\025\141\027\025\030\040\032\137\033\143" +
    "\034\034\035\037\036\043\037\033\040\042\001\001\000" +
    "\002\001\001\000\024\025\153\026\154\027\025\030\040" +
    "\034\034\035\037\036\043\037\033\040\042\001\001\000" +
    "\002\001\001\000\022\025\150\027\025\030\040\034\034" +
    "\035\037\036\043\037\033\040\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\025\141\027\025\030\040" +
    "\032\137\033\146\034\034\035\037\036\043\037\033\040" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\025\152\027\025\030\040\034\034\035" +
    "\037\036\043\037\033\040\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\025\161\026\163\027\025\030\040" +
    "\034\034\035\037\036\043\037\033\040\042\001\001\000" +
    "\024\025\161\026\162\027\025\030\040\034\034\035\037" +
    "\036\043\037\033\040\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\141\027\025" +
    "\030\040\032\137\033\165\034\034\035\037\036\043\037" +
    "\033\040\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\131\031\167\043\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\131\031\176\041\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\025\203\027\025\030\040\034" +
    "\034\035\037\036\043\037\033\040\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\025\161\026\212\027" +
    "\025\030\040\034\034\035\037\036\043\037\033\040\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\025\161\026\216\027\025\030" +
    "\040\034\034\035\037\036\043\037\033\040\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\131\031\222\041\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\231\001\001" +
    "\000\002\001\001\000\004\022\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\247" +
    "\001\001\000\002\001\001\000\024\025\241\026\242\027" +
    "\025\030\040\034\034\035\037\036\043\037\033\040\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\025\245\027\025\030\040\034\034\035\037" +
    "\036\043\037\033\040\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\025\252\027\025\030\040\034\034\035\037\036\043\037" +
    "\033\040\042\001\001\000\002\001\001\000\006\022\255" +
    "\023\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\260\001\001\000\002\001\001" +
    "\000\004\022\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\025\265\027\025\030\040\034\034\035\037" +
    "\036\043\037\033\040\042\001\001\000\002\001\001\000" +
    "\022\025\267\027\025\030\040\034\034\035\037\036\043" +
    "\037\033\040\042\001\001\000\002\001\001\000\022\025" +
    "\271\027\025\030\040\034\034\035\037\036\043\037\033" +
    "\040\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\277\001\001\000\002\001\001\000\022\025\301\027" +
    "\025\030\040\034\034\035\037\036\043\037\033\040\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\304\001\001\000\002\001\001\000\022\025\306\027\025" +
    "\030\040\034\034\035\037\036\043\037\033\040\042\001" +
    "\001\000\002\001\001\000\022\025\310\027\025\030\040" +
    "\034\034\035\037\036\043\037\033\040\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\025\161\026\314\027\025\030\040\034\034\035\037\036" +
    "\043\037\033\040\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\025\161\026\320\027" +
    "\025\030\040\034\034\035\037\036\043\037\033\040\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\025\161\026" +
    "\331\027\025\030\040\034\034\035\037\036\043\037\033" +
    "\040\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\366\001\001\000\004\022\361\001\001\000\026" +
    "\025\341\027\025\030\040\034\034\035\037\036\043\037" +
    "\033\040\042\046\340\047\336\001\001\000\002\001\001" +
    "\000\010\044\346\045\347\046\343\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\354\001\001\000\002\001" +
    "\001\000\006\045\356\046\343\001\001\000\002\001\001" +
    "\000\004\044\360\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\025\365\027\025\030\040\034\034\035\037" +
    "\036\043\037\033\040\042\046\364\047\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\373\017\371\021\370\001\001\000\002" +
    "\001\001\000\004\022\375\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\375\024\u0105\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\025\u0109\026\242\027\025\030\040\034\034\035" +
    "\037\036\043\037\033\040\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\025\u010c\027\025\030\040\034" +
    "\034\035\037\036\043\037\033\040\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\025" +
    "\245\027\025\030\040\034\034\035\037\036\043\037\033" +
    "\040\042\001\001\000\002\001\001\000\010\015\u0111\017" +
    "\371\021\370\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EssencePrimeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EssencePrimeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EssencePrimeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	 public boolean hadErrorRecovery = false;
     public StringBuffer errorMessage = new StringBuffer("");

    /* The reason for the error is passed into the method in the
       String 'message'. */

    public void report_error(String message, Object info)  {

        StringBuffer m = new StringBuffer("Parse error:");


        if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                                m.append(" in line "+(s.left));
                if (s.right >= 0)
                        m.append(", column "+(s.right));
            }
            m.append(" : "+message);
        }
        else m.append(" "+message);
        //throw new Exception(m);
        errorMessage = m;
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)  {
        report_error(message, info);
        //System.exit(1);
    }
    
    public void setErrorRecovery(boolean on) {
    	hadErrorRecovery = on;
    	//System.out.println("Error recovery on?:"+hadErrorRecovery);
    }
   
   /* 
    public boolean hadErrorRecovery() {
    	if(this.action_obj!= null)
    		return this.action_obj.hadErrorRecovery;
    	else return false;
    }
    
    public StringBuffer getActionErrorMessage() {
    	if(action_obj != null)
			return this.action_obj.errorMessage;
		else return new StringBuffer("");
	}
	*/

	


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EssencePrimeParser$actions {



	public boolean hadErrorRecovery = false;
     public StringBuffer errorMessage = new StringBuffer("");

    /* The reason for the error is passed into the method in the
       String 'message'. */

    public void report_error(String message, Object info)  {

        StringBuffer m = new StringBuffer("Parse error:");


        if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                                m.append(" in line "+(s.left));
                if (s.right >= 0)
                        m.append(", column "+(s.right));
            }
        }
        m.append(" : "+message);
        //throw new Exception(m);
        errorMessage = m;
        System.err.println(m);
    }


	public String print_array_list (ArrayList<Domain> list) {
	
		StringBuffer s = new StringBuffer("");
			
		for(int i=0; i<list.size(); i++) {
			if(i>0) s.append(",");
			s.append(list.get(i));
		} 
	
		return s.toString();
	}


  private final EssencePrimeParser parser;

  /** Constructor */
  CUP$EssencePrimeParser$actions(EssencePrimeParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EssencePrimeParser$do_action(
    int                        CUP$EssencePrimeParser$act_num,
    java_cup.runtime.lr_parser CUP$EssencePrimeParser$parser,
    java.util.Stack            CUP$EssencePrimeParser$stack,
    int                        CUP$EssencePrimeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EssencePrimeParser$result;

      /* select the action based on the action number */
      switch (CUP$EssencePrimeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // constant_matrix ::= LBRACK constant_vector_list RBRACK 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		      
                      ArrayList<ArrayList<Integer>> vectorList = (ArrayList<ArrayList<Integer>>) list;     
                     ArrayList<Integer> vector0 =  vectorList.get(0);
                  
                     
                     Integer[][] matrix = new Integer[vectorList.size()][vector0.size()];
                   
                     for(int i=0; i<vectorList.size(); i++) {
                     
                        ArrayList<Integer> vector = vectorList.get(i);
                        
                        if(vector.size() != vector0.size()) 
                           throw new Exception("Illegal constant array: every vector/row has to have the same amount of elements!");
                        
                        for(int j=0; j<vector.size(); j++)
                           matrix[i][j] = (Integer) vector.get(j);
                     
                     }
                     
                      RESULT = matrix;
                    
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_matrix",37, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // constant_vector_list ::= constant_vector COMMA constant_vector_list 
            {
              Object RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object vector = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
                             ArrayList<ArrayList<Integer>> vectorList = (ArrayList<ArrayList<Integer>>) list;
                             vectorList.add(0,(ArrayList<Integer>) vector);
                             RESULT = vectorList;
                          
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector_list",35, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // constant_vector_list ::= constant_vector 
            {
              Object RESULT =null;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                             ArrayList<ArrayList<Integer>> vectorList = new ArrayList<ArrayList<Integer>>();
                             vectorList.add(0, (ArrayList<Integer>) int_list);
                             RESULT = vectorList; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector_list",35, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // constant_vector ::= LBRACK integer_list RBRACK 
            {
              Object RESULT =null;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object i_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		   
					   RESULT = i_list;
					
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constant_vector",36, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // integer_list ::= MINUS INTEGER COMMA integer_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((ArrayList<Integer>) int_list).add(0,(Integer) (i-2*i)); 
				    RESULT = int_list; 
				 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // integer_list ::= INTEGER COMMA integer_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int int_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int int_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object int_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((ArrayList<Integer>) int_list).add(0,(Integer) i); 
				    RESULT = int_list; 
				 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // integer_list ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ArrayList<Integer> list = new ArrayList<Integer>();
                    list.add(0,(Integer) (i-2*i));
                    RESULT = list;
                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // integer_list ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ArrayList<Integer> list = new ArrayList<Integer>();
				    list.add(0,(Integer) i);
				    RESULT = list;
                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("integer_list",34, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // atom_list ::= atom_expression COMMA atom_list 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int a_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int a_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object a_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                  ((ArrayList<AtomExpression>) a_list).add(0,(AtomExpression) atom); 
				  RESULT = a_list; 
			   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // atom_list ::= atom_expression 
            {
              Object RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object atom = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                  ArrayList<AtomExpression> list = new ArrayList<AtomExpression>();
				  list.add(0,(AtomExpression) atom);
				  RESULT = list; 
			    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_list",33, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // quantified_expression ::= SUM identifier_list COLON domain DOT expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			         	  RESULT = new QuantifiedSum((ArrayList<String>) id_list,
								                     (Domain) d, 
								                     (Expression) e); 
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantified_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // quantified_expression ::= FORALL identifier_list COLON domain DOT expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			         	  boolean isUniversal = true;
			         	  RESULT = new QuantifiedExpression(isUniversal, 
								                            (ArrayList<String>) id_list,
								                            (Domain) d, 
								                            (Expression) e); 
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantified_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // quantified_expression ::= EXISTS identifier_list COLON domain DOT expression 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			         	  boolean isUniversal = false;
			         	  RESULT = new QuantifiedExpression(isUniversal, 
								                            (ArrayList<String>) id_list,
								                            (Domain) d, 
								                            (Expression) e); 
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("quantified_expression",30, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lex_expression ::= expression LEXGEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                        RESULT = new LexConstraint( (Expression) e1, 
                                                     Expression.LEX_GEQ, 
                                                    (Expression) e2); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lex_expression ::= expression LEXLEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                        RESULT = new LexConstraint( (Expression) e1, 
                                                     Expression.LEX_LEQ, 
                                                    (Expression) e2); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lex_expression ::= expression LEXGREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                        RESULT = new LexConstraint( (Expression) e1, 
                                                     Expression.LEX_GREATER, 
                                                    (Expression) e2); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lex_expression ::= expression LEXLESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                        RESULT = new LexConstraint( (Expression) e1, 
                                                     Expression.LEX_LESS, 
                                                    (Expression) e2); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("lex_expression",28, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variable_array ::= LBRACK atom_list RBRACK 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  
                    	RESULT = new VariableArray( (ArrayList<AtomExpression>) list);  
                    
                    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_array",31, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // global_constraint ::= ATLEAST LPAREN expression COMMA LBRACK expression_list RBRACK COMMA LBRACK expression_list RBRACK RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		Object list1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
					    boolean isAtmost = false;
		                RESULT = new Atmost((Expression) e, 
		                                     (ArrayList<Expression>) list1,
		                                     (ArrayList<Expression>) list2,
		                                      isAtmost 
		                                    );
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-11)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // global_constraint ::= ATMOST LPAREN expression COMMA LBRACK expression_list RBRACK COMMA LBRACK expression_list RBRACK RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-9)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		Object list1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
					    boolean isAtmost = true;
		                RESULT = new Atmost((Expression) e, 
		                                     (ArrayList<Expression>) list1,
		                                     (ArrayList<Expression>) list2,
		                                      isAtmost 
		                                    );
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-11)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // global_constraint ::= ATLEAST LPAREN expression COMMA IDENTIFIER COMMA IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int occleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int occright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String occ = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		                boolean isAtmost = false;
		                RESULT = new Atmost((Expression) e, 
		                                     (String) occ,
		                                     (String) val,
		                                      isAtmost 
		                                    );
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // global_constraint ::= ATMOST LPAREN expression COMMA IDENTIFIER COMMA IDENTIFIER RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int occleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int occright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String occ = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		                boolean isAtmost = true;
		                RESULT = new Atmost((Expression) e, 
		                                     (String) occ,
		                                     (String) val,
		                                      isAtmost 
		                                    );
		             
		             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // global_constraint ::= ELEMENT LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new ElementConstraint( (Expression) e1,
	                									(Expression) e2,
	                									(Expression) e3);   
	                 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-7)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // global_constraint ::= MAX LPAREN atom_expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
					  boolean isMaximum = true;
					  RESULT = new Minimum( (Expression) e,
					                         isMaximum ); 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // global_constraint ::= MAX LPAREN variable_array RPAREN 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
					  boolean isMaximum = true;
					  RESULT = new Minimum( (Expression) va,
					                         isMaximum ); 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // global_constraint ::= MIN LPAREN atom_expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
					  boolean isMaximum = false;
					  RESULT = new Minimum( (Expression) e,
					                         isMaximum ); 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // global_constraint ::= MIN LPAREN variable_array RPAREN 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
					  boolean isMaximum = false;
					  RESULT = new Minimum( (Expression) va,
					                         isMaximum ); 
					 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // global_constraint ::= ALLDIFF LPAREN variable_array RPAREN 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new AllDifferent( (VariableArray) va); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // global_constraint ::= ALLDIFF LPAREN atom_expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new AllDifferent( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("global_constraint",29, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binary_expression ::= expression IFF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new CommutativeBinaryRelationalExpression( (Expression) e1, 
			                                                         Expression.IFF,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binary_expression ::= expression IF expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.IF,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binary_expression ::= expression OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Disjunction( new Expression[] { (Expression) e1, (Expression) e2 }); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binary_expression ::= expression AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Conjunction( new Expression[] { (Expression) e1, (Expression) e2 }); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binary_expression ::= expression MODULO expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new NonCommutativeArithmeticBinaryExpression( (Expression) e1, 
			                                                           Expression.MOD, 
			                                                           (Expression) e2
			                                                         ); 
			                                          
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binary_expression ::= expression POWER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new NonCommutativeArithmeticBinaryExpression( (Expression) e1, 
			                                                           Expression.POWER, 
			                                                           (Expression) e2
			                                                         ); 
			                                          
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binary_expression ::= expression DIVISION expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new NonCommutativeArithmeticBinaryExpression( (Expression) e1, 
			                                                           Expression.DIV, 
			                                                           (Expression) e2
			                                                         ); 
			                                          
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binary_expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Multiplication (new Expression[] { (Expression) e1, (Expression) e2} 
			                                );
		     
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binary_expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Sum ( new Expression[] {(Expression) e1} ,
								  new Expression[] {(Expression) e2 } 
								 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binary_expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Sum ( new Expression[] { (Expression) e1, (Expression) e2 },
								  new Expression[] {} 
								 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binary_expression ::= expression GEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.GEQ,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binary_expression ::= expression GREATER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.GREATER,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binary_expression ::= expression LEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.LEQ,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binary_expression ::= expression LESS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new NonCommutativeRelationalBinaryExpression( (Expression) e1, 
			                                                         Expression.LESS,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binary_expression ::= expression NEQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new CommutativeBinaryRelationalExpression( (Expression) e1, 
			                                                         Expression.NEQ,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binary_expression ::= expression EQ expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =  new CommutativeBinaryRelationalExpression( (Expression) e1, 
			                                                         Expression.EQ,
			                                                        (Expression) e2 ); 
			
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("binary_expression",27, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary_expression ::= NOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new Negation( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unary_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unary_expression ::= BAR expression BAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = new AbsoluteValue( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unary_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unary_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new UnaryMinus((Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("unary_expression",26, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atom_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new SimpleVariable(new String(id)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atom_expression ::= deref_expression 
            {
              Object RESULT =null;
		int derefleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int derefright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object deref = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = deref; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atom_expression",23, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // index_list ::= index COMMA index_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object i_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                   ((ArrayList<Domain>) i_list).add(0, (Domain)  i); 
				     RESULT = i_list;  
				 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index_list",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // index_list ::= index 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                    ArrayList<Domain> e_list = new ArrayList<Domain>();	
				     e_list.add(0, (Domain) i); 
				     RESULT = e_list;   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index_list",25, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // index ::= LPAREN expression_list RPAREN 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
		         RESULT = new SparseExpressionRange( (ArrayList<Expression>) e_list);
               
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // index ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new SingleExpressionRange( (Expression) e); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // index ::= expression DOTDOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new BoundedExpressionRange( (Expression) e1, (Expression) e2); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // index ::= expression DOTDOT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  
                   boolean isLowerBound = true;
                   RESULT = new InfiniteDomain( (Expression) e, isLowerBound);
                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // index ::= DOTDOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
                  boolean isLowerBound = false;
                  RESULT = new InfiniteDomain( (Expression) e, isLowerBound);
                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // index ::= DOTDOT 
            {
              Object RESULT =null;
		 RESULT = new InfiniteDomain(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // deref_expression ::= IDENTIFIER LBRACK index_list RBRACK LBRACK index_list RBRACK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)).value;
		int e_list1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int e_list1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		Object e_list1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int e_list2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_list2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  
               	        	 String errMessage = "Detected parse error around expression expression '"+id+
				   			"["+(print_array_list((ArrayList<Domain>)e_list1))+"]["
				   			       +(print_array_list((ArrayList<Domain>) e_list2))+"]'\nShould be written '"
				   			+id+"["+(print_array_list((ArrayList<Domain>)e_list1))+","+(print_array_list((ArrayList<Domain>) e_list2))+"]'.";
				   			
				   			
				  			errorMessage.append(errMessage);
				  			parser.errorMessage.append("\n"+errMessage);
				   			parser.hadErrorRecovery = true;
				   			//report_error(errMessage,e_list1);
				   			
				   			ArrayList<Domain> e_list = (ArrayList<Domain>) e_list1;
				   			ArrayList<Domain> e_list_rest = (ArrayList<Domain>) e_list2;
				   			
				   			for(int i=0; i<e_list_rest.size(); i++) {
				   				e_list.add(e_list_rest.remove(0));
				   			}
				   			
							RESULT = new SimpleArrayVariable(new String(id), 
							                                 (ArrayList<Domain>) e_list); 
							                                   
								                           
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("deref_expression",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-6)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // deref_expression ::= IDENTIFIER LBRACK index_list RBRACK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		  
							RESULT = new SimpleArrayVariable(new String(id), 
							                                 (ArrayList<Domain>) e_list); 
							                                   
								                           
					    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("deref_expression",22, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atomic_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = new SimpleVariable(new String(id)); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atomic_expression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new RelationalAtomExpression(false); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atomic_expression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new RelationalAtomExpression(true); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atomic_expression ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				  RESULT = new ArithmeticAtomExpression(i); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("atomic_expression",21, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= lex_expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = le;  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= quantified_expression 
            {
              Object RESULT =null;
		int qeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int qeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object qe = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = qe; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= global_constraint 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = g; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= binary_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = be; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= unary_expression 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = ue; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= deref_expression 
            {
              Object RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = de; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= atomic_expression 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = ae; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = e; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression_list ::= expression error expression_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		
			       //((ArrayList<Expression>) e_list).add(0,(Expression) e); 
				   //RESULT = e_list;
				   String errMessage = "Detected parse error around the expression '"+e+
				   	"'\nMaybe missing comma after constraint?";
				   errorMessage.append(errMessage);
				   parser.errorMessage.append("\n"+errMessage);
				   parser.hadErrorRecovery = true;
				   //parser.setErrorRecovery(true);
				   //System.err.println(errMessage);
				   //parser.report_error(errMessage, e);
				   ((ArrayList<Expression>) e_list).add(0,(Expression) e); 
				   RESULT = e_list;
				   //throw new Exception("Parse error: "+errMessage);
			    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression_list ::= expression COMMA expression_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ((ArrayList<Expression>) e_list).add(0,(Expression) e); 
				   RESULT = e_list;
				
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ArrayList<Expression> e_list = new ArrayList<Expression>();	
				   e_list.add(0,(Expression) e); 
				   RESULT = e_list; 
				
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // domain_list ::= domain_list COMMA domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		       ((ArrayList<Domain>) d_list).add( (Domain)  d); 
		       RESULT = d_list; 
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // domain_list ::= domain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		       ArrayList<Domain> list = new ArrayList<Domain>();
		      list.add((Domain)  d); 
		      RESULT = list; 
		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain_list",17, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // domain ::= MATRIX_INDEXED_BY LBRACK domain_list RBRACK OF domain 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
				RESULT = new ArrayDomain( (Domain) d,
				                          (ArrayList<Domain>) d_list) ;

              
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // domain ::= INT LPAREN expression_list RPAREN 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
            	RESULT = new SparseExpressionRange((ArrayList<Expression>) e_list);
            
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // domain ::= INT LPAREN expression DOTDOT expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
                RESULT = new BoundedExpressionRange( (Expression) e1,
                                                     (Expression) e2);
             
             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // domain ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 if(id.equals("bool") || id.equals("BOOL")) 
			     RESULT = new BoolDomain();
			     
	           else 
			     RESULT = new IdentifierDomain(new String(id) ); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // domain ::= LPAREN domain RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 RESULT = (Domain) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				       ((ArrayList<String>) id_list).add(0,new String(id)); 
				       RESULT = id_list; 
				   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 	
			           ArrayList<String> list = new ArrayList<String>();
				       list.add(0,new String(id));
				       RESULT = list; 
				   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifier_list",15, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // infinite_domain ::= INT 
            {
              Object RESULT =null;
		 RESULT = new InfiniteDomain(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // infinite_domain ::= INT LPAREN DOTDOT RPAREN 
            {
              Object RESULT =null;
		 RESULT = new InfiniteDomain(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // infinite_domain ::= INT LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = new InfiniteDomain();
                     
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // infinite_domain ::= INT LPAREN DOTDOT expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		 
                       boolean isLowerBound = false;
                        RESULT = new InfiniteDomain((Expression) e, isLowerBound); 
                   
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // infinite_domain ::= INT LPAREN expression DOTDOT RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		 
                        boolean isLowerBound = true;
                        RESULT = new InfiniteDomain((Expression) e, isLowerBound); 
                      
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_domain",18, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // identifiers_with_infinite_domain ::= identifier_list COLON infinite_domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			   boolean isParameter = true; /* only parameters are allowed to have infinte domains*/
			   RESULT = new VariableDeclaration((ArrayList<String>) id_list,
										         (Domain) d,
										          isParameter);
             
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifiers_with_infinite_domain",14, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identifiers_with_domain ::= identifier_list COLON domain 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object id_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
				RESULT = new VariableDeclaration((ArrayList<String>) id_list,
										         (Domain) d);
			 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("identifiers_with_domain",13, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // infinite_variable_declaration_list ::= identifiers_with_infinite_domain COMMA variable_declaration_list 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int di_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int di_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		         ((ArrayList<VariableDeclaration>) di_list).add(0,(VariableDeclaration) di);  
			     RESULT = di_list; 
			 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_variable_declaration_list",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // infinite_variable_declaration_list ::= identifiers_with_infinite_domain 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			    ArrayList<VariableDeclaration> list = new ArrayList<VariableDeclaration>();
			    list.add( (VariableDeclaration) id);
			     RESULT = list;  
			  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("infinite_variable_declaration_list",12, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_declaration_list ::= identifiers_with_domain COMMA variable_declaration_list 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int di_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int di_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object di_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		         ((ArrayList<VariableDeclaration>) di_list).add(0,(VariableDeclaration) di);  
			     RESULT = di_list; 
			 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable_declaration_list ::= identifiers_with_domain 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			    ArrayList<VariableDeclaration> list = new ArrayList<VariableDeclaration>();
			    list.add( (VariableDeclaration) id);
			     RESULT = list;  
			  
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",11, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constraint_block ::= 
            {
              Object RESULT =null;
		
		            RESULT = new ArrayList<Expression>(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // constraint_block ::= SUCH_THAT expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = e_list; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("constraint_block",6, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // objective ::= 
            {
              Object RESULT =null;
		    
			         RESULT = new Objective(); 
			       
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // objective ::= MINIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
 	                 boolean isMaximising = false;
			         RESULT = new Objective((Expression) e, isMaximising); 
			       
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // objective ::= MAXIMISING expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
			         boolean isMaximising = true;
			         RESULT = new Objective((Expression) e, isMaximising); 
			       
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("objective",5, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // find_block ::= FIND variable_declaration_list 
            {
              Object RESULT =null;
		int v_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int v_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object v_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
	          RESULT = v_list;
	       
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("find_block",10, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // letting_block ::= LETTING IDENTIFIER COLON domain BE constant_matrix 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int constant_matrixleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int constant_matrixright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object constant_matrix = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		  RESULT = new ExpressionDefinition( (String) id,
		                                      new ConstantMatrix( (String) id,
		                                                          (Integer[][]) constant_matrix,
		                                                           (Domain) d
		                                                         )
		                                   );
		                                                          
		
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // letting_block ::= LETTING IDENTIFIER BE constant_matrix 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int constant_matrixleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int constant_matrixright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object constant_matrix = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		  RESULT = new ExpressionDefinition( (String) id,
		                                      new ConstantMatrix( (String) id,
		                                                          (Integer[][]) constant_matrix
		                                                         )
		                                   );
		                                                          
		
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // letting_block ::= LETTING IDENTIFIER COLON domain BE constant_vector 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
	      ArrayList<Integer> i_list = (ArrayList<Integer>) cv;
	      Integer[] i_array = new Integer[i_list.size()];
	      for(int i=i_array.length-1; i>=0; i--)
	      	i_array[i] = i_list.remove(i);
	      
	      RESULT = new ExpressionDefinition( (String) id,
	                                          new ConstantVector( (String) id,
	                                                              i_array,
	                                                              (Domain) d)
	                                       );
	    
	    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // letting_block ::= LETTING IDENTIFIER BE constant_vector 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
	      ArrayList<Integer> i_list = (ArrayList<Integer>) cv;
	      Integer[] i_array = new Integer[i_list.size()];
	      for(int i=i_array.length-1; i>=0; i--)
	      	i_array[i] = i_list.remove(i);
	      
	      RESULT = new ExpressionDefinition( (String) id,
	                                          new ConstantVector( (String) id,
	                                                              i_array)
	                                       );
	    
	    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // letting_block ::= LETTING IDENTIFIER BE_DOMAIN domain 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		  RESULT = new DomainDefinition( (String) id,
					         (Domain) d);
		
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // letting_block ::= LETTING IDENTIFIER COLON domain BE expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		   RESULT = new ExpressionDefinition((String) id,
						      (Expression) e,
						      (Domain) d);
		
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // letting_block ::= LETTING IDENTIFIER BE expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		   RESULT = new ExpressionDefinition((String) id,
                                                      (Expression) e);

                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("letting_block",9, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // where_block ::= WHERE expression_list 
            {
              Object RESULT =null;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object e_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		
			              RESULT = new ConstantRestriction((ArrayList<Expression>) e_list);  
		                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("where_block",8, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // given_block ::= GIVEN infinite_variable_declaration_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
		   		ArrayList<VariableDeclaration> parameters =(ArrayList<VariableDeclaration>) list;		   
		   		ArrayList<GeneralDeclaration> declarations = new ArrayList<GeneralDeclaration>();
		   		   
                for(int i=0; i<parameters.size(); i++) {
		      	    declarations.add(new ParameterDeclaration(parameters.get(i).getNames(),
		      	    										  parameters.get(i).getDomain()
		      	    										  )
		      	    				);
                }		       		   

		        RESULT = declarations; 

		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("given_block",7, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // given_block ::= GIVEN variable_declaration_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		  
		   		ArrayList<VariableDeclaration> parameters =(ArrayList<VariableDeclaration>) list;		   
		   		ArrayList<GeneralDeclaration> declarations = new ArrayList<GeneralDeclaration>();
		   		   
                for(int i=0; i<parameters.size(); i++) {
		      	    declarations.add(new ParameterDeclaration(parameters.get(i).getNames(),
		      	    										  parameters.get(i).getDomain()
		      	    										  )
		      	    	             );
                }		       		   

		        RESULT = declarations; 

		    
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("given_block",7, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= find_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT =(ArrayList<GeneralDeclaration>)  d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= letting_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 ArrayList<GeneralDeclaration> list = new ArrayList<GeneralDeclaration>();
		      list.add((GeneralDeclaration)  d);
		      RESULT = list;
		     
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= where_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		
		      ArrayList<GeneralDeclaration> list = new ArrayList<GeneralDeclaration>();
		      list.add((ConstantRestriction)  d);
		      RESULT = list; 
		     
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= given_block 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (ArrayList<GeneralDeclaration>) d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_list ::= declaration declaration_list 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
					ArrayList<GeneralDeclaration> list1 = (ArrayList<GeneralDeclaration>) d1; 
					ArrayList<GeneralDeclaration> list2 = (ArrayList<GeneralDeclaration>) d2; 
					
					if(list1.size() > list2.size()) {
					   
					   for(int i=list2.size()-1; i>=0; i--) {
					   	   list1.add(0,list2.get(i));
					   }
					   RESULT = list1;	
					}
					
					else {
					
					   for(int i=list1.size()-1; i>=0; i--) {
					   	   list2.add(0,list1.get(i));
					   }
					   RESULT = list2;	
				    }
                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Object RESULT =null;
			  RESULT = new ArrayList<GeneralDeclaration>(); 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = d; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declarations objective constraint_block 
            {
              Object RESULT =null;
		int d_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).left;
		int d_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).right;
		Object d_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		int expr_listleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int expr_listright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object expr_list = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 
		       RESULT = new EssencePrimeModel(
						   (ArrayList<GeneralDeclaration>) d_list,
						   (Objective)  obj,
						   (ArrayList<Expression>)expr_list 
                                               ); 
                
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= essencemodel EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)).value;
		RESULT = start_val;
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EssencePrimeParser$parser.done_parsing();
          return CUP$EssencePrimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // essencemodel ::= HEADER body 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$EssencePrimeParser$stack.peek()).value;
		 RESULT = (EssencePrimeModel) b; 
              CUP$EssencePrimeParser$result = parser.getSymbolFactory().newSymbol("essencemodel",0, ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.elementAt(CUP$EssencePrimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$EssencePrimeParser$stack.peek()), RESULT);
            }
          return CUP$EssencePrimeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

