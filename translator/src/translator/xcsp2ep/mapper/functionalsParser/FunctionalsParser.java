
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 22 15:42:04 BST 2008
//----------------------------------------------------

package translator.xcsp2ep.mapper.functionalsParser;

import translator.expression.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 22 15:42:04 BST 2008
  */
public class FunctionalsParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FunctionalsParser() {super();}

  /** Constructor which sets the default scanner. */
  public FunctionalsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FunctionalsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\006\000\002\003\010" +
    "\000\002\003\010\000\002\003\010\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\010\000\002\003\010\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\006\000\002\004\006\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\034\006\005\010\012\011\015\012\007\013" +
    "\016\015\013\016\014\017\021\024\020\026\017\027\022" +
    "\032\010\034\006\001\002\000\004\002\001\001\002\000" +
    "\004\035\211\001\002\000\004\035\204\001\002\000\004" +
    "\035\177\001\002\000\010\002\ufffe\036\ufffe\037\ufffe\001" +
    "\002\000\004\002\176\001\002\000\004\035\171\001\002" +
    "\000\004\035\164\001\002\000\004\035\157\001\002\000" +
    "\010\002\uffff\036\uffff\037\uffff\001\002\000\004\035\152" +
    "\001\002\000\004\035\147\001\002\000\004\035\142\001" +
    "\002\000\004\035\030\001\002\000\004\035\023\001\002" +
    "\000\034\006\005\010\012\011\015\012\007\013\016\015" +
    "\013\016\014\017\021\024\020\026\017\027\022\032\010" +
    "\034\006\001\002\000\004\037\025\001\002\000\034\006" +
    "\005\010\012\011\015\012\007\013\016\015\013\016\014" +
    "\017\021\024\020\026\017\027\022\032\010\034\006\001" +
    "\002\000\004\036\027\001\002\000\010\002\ufffb\036\ufffb" +
    "\037\ufffb\001\002\000\036\004\041\005\037\007\043\014" +
    "\040\020\035\021\047\022\036\023\045\025\046\030\032" +
    "\031\042\033\034\040\044\041\033\001\002\000\004\037" +
    "\137\001\002\000\004\035\132\001\002\000\006\036\ufff2" +
    "\037\ufff2\001\002\000\006\040\131\041\130\001\002\000" +
    "\004\035\123\001\002\000\004\035\116\001\002\000\004" +
    "\035\111\001\002\000\004\035\102\001\002\000\004\035" +
    "\077\001\002\000\004\035\072\001\002\000\004\035\065" +
    "\001\002\000\006\036\ufff0\037\ufff0\001\002\000\004\035" +
    "\060\001\002\000\004\035\055\001\002\000\004\035\050" +
    "\001\002\000\036\004\041\005\037\007\043\014\040\020" +
    "\035\021\047\022\036\023\045\025\046\030\032\031\042" +
    "\033\034\040\044\041\033\001\002\000\004\037\052\001" +
    "\002\000\036\004\041\005\037\007\043\014\040\020\035" +
    "\021\047\022\036\023\045\025\046\030\032\031\042\033" +
    "\034\040\044\041\033\001\002\000\004\036\054\001\002" +
    "\000\006\036\uffe6\037\uffe6\001\002\000\036\004\041\005" +
    "\037\007\043\014\040\020\035\021\047\022\036\023\045" +
    "\025\046\030\032\031\042\033\034\040\044\041\033\001" +
    "\002\000\004\036\057\001\002\000\006\036\uffee\037\uffee" +
    "\001\002\000\036\004\041\005\037\007\043\014\040\020" +
    "\035\021\047\022\036\023\045\025\046\030\032\031\042" +
    "\033\034\040\044\041\033\001\002\000\004\037\062\001" +
    "\002\000\036\004\041\005\037\007\043\014\040\020\035" +
    "\021\047\022\036\023\045\025\046\030\032\031\042\033" +
    "\034\040\044\041\033\001\002\000\004\036\064\001\002" +
    "\000\006\036\uffea\037\uffea\001\002\000\036\004\041\005" +
    "\037\007\043\014\040\020\035\021\047\022\036\023\045" +
    "\025\046\030\032\031\042\033\034\040\044\041\033\001" +
    "\002\000\004\037\067\001\002\000\036\004\041\005\037" +
    "\007\043\014\040\020\035\021\047\022\036\023\045\025" +
    "\046\030\032\031\042\033\034\040\044\041\033\001\002" +
    "\000\004\036\071\001\002\000\006\036\uffe9\037\uffe9\001" +
    "\002\000\036\004\041\005\037\007\043\014\040\020\035" +
    "\021\047\022\036\023\045\025\046\030\032\031\042\033" +
    "\034\040\044\041\033\001\002\000\004\037\074\001\002" +
    "\000\036\004\041\005\037\007\043\014\040\020\035\021" +
    "\047\022\036\023\045\025\046\030\032\031\042\033\034" +
    "\040\044\041\033\001\002\000\004\036\076\001\002\000" +
    "\006\036\uffeb\037\uffeb\001\002\000\036\004\041\005\037" +
    "\007\043\014\040\020\035\021\047\022\036\023\045\025" +
    "\046\030\032\031\042\033\034\040\044\041\033\001\002" +
    "\000\004\036\101\001\002\000\006\036\uffed\037\uffed\001" +
    "\002\000\034\006\005\010\012\011\015\012\007\013\016" +
    "\015\013\016\014\017\021\024\020\026\017\027\022\032" +
    "\010\034\006\001\002\000\004\037\104\001\002\000\036" +
    "\004\041\005\037\007\043\014\040\020\035\021\047\022" +
    "\036\023\045\025\046\030\032\031\042\033\034\040\044" +
    "\041\033\001\002\000\004\037\106\001\002\000\036\004" +
    "\041\005\037\007\043\014\040\020\035\021\047\022\036" +
    "\023\045\025\046\030\032\031\042\033\034\040\044\041" +
    "\033\001\002\000\004\036\110\001\002\000\006\036\uffe4" +
    "\037\uffe4\001\002\000\036\004\041\005\037\007\043\014" +
    "\040\020\035\021\047\022\036\023\045\025\046\030\032" +
    "\031\042\033\034\040\044\041\033\001\002\000\004\037" +
    "\113\001\002\000\036\004\041\005\037\007\043\014\040" +
    "\020\035\021\047\022\036\023\045\025\046\030\032\031" +
    "\042\033\034\040\044\041\033\001\002\000\004\036\115" +
    "\001\002\000\006\036\uffec\037\uffec\001\002\000\036\004" +
    "\041\005\037\007\043\014\040\020\035\021\047\022\036" +
    "\023\045\025\046\030\032\031\042\033\034\040\044\041" +
    "\033\001\002\000\004\037\120\001\002\000\036\004\041" +
    "\005\037\007\043\014\040\020\035\021\047\022\036\023" +
    "\045\025\046\030\032\031\042\033\034\040\044\041\033" +
    "\001\002\000\004\036\122\001\002\000\006\036\uffe8\037" +
    "\uffe8\001\002\000\036\004\041\005\037\007\043\014\040" +
    "\020\035\021\047\022\036\023\045\025\046\030\032\031" +
    "\042\033\034\040\044\041\033\001\002\000\004\037\125" +
    "\001\002\000\036\004\041\005\037\007\043\014\040\020" +
    "\035\021\047\022\036\023\045\025\046\030\032\031\042" +
    "\033\034\040\044\041\033\001\002\000\004\036\127\001" +
    "\002\000\006\036\uffe5\037\uffe5\001\002\000\006\036\ufff1" +
    "\037\ufff1\001\002\000\006\036\uffef\037\uffef\001\002\000" +
    "\036\004\041\005\037\007\043\014\040\020\035\021\047" +
    "\022\036\023\045\025\046\030\032\031\042\033\034\040" +
    "\044\041\033\001\002\000\004\037\134\001\002\000\036" +
    "\004\041\005\037\007\043\014\040\020\035\021\047\022" +
    "\036\023\045\025\046\030\032\031\042\033\034\040\044" +
    "\041\033\001\002\000\004\036\136\001\002\000\006\036" +
    "\uffe7\037\uffe7\001\002\000\036\004\041\005\037\007\043" +
    "\014\040\020\035\021\047\022\036\023\045\025\046\030" +
    "\032\031\042\033\034\040\044\041\033\001\002\000\004" +
    "\036\141\001\002\000\010\002\ufff3\036\ufff3\037\ufff3\001" +
    "\002\000\036\004\041\005\037\007\043\014\040\020\035" +
    "\021\047\022\036\023\045\025\046\030\032\031\042\033" +
    "\034\040\044\041\033\001\002\000\004\037\144\001\002" +
    "\000\036\004\041\005\037\007\043\014\040\020\035\021" +
    "\047\022\036\023\045\025\046\030\032\031\042\033\034" +
    "\040\044\041\033\001\002\000\004\036\146\001\002\000" +
    "\010\002\ufff7\036\ufff7\037\ufff7\001\002\000\034\006\005" +
    "\010\012\011\015\012\007\013\016\015\013\016\014\017" +
    "\021\024\020\026\017\027\022\032\010\034\006\001\002" +
    "\000\004\036\151\001\002\000\010\002\ufffd\036\ufffd\037" +
    "\ufffd\001\002\000\036\004\041\005\037\007\043\014\040" +
    "\020\035\021\047\022\036\023\045\025\046\030\032\031" +
    "\042\033\034\040\044\041\033\001\002\000\004\037\154" +
    "\001\002\000\036\004\041\005\037\007\043\014\040\020" +
    "\035\021\047\022\036\023\045\025\046\030\032\031\042" +
    "\033\034\040\044\041\033\001\002\000\004\036\156\001" +
    "\002\000\010\002\ufff5\036\ufff5\037\ufff5\001\002\000\036" +
    "\004\041\005\037\007\043\014\040\020\035\021\047\022" +
    "\036\023\045\025\046\030\032\031\042\033\034\040\044" +
    "\041\033\001\002\000\004\037\161\001\002\000\036\004" +
    "\041\005\037\007\043\014\040\020\035\021\047\022\036" +
    "\023\045\025\046\030\032\031\042\033\034\040\044\041" +
    "\033\001\002\000\004\036\163\001\002\000\010\002\ufff4" +
    "\036\ufff4\037\ufff4\001\002\000\034\006\005\010\012\011" +
    "\015\012\007\013\016\015\013\016\014\017\021\024\020" +
    "\026\017\027\022\032\010\034\006\001\002\000\004\037" +
    "\166\001\002\000\034\006\005\010\012\011\015\012\007" +
    "\013\016\015\013\016\014\017\021\024\020\026\017\027" +
    "\022\032\010\034\006\001\002\000\004\036\170\001\002" +
    "\000\010\002\ufff9\036\ufff9\037\ufff9\001\002\000\036\004" +
    "\041\005\037\007\043\014\040\020\035\021\047\022\036" +
    "\023\045\025\046\030\032\031\042\033\034\040\044\041" +
    "\033\001\002\000\004\037\173\001\002\000\036\004\041" +
    "\005\037\007\043\014\040\020\035\021\047\022\036\023" +
    "\045\025\046\030\032\031\042\033\034\040\044\041\033" +
    "\001\002\000\004\036\175\001\002\000\010\002\ufff8\036" +
    "\ufff8\037\ufff8\001\002\000\004\002\000\001\002\000\036" +
    "\004\041\005\037\007\043\014\040\020\035\021\047\022" +
    "\036\023\045\025\046\030\032\031\042\033\034\040\044" +
    "\041\033\001\002\000\004\037\201\001\002\000\036\004" +
    "\041\005\037\007\043\014\040\020\035\021\047\022\036" +
    "\023\045\025\046\030\032\031\042\033\034\040\044\041" +
    "\033\001\002\000\004\036\203\001\002\000\010\002\ufff6" +
    "\036\ufff6\037\ufff6\001\002\000\034\006\005\010\012\011" +
    "\015\012\007\013\016\015\013\016\014\017\021\024\020" +
    "\026\017\027\022\032\010\034\006\001\002\000\004\037" +
    "\206\001\002\000\034\006\005\010\012\011\015\012\007" +
    "\013\016\015\013\016\014\017\021\024\020\026\017\027" +
    "\022\032\010\034\006\001\002\000\004\036\210\001\002" +
    "\000\010\002\ufffa\036\ufffa\037\ufffa\001\002\000\034\006" +
    "\005\010\012\011\015\012\007\013\016\015\013\016\014" +
    "\017\021\024\020\026\017\027\022\032\010\034\006\001" +
    "\002\000\004\037\213\001\002\000\034\006\005\010\012" +
    "\011\015\012\007\013\016\015\013\016\014\017\021\024" +
    "\020\026\017\027\022\032\010\034\006\001\002\000\004" +
    "\036\215\001\002\000\010\002\ufffc\036\ufffc\037\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\006\002\010\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\023\001\001\000\002" +
    "\001\001\000\004\003\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\050\001\001\000\002\001" +
    "\001\000\004\004\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\060\001\001\000\002\001\001" +
    "\000\004\004\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\065\001\001\000\002\001\001\000\004" +
    "\004\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\072\001\001\000\002\001\001\000\004\004\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\102\001\001\000\002\001\001\000\004\004\104\001" +
    "\001\000\002\001\001\000\004\004\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\111\001\001\000" +
    "\002\001\001\000\004\004\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\116\001\001\000\002\001" +
    "\001\000\004\004\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\123\001\001\000\002\001\001\000" +
    "\004\004\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\132\001" +
    "\001\000\002\001\001\000\004\004\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\142\001\001" +
    "\000\002\001\001\000\004\004\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\152\001\001\000" +
    "\002\001\001\000\004\004\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\157\001\001\000\002\001" +
    "\001\000\004\004\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\164\001\001\000\002\001\001\000" +
    "\004\003\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\171\001\001\000\002\001\001\000\004\004" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\177\001\001\000\002\001\001\000" +
    "\004\004\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\204\001\001\000\002\001\001\000\004\003" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\211\001\001\000\002\001\001\000\004\003\213\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FunctionalsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FunctionalsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FunctionalsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




     public StringBuffer errorMessage = new StringBuffer("");

    /* The reason for the error is passed into the method in the
       String 'message'. */

    public void report_error(String message, Object info)  {

        StringBuffer m = new StringBuffer("Parse error:");


        if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                                m.append(" in line "+(s.left));
                if (s.right >= 0)
                        m.append(", column "+(s.right));
            }
        }
        m.append(" : "+message);
        //throw new Exception(m);
        errorMessage = m;
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)  {
        report_error(message, info);
        //System.exit(1);
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FunctionalsParser$actions {



        public int errors_found = 0;
       


  private final FunctionalsParser parser;

  /** Constructor */
  CUP$FunctionalsParser$actions(FunctionalsParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FunctionalsParser$do_action(
    int                        CUP$FunctionalsParser$act_num,
    java_cup.runtime.lr_parser CUP$FunctionalsParser$parser,
    java.util.Stack            CUP$FunctionalsParser$stack,
    int                        CUP$FunctionalsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FunctionalsParser$result;

      /* select the action based on the action number */
      switch (CUP$FunctionalsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // integerExpression ::= IF LPAREN booleanExpression COMMA integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 
                            RelationalExpression first = new NonCommutativeRelationalBinaryExpression
                                             ( (Expression) e1,
                                                Expression.IF,
                        	                   (Expression) e2
                        	                  );  
                        
                        	RelationalExpression second = new NonCommutativeRelationalBinaryExpression
                                             ( new Negation((Expression) e1),
                                                Expression.IF,
                        	                   (Expression) e3
                        	                  );
                        
                        
                           RESULT = new Conjunction
                                             ( new Expression[] {first, second} ); 
                        	                  
                        	                  
                           //RESULT = new ArithmeticAtomExpression(0);	                  
                        	                  
                        	                  
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-7)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // integerExpression ::= MAX LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 
          				   boolean isMaximum = true;
          				   AtomExpression leftArgument = null; 
          				   AtomExpression rightArgument = null;
          				   
          				   try {
          				    
          				     if(e1 instanceof AtomExpression)
          				    	leftArgument = (AtomExpression) e1;
          				     else throw new Exception("Cannot translate Maximum Constraint with non-atomic argument:"+e1);
          				   
          				     if(e2 instanceof AtomExpression)
          				   	    rightArgument = (AtomExpression) e2;
          				     else throw new Exception("Cannot translate Maximum Constraint with non-atomic argument:"+e2);
          				   
          				   } catch(Exception e) {
          				   	  e.printStackTrace(System.out);
          				   	  System.exit(1);
          				   }
          				   
          				   	
          				   RESULT = new Minimum
                                             ( new VariableArray( new AtomExpression[]  { leftArgument,
                        	                                                              rightArgument } ),
                        			           isMaximum                   
                        	                  ); 
                          
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // integerExpression ::= MIN LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 
	                       boolean isMaximum = false;
          				   AtomExpression leftArgument = null;
          				   AtomExpression rightArgument = null;
          				   
          				   try {
          				   
          				   if(e1 instanceof AtomExpression)
          				    	leftArgument = (AtomExpression) e1;
          				   else throw new Exception("Cannot translate Minimum Constraint with non-atomic argument:"+e1);
          				   
          				   if(e2 instanceof AtomExpression)
          				   	    rightArgument = (AtomExpression) e2;
          				   else throw new Exception("Cannot translate Minimum Constraint with non-atomic argument:"+e2);
          				   
          				   } catch(Exception e) {
          				   	  e.printStackTrace(System.out);
          				   	  System.exit(1);
          				   }
          				   
          				   	
          				   RESULT = new Minimum
                                             ( new VariableArray( new AtomExpression[]  { leftArgument,
                        	                                                              rightArgument } ),
                        			           isMaximum                   
                        	                  ); 
                          
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // integerExpression ::= POW LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new NonCommutativeArithmeticBinaryExpression
                                             ( (Expression) e1,
                                                Expression.POWER,
                        	                   (Expression) e2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // integerExpression ::= MOD LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new NonCommutativeArithmeticBinaryExpression
                                             ( (Expression) e1,
                                                Expression.MOD,
                        	                   (Expression) e2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // integerExpression ::= DIV LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new NonCommutativeArithmeticBinaryExpression
                                             ( (Expression) e1,
                                                Expression.DIV,
                        	                   (Expression) e2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // integerExpression ::= MUL LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new Multiplication( new Expression[] { (Expression) e1,
          				                                                     (Expression) e2 }
          				                                  );   
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // integerExpression ::= SUB LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new Sum( new Expression[] { (Expression) e1 },
          				                       new Expression[] { (Expression) e2 }
          				                     );   
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // integerExpression ::= ADD LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new Sum( new Expression[] { (Expression) e1,
          				                                          (Expression) e2 
          				                                         },
          				                       new Expression[] {}
          				                     );   
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // integerExpression ::= ABS LPAREN integerExpression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new AbsoluteValue( (Expression) e); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // integerExpression ::= NEG LPAREN integerExpression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		  RESULT = new Negation( (Expression) e); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // integerExpression ::= UMINUS IDENTIFIER 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.peek()).value;
		  RESULT = new UnaryMinus(new ArithmeticAtomExpression(new SimpleVariable(varName))); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // integerExpression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.peek()).value;
		  RESULT = new ArithmeticAtomExpression(new SimpleVariable(varName)); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // integerExpression ::= UMINUS INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.peek()).value;
		 RESULT = new ArithmeticAtomExpression(-i); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // integerExpression ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.peek()).value;
		 RESULT = new ArithmeticAtomExpression(i); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("integerExpression",2, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // booleanExpression ::= LT LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new NonCommutativeRelationalBinaryExpression
                                             ( (Expression) b1,
                                                Expression.LESS,
                        	                   (Expression) b2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // booleanExpression ::= LE LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new NonCommutativeRelationalBinaryExpression
                                             ( (Expression) b1,
                                                Expression.LEQ,
                        	                   (Expression) b2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // booleanExpression ::= GT LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new NonCommutativeRelationalBinaryExpression
                                             ( (Expression) b1,
                                                Expression.GREATER,
                        	                   (Expression) b2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // booleanExpression ::= GE LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new NonCommutativeRelationalBinaryExpression
                                             ( (Expression) b1,
                                                Expression.GEQ,
                        	                   (Expression) b2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // booleanExpression ::= NE LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new CommutativeBinaryRelationalExpression
                                             ( (Expression) b1,
                                                Expression.NEQ,
                        	                   (Expression) b2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // booleanExpression ::= EQ LPAREN integerExpression COMMA integerExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new CommutativeBinaryRelationalExpression
                                             ( (Expression) b1,
                                                Expression.EQ,
                        	                   (Expression) b2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // booleanExpression ::= IFF LPAREN booleanExpression COMMA booleanExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new CommutativeBinaryRelationalExpression
                                             ( (RelationalExpression) b1,
                                                Expression.EQ,
                        	                   (RelationalExpression) b2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // booleanExpression ::= XOR LPAREN booleanExpression COMMA booleanExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new CommutativeBinaryRelationalExpression
                                             ( (Expression) b1,
                                                Expression.NEQ,
                        	                   (Expression) b2
                        	                  ); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // booleanExpression ::= OR LPAREN booleanExpression COMMA booleanExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new Disjunction(new RelationalExpression[] 
                        	                                     { (RelationalExpression) b1,
                        	                                       (RelationalExpression) b2}); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // booleanExpression ::= AND LPAREN booleanExpression COMMA booleanExpression RPAREN 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new Conjunction(new Expression[] 
                        	                                     { (Expression) b1,
                        	                                       (Expression) b2}); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-5)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // booleanExpression ::= NOT LPAREN booleanExpression RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		 RESULT = new Negation((RelationalExpression) b);  
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-3)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // booleanExpression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new RelationalAtomExpression(true); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // booleanExpression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new RelationalAtomExpression(false); 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("booleanExpression",1, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= functional EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)).value;
		RESULT = start_val;
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.elementAt(CUP$FunctionalsParser$top-1)), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FunctionalsParser$parser.done_parsing();
          return CUP$FunctionalsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // functional ::= booleanExpression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunctionalsParser$stack.peek()).value;
		 RESULT = (RelationalExpression) e; 
              CUP$FunctionalsParser$result = parser.getSymbolFactory().newSymbol("functional",0, ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FunctionalsParser$stack.peek()), RESULT);
            }
          return CUP$FunctionalsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

