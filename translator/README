=================================================================================================
 TAILOR  v2.0
 support: andrea@cs.st-andrews.ac.uk (Andrea Rendl)
=================================================================================================

TAILOR converts models formulated in Essence'[1] or XCSP format[2]
to Minion input format. Furthermore, the graphical user interface allows
to directly solve a generated Minion instance.

The parser for the Essence' language and for XCSP functionals has 
been constructed using the LALR parser generator Java Cup[3] in 
combination with the Scanner generator jflex[4], both released 
under GPL[5]. The Parser for XCSP format is released under the X11 
license.

There is further documentation of TAILOR in doc/index.html.

----------------------------------

Content:

1. Running TAILOR
2. Compiling TAILOR
3. Documentation
4. Emacs Mode for Essence' Syntax Highlighting
5. Essence' examples
6. Limitations



----------------------------------
1. Running TAILOR
----------------------------------

The translator is packed in an executable .jar file, translator.jar, so you will need
Java Sun's JDK[6]. To execute translator.jar change to the translator's
root directory and type

java -jar tailor.jar

which will start the graphical version of the translator. Please note, that the graphical
version can only translate Essence' at the moment. For the command line version type 

java -jar tailor.jar -help

for further details.


----------------------------------
2. Compiling TAILOR
------------------------------------
Compiling TAILOR is not necessary since it comes with a .jar file.
However, you are welcome to modify the code.
TAILOR is written in Java, so you will need a current version
of Java (>=1.5) for compilation.
Run the script compile.sh on the root directory. Use build.sh if you
additionally want to rebuild the Essence'-parser and the FunctionalsParser
for the XCSP format (for which you will need jflex[4] and Java-Cup[3] installed).


----------------------------------
3. Documentation
----------------------------------
Documentation can be found at doc/index.html. It contains links to several 
Essence' examples, the Essence' grammar specification, the Minion manual 
and the translator API.


----------------------------------
4. Emacs-Mode for Essence' 
----------------------------------
Peter Gregory was so generous to provide an Emacs-mode for Essence'
that allows syntax highlighting of .eprime files. Emacs is 
a popular, powerful, free class of editors. The directory 
emacs-mode/ contains the Emacs-mode together with instructions on
how to set it up.


----------------------------------
5. Essence' examples
----------------------------------
4.1 Problem Samples
Several problem samples can be found in the /problems directory. All problem
samples are documented.

4.2 Test Instances
A large amount of test instances can be found in the /test directory. It also
contains a directory of generated Minion files. 


----------------------------------
6. Limitations and Known Bugs
----------------------------------
The translator is still under development, so there are some limitations. 
The following is not supported yet:
- decision variable arrays with 4 or more dimensions
- parameter arrays with 4 or more dimensions
- absolute value
- power with decision variable as exponent
- element constraint on 2-dimensional arrays


Please report bugs to andrea@cs.st-andrews.ac.uk


----------------------------------
[1] http://www.cs.st-and.ac.uk/~andrea/tailor/
[2] http://www.cril.univ-artois.fr/~lecoutre/research/benchmarks/benchmarks.html
[3] Java-Cup (LALR Parser Generator) http://www2.cs.tum.edu/projects/cup/
[4] jflex (Scanner Generator for Java) : http://www.jflex.de/
[5] http://www.fsf.org/licensing/licenses/gpl.html
[6] http://java.sun.com/javase/downloads/index.jsp

