/* Minion
* Copyright (C) 2006
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

struct AbstractTriggerCreator;

typedef vector<shared_ptr<AbstractTriggerCreator> > triggerCollection;

/// Base type from which all constraints are derived.
struct Constraint
{
  /// Function which impose all the triggers generated by setup_internal, which shouldn't be changed.
  void setup();

  /// Gets all the triggers a constraint wants to set up.
  /** This function shouldn't do any propagation. That is full_propagate's job.*/
  virtual triggerCollection setup_internal() = 0;

  // In function_defs.hpp
  virtual Constraint* get_table_constraint();

  /// Performs a full round of propagation and sets up any data needs by propogate().
  /** This function can be called during search if the function is reified */
  virtual void full_propogate()
  { 
    Constraint* c(get_table_constraint());
    c->full_propogate(); 
	delete c;
  }
  
  /// Iterative propagation function.
  /** Can assume full_propagate is always called at least once before propagate */
  virtual void propogate(int, DomainDelta) = 0;

  // Returns a table constraint which implements this constraint
  /** The main reason for this function is to make the constraint package up all its variables */
  virtual vector<AnyVarRef> get_vars()
  { D_ASSERT(0); exit(35); }
  

  /// Checks if an assignment is satisfied.
  /** This takes the variable order returned by, and is mainly only used by, get_table_constraint() */
  virtual bool check_assignment(vector<int>)
  { D_ASSERT(0); exit(36); }
  
  /// Checks if a constraint cannot be satisfied, and sets up any data structures for future incremental checks.
  /** This function is used by rarification */
  virtual bool full_check_unsat()
  { D_ASSERT(0); exit(37); }
    
  /// Checks incrementaly if constraint cannot be satisfied.
  /** This function should not be called unless check_unsat_full is called first. This is used by rarification */
  virtual bool check_unsat(int,DomainDelta)
  { D_ASSERT(0); exit(38); }
  
  
  /// Returns the reverse of the current constraint
  /** Used by rarification */
  virtual Constraint* reverse_constraint()
  { 
    D_ASSERT(0);
	D_ASSERT(0); exit(39); 
  }
  
  virtual ~Constraint()
  {}
};


inline void Constraint::setup()
{
  triggerCollection t = setup_internal();
  for(triggerCollection::iterator it = t.begin(); it != t.end(); ++it)
  {
    (*it)->post_trigger();
  }
}
